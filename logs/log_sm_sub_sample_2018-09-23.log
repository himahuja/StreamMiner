[09/23/2018 07:02:47 AM] Launching sm..
[09/23/2018 07:02:47 AM] Dataset: sub_sample.csv
[09/23/2018 07:02:47 AM] Output dir: /home/alex/Documents/streamminer/output
[09/23/2018 07:02:47 AM] Read data: (39, 7) sub_sample.csv
[09/23/2018 07:02:47 AM] Note: Found non-NA records: (39, 7)
[09/23/2018 07:02:47 AM] Reconstructing graph from /home/alex/Documents/streamminer/data/kg/_undir
[09/23/2018 07:02:47 AM] 

[09/23/2018 07:02:48 AM] => Loaded: undir_data.npy
[09/23/2018 07:02:48 AM] 

[09/23/2018 07:02:48 AM] => Loaded: undir_indptr.npy
[09/23/2018 07:02:48 AM] 

[09/23/2018 07:02:49 AM] => Loaded: undir_indices.npy
[09/23/2018 07:02:49 AM] 

[09/23/2018 07:02:49 AM] => Loaded: undir_indeg_vec.npy
[09/23/2018 07:02:49 AM] 

[09/23/2018 07:02:49 AM] => Graph loaded: 1.68 secs.

[09/23/2018 07:02:49 AM] 

[09/23/2018 07:02:49 AM] PID is: 599.0, with type: float64
[09/23/2018 07:02:53 AM] => Path extraction..(this can take a while)
[09/23/2018 07:03:52 AM] Filename: streamminer2.py


[09/23/2018 07:03:52 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:03:52 AM] ================================================

[09/23/2018 07:03:52 AM]    329   1941.6 MiB   1941.6 MiB   @profile

[09/23/2018 07:03:52 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:03:52 AM]    331   1941.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:03:52 AM]    332   1964.8 MiB     23.2 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:03:52 AM]    333   1964.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:03:52 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:03:52 AM]    335                                     return discovered_paths

[09/23/2018 07:03:52 AM]    336   1964.8 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:03:52 AM]    337   1964.8 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:03:52 AM]    338   1964.8 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:03:52 AM]    339   1964.8 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:03:52 AM]    340   1964.8 MiB      0.0 MiB       B = []

[09/23/2018 07:03:52 AM]    341   1964.8 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:03:52 AM]    342   1964.8 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:03:52 AM]    343   2311.5 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:03:52 AM]    344   2311.5 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:03:52 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:03:52 AM]    346   2288.3 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:03:52 AM]    347   2288.3 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:03:52 AM]    348   2288.3 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:03:52 AM]    349   2288.3 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:03:52 AM]    350   2288.3 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:03:52 AM]    351   2288.3 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:03:52 AM]    352   2288.3 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:03:52 AM]    353   2288.3 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:03:52 AM]    354   2288.3 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:03:52 AM]    355   2288.3 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:03:52 AM]    356   2288.3 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:03:52 AM]    357   2311.5 MiB    346.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:03:52 AM]    358   2311.5 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:03:52 AM]    359   2311.5 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:03:52 AM]    360   2311.5 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:03:52 AM]    361   2311.5 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:03:52 AM]    362   2311.5 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:03:52 AM]    363   2311.5 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:03:52 AM]    364   2311.5 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:03:52 AM]    365   2311.5 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:03:52 AM]    366   2311.5 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:03:52 AM]    367   2311.5 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:03:52 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:03:52 AM]    369   2311.5 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:03:52 AM]    370   2311.5 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:03:52 AM]    371   2311.5 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:03:52 AM]    372   2311.5 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:03:52 AM]    373   2311.5 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:03:52 AM]    374   2311.5 MiB      0.0 MiB           if len(B):

[09/23/2018 07:03:52 AM]    375   2311.5 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:03:52 AM]    376   2311.5 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:03:52 AM]    377   2311.5 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:03:52 AM]    378                                     else:

[09/23/2018 07:03:52 AM]    379                                         break

[09/23/2018 07:03:52 AM]    380   2311.5 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:03:52 AM]    381   2311.5 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:03:52 AM]    382   2311.5 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:03:52 AM] 


[09/23/2018 07:03:52 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.0677970562743, Path (1):
[09/23/2018 07:03:52 AM] [392035] -189 (0.07)-> [2115741]

[09/23/2018 07:03:52 AM]  
[09/23/2018 07:03:52 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.129642864833, Path (3):
[09/23/2018 07:03:52 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.06)-> [2115741]

[09/23/2018 07:03:52 AM]  
[09/23/2018 07:03:52 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.227870891895, Path (3):
[09/23/2018 07:03:52 AM] [392035] -660 (0.03)-> [78] -660 (0.06)-> [532169] -236 (0.14)-> [2115741]

[09/23/2018 07:03:52 AM]  
[09/23/2018 07:03:52 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.32246592914, Path (5):
[09/23/2018 07:03:52 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [3040313] -236 (0.08)-> [532169] -236 (0.13)-> [2115741]

[09/23/2018 07:03:52 AM]  
[09/23/2018 07:03:52 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.292163189332, Path (5):
[09/23/2018 07:03:52 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [1006463] -236 (0.07)-> [532169] -236 (0.11)-> [2115741]

[09/23/2018 07:03:57 AM] Filename: streamminer2.py


[09/23/2018 07:03:57 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:03:57 AM] ================================================

[09/23/2018 07:03:57 AM]    329   2311.5 MiB   2311.5 MiB   @profile

[09/23/2018 07:03:57 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:03:57 AM]    331   2311.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:03:57 AM]    332   2334.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:03:57 AM]    333   2334.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:03:57 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:03:57 AM]    335   2334.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:03:57 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:03:57 AM]    337                                     'path': path_stack,

[09/23/2018 07:03:57 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:03:57 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:03:57 AM]    340                                 B = []

[09/23/2018 07:03:57 AM]    341                                 removed_edges = []

[09/23/2018 07:03:57 AM]    342                                 removed_nodes = []

[09/23/2018 07:03:57 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:03:57 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:03:57 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:03:57 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:03:57 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:03:57 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:03:57 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:03:57 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:03:57 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:03:57 AM]    352                                         for path_dict in A:

[09/23/2018 07:03:57 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:03:57 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:03:57 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:03:57 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:03:57 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:03:57 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:03:57 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:03:57 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:03:57 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:03:57 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:03:57 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:03:57 AM]    364                                                             'path': totalPath,

[09/23/2018 07:03:57 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:03:57 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:03:57 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:03:57 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:03:57 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:03:57 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:03:57 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:03:57 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:03:57 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:03:57 AM]    374                                     if len(B):

[09/23/2018 07:03:57 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:03:57 AM]    376                                         A.append(B[0])

[09/23/2018 07:03:57 AM]    377                                         B.pop(0)

[09/23/2018 07:03:57 AM]    378                                     else:

[09/23/2018 07:03:57 AM]    379                                         break

[09/23/2018 07:03:57 AM]    380                                 for path_dict in A:

[09/23/2018 07:03:57 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:03:57 AM]    382                                 return discovered_paths

[09/23/2018 07:03:57 AM] 


[09/23/2018 07:04:10 AM] Filename: streamminer2.py


[09/23/2018 07:04:10 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:04:10 AM] ================================================

[09/23/2018 07:04:10 AM]    329   2334.6 MiB   2334.6 MiB   @profile

[09/23/2018 07:04:10 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:04:10 AM]    331   2334.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:04:10 AM]    332   2357.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:04:10 AM]    333   2357.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:04:10 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:04:10 AM]    335   2357.7 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:04:10 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:04:10 AM]    337                                     'path': path_stack,

[09/23/2018 07:04:10 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:04:10 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:04:10 AM]    340                                 B = []

[09/23/2018 07:04:10 AM]    341                                 removed_edges = []

[09/23/2018 07:04:10 AM]    342                                 removed_nodes = []

[09/23/2018 07:04:10 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:04:10 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:04:10 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:04:10 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:04:10 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:04:10 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:04:10 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:04:10 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:04:10 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:04:10 AM]    352                                         for path_dict in A:

[09/23/2018 07:04:10 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:04:10 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:04:10 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:04:10 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:04:10 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:04:10 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:04:10 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:04:10 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:04:10 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:04:10 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:04:10 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:04:10 AM]    364                                                             'path': totalPath,

[09/23/2018 07:04:10 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:04:10 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:04:10 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:04:10 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:04:10 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:04:10 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:04:10 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:04:10 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:04:10 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:04:10 AM]    374                                     if len(B):

[09/23/2018 07:04:10 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:04:10 AM]    376                                         A.append(B[0])

[09/23/2018 07:04:10 AM]    377                                         B.pop(0)

[09/23/2018 07:04:10 AM]    378                                     else:

[09/23/2018 07:04:10 AM]    379                                         break

[09/23/2018 07:04:10 AM]    380                                 for path_dict in A:

[09/23/2018 07:04:10 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:04:10 AM]    382                                 return discovered_paths

[09/23/2018 07:04:10 AM] 


[09/23/2018 07:04:17 AM] Filename: streamminer2.py


[09/23/2018 07:04:17 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:04:17 AM] ================================================

[09/23/2018 07:04:17 AM]    329   2357.7 MiB   2357.7 MiB   @profile

[09/23/2018 07:04:17 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:04:17 AM]    331   2357.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:04:17 AM]    332   2380.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:04:17 AM]    333   2380.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:04:17 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:04:17 AM]    335   2380.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:04:17 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:04:17 AM]    337                                     'path': path_stack,

[09/23/2018 07:04:17 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:04:17 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:04:17 AM]    340                                 B = []

[09/23/2018 07:04:17 AM]    341                                 removed_edges = []

[09/23/2018 07:04:17 AM]    342                                 removed_nodes = []

[09/23/2018 07:04:17 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:04:17 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:04:17 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:04:17 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:04:17 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:04:17 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:04:17 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:04:17 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:04:17 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:04:17 AM]    352                                         for path_dict in A:

[09/23/2018 07:04:17 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:04:17 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:04:17 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:04:17 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:04:17 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:04:17 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:04:17 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:04:17 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:04:17 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:04:17 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:04:17 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:04:17 AM]    364                                                             'path': totalPath,

[09/23/2018 07:04:17 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:04:17 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:04:17 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:04:17 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:04:17 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:04:17 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:04:17 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:04:17 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:04:17 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:04:17 AM]    374                                     if len(B):

[09/23/2018 07:04:17 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:04:17 AM]    376                                         A.append(B[0])

[09/23/2018 07:04:17 AM]    377                                         B.pop(0)

[09/23/2018 07:04:17 AM]    378                                     else:

[09/23/2018 07:04:17 AM]    379                                         break

[09/23/2018 07:04:17 AM]    380                                 for path_dict in A:

[09/23/2018 07:04:17 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:04:17 AM]    382                                 return discovered_paths

[09/23/2018 07:04:17 AM] 


[09/23/2018 07:05:49 AM] Filename: streamminer2.py


[09/23/2018 07:05:49 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:05:49 AM] ================================================

[09/23/2018 07:05:49 AM]    329   2380.8 MiB   2380.8 MiB   @profile

[09/23/2018 07:05:49 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:05:49 AM]    331   2380.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:05:49 AM]    332   2404.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:05:49 AM]    333   2404.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:05:49 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:05:49 AM]    335                                     return discovered_paths

[09/23/2018 07:05:49 AM]    336   2404.0 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:05:49 AM]    337   2404.0 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:05:49 AM]    338   2404.0 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:05:49 AM]    339   2404.0 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:05:49 AM]    340   2404.0 MiB      0.0 MiB       B = []

[09/23/2018 07:05:49 AM]    341   2404.0 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:05:49 AM]    342   2404.0 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:05:49 AM]    343   2773.9 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:05:49 AM]    344   2773.9 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:05:49 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:05:49 AM]    346   2750.8 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:05:49 AM]    347   2750.8 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:05:49 AM]    348   2750.8 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:05:49 AM]    349   2750.8 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:05:49 AM]    350   2750.8 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:05:49 AM]    351   2750.8 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:05:49 AM]    352   2750.8 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:05:49 AM]    353   2750.8 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:05:49 AM]    354   2750.8 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:05:49 AM]    355   2750.8 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:05:49 AM]    356   2750.8 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:05:49 AM]    357   2773.9 MiB    369.9 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:05:49 AM]    358   2773.9 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:05:49 AM]    359   2773.9 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:05:49 AM]    360   2773.9 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:05:49 AM]    361   2773.9 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:05:49 AM]    362   2773.9 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:05:49 AM]    363   2773.9 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:05:49 AM]    364   2773.9 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:05:49 AM]    365   2773.9 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:05:49 AM]    366   2773.9 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:05:49 AM]    367   2773.9 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:05:49 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:05:49 AM]    369   2773.9 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:05:49 AM]    370   2773.9 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:05:49 AM]    371   2773.9 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:05:49 AM]    372   2773.9 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:05:49 AM]    373   2773.9 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:05:49 AM]    374   2773.9 MiB      0.0 MiB           if len(B):

[09/23/2018 07:05:49 AM]    375   2773.9 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:05:49 AM]    376   2773.9 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:05:49 AM]    377   2773.9 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:05:49 AM]    378                                     else:

[09/23/2018 07:05:49 AM]    379                                         break

[09/23/2018 07:05:49 AM]    380   2773.9 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:05:49 AM]    381   2773.9 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:05:49 AM]    382   2773.9 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:05:49 AM] 


[09/23/2018 07:05:49 AM]  
[09/23/2018 07:05:49 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.0709806674345, Path (1):
[09/23/2018 07:05:49 AM] [482030] -189 (0.07)-> [2364618]

[09/23/2018 07:05:49 AM]  
[09/23/2018 07:05:49 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.189150057923, Path (3):
[09/23/2018 07:05:49 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -189 (0.08)-> [2364618]

[09/23/2018 07:05:49 AM]  
[09/23/2018 07:05:49 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.300590160143, Path (5):
[09/23/2018 07:05:49 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -123 (0.03)-> [3229261] -123 (0.06)-> [3641685] -189 (0.1)-> [2364618]

[09/23/2018 07:05:49 AM]  
[09/23/2018 07:05:49 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.307470839662, Path (7):
[09/23/2018 07:05:49 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -601 (0.04)-> [3741813] -601 (0.05)-> [679305] -601 (0.06)-> [2364618]

[09/23/2018 07:05:49 AM]  
[09/23/2018 07:05:49 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.298667188758, Path (7):
[09/23/2018 07:05:49 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -660 (0.03)-> [662] -660 (0.05)-> [2287973] -601 (0.06)-> [2364618]

[09/23/2018 07:06:00 AM] Filename: streamminer2.py


[09/23/2018 07:06:00 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:06:00 AM] ================================================

[09/23/2018 07:06:00 AM]    329   2773.9 MiB   2773.9 MiB   @profile

[09/23/2018 07:06:00 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:06:00 AM]    331   2773.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:06:00 AM]    332   2797.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:06:00 AM]    333   2797.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:06:00 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:06:00 AM]    335   2797.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:06:00 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:06:00 AM]    337                                     'path': path_stack,

[09/23/2018 07:06:00 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:06:00 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:06:00 AM]    340                                 B = []

[09/23/2018 07:06:00 AM]    341                                 removed_edges = []

[09/23/2018 07:06:00 AM]    342                                 removed_nodes = []

[09/23/2018 07:06:00 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:06:00 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:06:00 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:06:00 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:06:00 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:06:00 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:06:00 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:06:00 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:06:00 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:06:00 AM]    352                                         for path_dict in A:

[09/23/2018 07:06:00 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:06:00 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:06:00 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:06:00 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:06:00 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:06:00 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:06:00 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:06:00 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:06:00 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:06:00 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:06:00 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:06:00 AM]    364                                                             'path': totalPath,

[09/23/2018 07:06:00 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:06:00 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:06:00 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:06:00 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:06:00 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:06:00 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:06:00 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:06:00 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:06:00 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:06:00 AM]    374                                     if len(B):

[09/23/2018 07:06:00 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:06:00 AM]    376                                         A.append(B[0])

[09/23/2018 07:06:00 AM]    377                                         B.pop(0)

[09/23/2018 07:06:00 AM]    378                                     else:

[09/23/2018 07:06:00 AM]    379                                         break

[09/23/2018 07:06:00 AM]    380                                 for path_dict in A:

[09/23/2018 07:06:00 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:06:00 AM]    382                                 return discovered_paths

[09/23/2018 07:06:00 AM] 


[09/23/2018 07:06:11 AM] Filename: streamminer2.py


[09/23/2018 07:06:11 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:06:11 AM] ================================================

[09/23/2018 07:06:11 AM]    329   2797.0 MiB   2797.0 MiB   @profile

[09/23/2018 07:06:11 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:06:11 AM]    331   2797.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:06:11 AM]    332   2820.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:06:11 AM]    333   2820.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:06:11 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:06:11 AM]    335   2820.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:06:11 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:06:11 AM]    337                                     'path': path_stack,

[09/23/2018 07:06:11 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:06:11 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:06:11 AM]    340                                 B = []

[09/23/2018 07:06:11 AM]    341                                 removed_edges = []

[09/23/2018 07:06:11 AM]    342                                 removed_nodes = []

[09/23/2018 07:06:11 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:06:11 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:06:11 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:06:11 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:06:11 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:06:11 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:06:11 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:06:11 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:06:11 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:06:11 AM]    352                                         for path_dict in A:

[09/23/2018 07:06:11 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:06:11 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:06:11 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:06:11 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:06:11 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:06:11 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:06:11 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:06:11 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:06:11 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:06:11 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:06:11 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:06:11 AM]    364                                                             'path': totalPath,

[09/23/2018 07:06:11 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:06:11 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:06:11 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:06:11 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:06:11 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:06:11 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:06:11 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:06:11 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:06:11 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:06:11 AM]    374                                     if len(B):

[09/23/2018 07:06:11 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:06:11 AM]    376                                         A.append(B[0])

[09/23/2018 07:06:11 AM]    377                                         B.pop(0)

[09/23/2018 07:06:11 AM]    378                                     else:

[09/23/2018 07:06:11 AM]    379                                         break

[09/23/2018 07:06:11 AM]    380                                 for path_dict in A:

[09/23/2018 07:06:11 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:06:11 AM]    382                                 return discovered_paths

[09/23/2018 07:06:11 AM] 


[09/23/2018 07:06:18 AM] Filename: streamminer2.py


[09/23/2018 07:06:18 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:06:18 AM] ================================================

[09/23/2018 07:06:18 AM]    329   2820.2 MiB   2820.2 MiB   @profile

[09/23/2018 07:06:18 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:06:18 AM]    331   2820.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:06:18 AM]    332   2843.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:06:18 AM]    333   2843.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:06:18 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:06:18 AM]    335   2843.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:06:18 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:06:18 AM]    337                                     'path': path_stack,

[09/23/2018 07:06:18 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:06:18 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:06:18 AM]    340                                 B = []

[09/23/2018 07:06:18 AM]    341                                 removed_edges = []

[09/23/2018 07:06:18 AM]    342                                 removed_nodes = []

[09/23/2018 07:06:18 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:06:18 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:06:18 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:06:18 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:06:18 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:06:18 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:06:18 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:06:18 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:06:18 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:06:18 AM]    352                                         for path_dict in A:

[09/23/2018 07:06:18 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:06:18 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:06:18 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:06:18 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:06:18 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:06:18 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:06:18 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:06:18 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:06:18 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:06:18 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:06:18 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:06:18 AM]    364                                                             'path': totalPath,

[09/23/2018 07:06:18 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:06:18 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:06:18 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:06:18 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:06:18 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:06:18 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:06:18 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:06:18 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:06:18 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:06:18 AM]    374                                     if len(B):

[09/23/2018 07:06:18 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:06:18 AM]    376                                         A.append(B[0])

[09/23/2018 07:06:18 AM]    377                                         B.pop(0)

[09/23/2018 07:06:18 AM]    378                                     else:

[09/23/2018 07:06:18 AM]    379                                         break

[09/23/2018 07:06:18 AM]    380                                 for path_dict in A:

[09/23/2018 07:06:18 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:06:18 AM]    382                                 return discovered_paths

[09/23/2018 07:06:18 AM] 


[09/23/2018 07:07:11 AM] Filename: streamminer2.py


[09/23/2018 07:07:11 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:07:11 AM] ================================================

[09/23/2018 07:07:11 AM]    329   2843.3 MiB   2843.3 MiB   @profile

[09/23/2018 07:07:11 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:07:11 AM]    331   2843.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:07:11 AM]    332   2866.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:11 AM]    333   2866.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:07:11 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:07:11 AM]    335                                     return discovered_paths

[09/23/2018 07:07:11 AM]    336   2866.4 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:07:11 AM]    337   2866.4 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:07:11 AM]    338   2866.4 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:07:11 AM]    339   2866.4 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:07:11 AM]    340   2866.4 MiB      0.0 MiB       B = []

[09/23/2018 07:07:11 AM]    341   2866.4 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:07:11 AM]    342   2866.4 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:07:11 AM]    343   3143.8 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:07:11 AM]    344   3143.8 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:07:11 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:07:11 AM]    346   3120.7 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:07:11 AM]    347   3120.7 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:07:11 AM]    348   3120.7 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:07:11 AM]    349   3120.7 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:07:11 AM]    350   3120.7 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:07:11 AM]    351   3120.7 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:07:11 AM]    352   3120.7 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:07:11 AM]    353   3120.7 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:07:11 AM]    354   3120.7 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:07:11 AM]    355   3120.7 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:07:11 AM]    356   3120.7 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:07:11 AM]    357   3143.8 MiB    277.4 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:11 AM]    358   3143.8 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:07:11 AM]    359   3143.8 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:07:11 AM]    360   3143.8 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:07:11 AM]    361   3143.8 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:07:11 AM]    362   3143.8 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:07:11 AM]    363   3143.8 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:07:11 AM]    364   3143.8 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:07:11 AM]    365   3143.8 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:07:11 AM]    366   3143.8 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:07:11 AM]    367   3143.8 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:07:11 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:07:11 AM]    369   3143.8 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:07:11 AM]    370   3143.8 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:07:11 AM]    371   3143.8 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:07:11 AM]    372   3143.8 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:07:11 AM]    373   3143.8 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:07:11 AM]    374   3143.8 MiB      0.0 MiB           if len(B):

[09/23/2018 07:07:11 AM]    375   3143.8 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:07:11 AM]    376   3143.8 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:07:11 AM]    377   3143.8 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:07:11 AM]    378                                     else:

[09/23/2018 07:07:11 AM]    379                                         break

[09/23/2018 07:07:11 AM]    380   3143.8 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:07:11 AM]    381   3143.8 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:07:11 AM]    382   3143.8 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:07:11 AM] 


[09/23/2018 07:07:11 AM]  
[09/23/2018 07:07:11 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.0709806674345, Path (1):
[09/23/2018 07:07:11 AM] [494082] -189 (0.07)-> [4119746]

[09/23/2018 07:07:11 AM]  
[09/23/2018 07:07:11 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.185839285232, Path (3):
[09/23/2018 07:07:11 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -189 (0.08)-> [4119746]

[09/23/2018 07:07:11 AM]  
[09/23/2018 07:07:11 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.185223180919, Path (3):
[09/23/2018 07:07:11 AM] [494082] -462 (0.04)-> [1095182] -462 (0.07)-> [4421062] -189 (0.08)-> [4119746]

[09/23/2018 07:07:11 AM]  
[09/23/2018 07:07:11 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.236441046223, Path (5):
[09/23/2018 07:07:11 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -65 (0.03)-> [3516497] -65 (0.04)-> [4370446] -189 (0.06)-> [4119746]

[09/23/2018 07:07:11 AM]  
[09/23/2018 07:07:11 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.318141167082, Path (3):
[09/23/2018 07:07:11 AM] [494082] -462 (0.04)-> [4182344] -462 (0.06)-> [3400649] -189 (0.23)-> [4119746]

[09/23/2018 07:07:22 AM] Filename: streamminer2.py


[09/23/2018 07:07:22 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:07:22 AM] ================================================

[09/23/2018 07:07:22 AM]    329   3143.8 MiB   3143.8 MiB   @profile

[09/23/2018 07:07:22 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:07:22 AM]    331   3143.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:07:22 AM]    332   3167.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:22 AM]    333   3167.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:07:22 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:07:22 AM]    335   3167.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:07:22 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:07:22 AM]    337                                     'path': path_stack,

[09/23/2018 07:07:22 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:07:22 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:07:22 AM]    340                                 B = []

[09/23/2018 07:07:22 AM]    341                                 removed_edges = []

[09/23/2018 07:07:22 AM]    342                                 removed_nodes = []

[09/23/2018 07:07:22 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:07:22 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:07:22 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:07:22 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:07:22 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:07:22 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:07:22 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:07:22 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:07:22 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:07:22 AM]    352                                         for path_dict in A:

[09/23/2018 07:07:22 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:07:22 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:07:22 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:07:22 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:07:22 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:22 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:07:22 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:07:22 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:07:22 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:07:22 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:07:22 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:07:22 AM]    364                                                             'path': totalPath,

[09/23/2018 07:07:22 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:07:22 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:07:22 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:07:22 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:07:22 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:07:22 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:07:22 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:07:22 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:07:22 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:07:22 AM]    374                                     if len(B):

[09/23/2018 07:07:22 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:07:22 AM]    376                                         A.append(B[0])

[09/23/2018 07:07:22 AM]    377                                         B.pop(0)

[09/23/2018 07:07:22 AM]    378                                     else:

[09/23/2018 07:07:22 AM]    379                                         break

[09/23/2018 07:07:22 AM]    380                                 for path_dict in A:

[09/23/2018 07:07:22 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:07:22 AM]    382                                 return discovered_paths

[09/23/2018 07:07:22 AM] 


[09/23/2018 07:07:37 AM] Filename: streamminer2.py


[09/23/2018 07:07:37 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:07:37 AM] ================================================

[09/23/2018 07:07:37 AM]    329   3167.0 MiB   3167.0 MiB   @profile

[09/23/2018 07:07:37 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:07:37 AM]    331   3167.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:07:37 AM]    332   3190.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:37 AM]    333   3190.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:07:37 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:07:37 AM]    335   3190.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:07:37 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:07:37 AM]    337                                     'path': path_stack,

[09/23/2018 07:07:37 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:07:37 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:07:37 AM]    340                                 B = []

[09/23/2018 07:07:37 AM]    341                                 removed_edges = []

[09/23/2018 07:07:37 AM]    342                                 removed_nodes = []

[09/23/2018 07:07:37 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:07:37 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:07:37 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:07:37 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:07:37 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:07:37 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:07:37 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:07:37 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:07:37 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:07:37 AM]    352                                         for path_dict in A:

[09/23/2018 07:07:37 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:07:37 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:07:37 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:07:37 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:07:37 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:37 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:07:37 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:07:37 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:07:37 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:07:37 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:07:37 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:07:37 AM]    364                                                             'path': totalPath,

[09/23/2018 07:07:37 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:07:37 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:07:37 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:07:37 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:07:37 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:07:37 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:07:37 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:07:37 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:07:37 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:07:37 AM]    374                                     if len(B):

[09/23/2018 07:07:37 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:07:37 AM]    376                                         A.append(B[0])

[09/23/2018 07:07:37 AM]    377                                         B.pop(0)

[09/23/2018 07:07:37 AM]    378                                     else:

[09/23/2018 07:07:37 AM]    379                                         break

[09/23/2018 07:07:37 AM]    380                                 for path_dict in A:

[09/23/2018 07:07:37 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:07:37 AM]    382                                 return discovered_paths

[09/23/2018 07:07:37 AM] 


[09/23/2018 07:07:44 AM] Filename: streamminer2.py


[09/23/2018 07:07:44 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:07:44 AM] ================================================

[09/23/2018 07:07:44 AM]    329   3190.1 MiB   3190.1 MiB   @profile

[09/23/2018 07:07:44 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:07:44 AM]    331   3190.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:07:44 AM]    332   3213.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:44 AM]    333   3213.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:07:44 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:07:44 AM]    335   3213.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:07:44 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:07:44 AM]    337                                     'path': path_stack,

[09/23/2018 07:07:44 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:07:44 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:07:44 AM]    340                                 B = []

[09/23/2018 07:07:44 AM]    341                                 removed_edges = []

[09/23/2018 07:07:44 AM]    342                                 removed_nodes = []

[09/23/2018 07:07:44 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:07:44 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:07:44 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:07:44 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:07:44 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:07:44 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:07:44 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:07:44 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:07:44 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:07:44 AM]    352                                         for path_dict in A:

[09/23/2018 07:07:44 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:07:44 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:07:44 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:07:44 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:07:44 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:07:44 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:07:44 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:07:44 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:07:44 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:07:44 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:07:44 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:07:44 AM]    364                                                             'path': totalPath,

[09/23/2018 07:07:44 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:07:44 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:07:44 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:07:44 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:07:44 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:07:44 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:07:44 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:07:44 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:07:44 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:07:44 AM]    374                                     if len(B):

[09/23/2018 07:07:44 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:07:44 AM]    376                                         A.append(B[0])

[09/23/2018 07:07:44 AM]    377                                         B.pop(0)

[09/23/2018 07:07:44 AM]    378                                     else:

[09/23/2018 07:07:44 AM]    379                                         break

[09/23/2018 07:07:44 AM]    380                                 for path_dict in A:

[09/23/2018 07:07:44 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:07:44 AM]    382                                 return discovered_paths

[09/23/2018 07:07:44 AM] 


[09/23/2018 07:09:09 AM] Filename: streamminer2.py


[09/23/2018 07:09:09 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:09:09 AM] ================================================

[09/23/2018 07:09:09 AM]    329   3213.2 MiB   3213.2 MiB   @profile

[09/23/2018 07:09:09 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:09:09 AM]    331   3213.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:09:09 AM]    332   3236.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:09 AM]    333   3236.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:09:09 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:09:09 AM]    335                                     return discovered_paths

[09/23/2018 07:09:09 AM]    336   3236.3 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:09:09 AM]    337   3236.3 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:09:09 AM]    338   3236.3 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:09:09 AM]    339   3236.3 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:09:09 AM]    340   3236.3 MiB      0.0 MiB       B = []

[09/23/2018 07:09:09 AM]    341   3236.3 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:09:09 AM]    342   3236.3 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:09:09 AM]    343   3560.0 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:09:09 AM]    344   3560.0 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:09:09 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:09:09 AM]    346   3536.9 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:09:09 AM]    347   3536.9 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:09:09 AM]    348   3536.9 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:09:09 AM]    349   3536.9 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:09:09 AM]    350   3536.9 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:09:09 AM]    351   3536.9 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:09:09 AM]    352   3536.9 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:09:09 AM]    353   3536.9 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:09:09 AM]    354   3536.9 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:09:09 AM]    355   3536.9 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:09:09 AM]    356   3536.9 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:09:09 AM]    357   3560.0 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:09 AM]    358   3560.0 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:09:09 AM]    359   3560.0 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:09:09 AM]    360   3560.0 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:09:09 AM]    361   3560.0 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:09:09 AM]    362   3560.0 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:09:09 AM]    363   3560.0 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:09:09 AM]    364   3560.0 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:09:09 AM]    365   3560.0 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:09:09 AM]    366   3560.0 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:09:09 AM]    367   3560.0 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:09:09 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:09:09 AM]    369   3560.0 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:09:09 AM]    370   3560.0 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:09:09 AM]    371   3560.0 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:09:09 AM]    372   3560.0 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:09:09 AM]    373   3560.0 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:09:09 AM]    374   3560.0 MiB      0.0 MiB           if len(B):

[09/23/2018 07:09:09 AM]    375   3560.0 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:09:09 AM]    376   3560.0 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:09:09 AM]    377   3560.0 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:09:09 AM]    378                                     else:

[09/23/2018 07:09:09 AM]    379                                         break

[09/23/2018 07:09:09 AM]    380   3560.0 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:09:09 AM]    381   3560.0 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:09:09 AM]    382   3560.0 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:09:09 AM] 


[09/23/2018 07:09:09 AM]  
[09/23/2018 07:09:09 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.286517316618, Path (3):
[09/23/2018 07:09:09 AM] [846737] -65 (0.04)-> [1321700] -65 (0.09)-> [846745] -189 (0.15)-> [3782014]

[09/23/2018 07:09:09 AM]  
[09/23/2018 07:09:09 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.114141656281, Path (3):
[09/23/2018 07:09:09 AM] [846737] -480 (0.03)-> [769522] -480 (0.04)-> [5528006] -189 (0.05)-> [3782014]

[09/23/2018 07:09:09 AM]  
[09/23/2018 07:09:09 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.221127137519, Path (3):
[09/23/2018 07:09:09 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -189 (0.15)-> [3782014]

[09/23/2018 07:09:09 AM]  
[09/23/2018 07:09:09 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.293878884718, Path (5):
[09/23/2018 07:09:09 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -329 (0.04)-> [743463] -329 (0.07)-> [4327133] -189 (0.11)-> [3782014]

[09/23/2018 07:09:09 AM]  
[09/23/2018 07:09:09 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.262451694096, Path (5):
[09/23/2018 07:09:09 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -462 (0.04)-> [769614] -462 (0.07)-> [2927811] -189 (0.08)-> [3782014]

[09/23/2018 07:09:14 AM] Filename: streamminer2.py


[09/23/2018 07:09:14 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:09:14 AM] ================================================

[09/23/2018 07:09:14 AM]    329   3560.0 MiB   3560.0 MiB   @profile

[09/23/2018 07:09:14 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:09:14 AM]    331   3560.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:09:14 AM]    332   3583.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:14 AM]    333   3583.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:09:14 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:09:14 AM]    335   3583.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:09:14 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:09:14 AM]    337                                     'path': path_stack,

[09/23/2018 07:09:14 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:09:14 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:09:14 AM]    340                                 B = []

[09/23/2018 07:09:14 AM]    341                                 removed_edges = []

[09/23/2018 07:09:14 AM]    342                                 removed_nodes = []

[09/23/2018 07:09:14 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:09:14 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:09:14 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:09:14 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:09:14 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:09:14 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:09:14 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:09:14 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:09:14 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:09:14 AM]    352                                         for path_dict in A:

[09/23/2018 07:09:14 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:09:14 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:09:14 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:09:14 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:09:14 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:14 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:09:14 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:09:14 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:09:14 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:09:14 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:09:14 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:09:14 AM]    364                                                             'path': totalPath,

[09/23/2018 07:09:14 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:09:14 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:09:14 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:09:14 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:09:14 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:09:14 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:09:14 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:09:14 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:09:14 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:09:14 AM]    374                                     if len(B):

[09/23/2018 07:09:14 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:09:14 AM]    376                                         A.append(B[0])

[09/23/2018 07:09:14 AM]    377                                         B.pop(0)

[09/23/2018 07:09:14 AM]    378                                     else:

[09/23/2018 07:09:14 AM]    379                                         break

[09/23/2018 07:09:14 AM]    380                                 for path_dict in A:

[09/23/2018 07:09:14 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:09:14 AM]    382                                 return discovered_paths

[09/23/2018 07:09:14 AM] 


[09/23/2018 07:09:18 AM] Filename: streamminer2.py


[09/23/2018 07:09:18 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:09:18 AM] ================================================

[09/23/2018 07:09:18 AM]    329   3583.1 MiB   3583.1 MiB   @profile

[09/23/2018 07:09:18 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:09:18 AM]    331   3583.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:09:18 AM]    332   3606.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:18 AM]    333   3606.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:09:18 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:09:18 AM]    335   3606.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:09:18 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:09:18 AM]    337                                     'path': path_stack,

[09/23/2018 07:09:18 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:09:18 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:09:18 AM]    340                                 B = []

[09/23/2018 07:09:18 AM]    341                                 removed_edges = []

[09/23/2018 07:09:18 AM]    342                                 removed_nodes = []

[09/23/2018 07:09:18 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:09:18 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:09:18 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:09:18 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:09:18 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:09:18 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:09:18 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:09:18 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:09:18 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:09:18 AM]    352                                         for path_dict in A:

[09/23/2018 07:09:18 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:09:18 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:09:18 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:09:18 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:09:18 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:18 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:09:18 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:09:18 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:09:18 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:09:18 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:09:18 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:09:18 AM]    364                                                             'path': totalPath,

[09/23/2018 07:09:18 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:09:18 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:09:18 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:09:18 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:09:18 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:09:18 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:09:18 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:09:18 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:09:18 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:09:18 AM]    374                                     if len(B):

[09/23/2018 07:09:18 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:09:18 AM]    376                                         A.append(B[0])

[09/23/2018 07:09:18 AM]    377                                         B.pop(0)

[09/23/2018 07:09:18 AM]    378                                     else:

[09/23/2018 07:09:18 AM]    379                                         break

[09/23/2018 07:09:18 AM]    380                                 for path_dict in A:

[09/23/2018 07:09:18 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:09:18 AM]    382                                 return discovered_paths

[09/23/2018 07:09:18 AM] 


[09/23/2018 07:09:23 AM] Filename: streamminer2.py


[09/23/2018 07:09:23 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:09:23 AM] ================================================

[09/23/2018 07:09:23 AM]    329   3606.3 MiB   3606.3 MiB   @profile

[09/23/2018 07:09:23 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:09:23 AM]    331   3606.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:09:23 AM]    332   3629.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:23 AM]    333   3629.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:09:23 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:09:23 AM]    335   3629.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:09:23 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:09:23 AM]    337                                     'path': path_stack,

[09/23/2018 07:09:23 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:09:23 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:09:23 AM]    340                                 B = []

[09/23/2018 07:09:23 AM]    341                                 removed_edges = []

[09/23/2018 07:09:23 AM]    342                                 removed_nodes = []

[09/23/2018 07:09:23 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:09:23 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:09:23 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:09:23 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:09:23 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:09:23 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:09:23 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:09:23 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:09:23 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:09:23 AM]    352                                         for path_dict in A:

[09/23/2018 07:09:23 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:09:23 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:09:23 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:09:23 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:09:23 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:09:23 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:09:23 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:09:23 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:09:23 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:09:23 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:09:23 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:09:23 AM]    364                                                             'path': totalPath,

[09/23/2018 07:09:23 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:09:23 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:09:23 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:09:23 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:09:23 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:09:23 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:09:23 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:09:23 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:09:23 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:09:23 AM]    374                                     if len(B):

[09/23/2018 07:09:23 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:09:23 AM]    376                                         A.append(B[0])

[09/23/2018 07:09:23 AM]    377                                         B.pop(0)

[09/23/2018 07:09:23 AM]    378                                     else:

[09/23/2018 07:09:23 AM]    379                                         break

[09/23/2018 07:09:23 AM]    380                                 for path_dict in A:

[09/23/2018 07:09:23 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:09:23 AM]    382                                 return discovered_paths

[09/23/2018 07:09:23 AM] 


[09/23/2018 07:10:59 AM] Launching sm..
[09/23/2018 07:10:59 AM] Dataset: sub_sample.csv
[09/23/2018 07:10:59 AM] Output dir: /home/alex/Documents/streamminer/output
[09/23/2018 07:10:59 AM] Read data: (39, 7) sub_sample.csv
[09/23/2018 07:10:59 AM] Note: Found non-NA records: (39, 7)
[09/23/2018 07:10:59 AM] Reconstructing graph from /home/alex/Documents/streamminer/data/kg/_undir
[09/23/2018 07:10:59 AM] 

[09/23/2018 07:11:00 AM] => Loaded: undir_data.npy
[09/23/2018 07:11:00 AM] 

[09/23/2018 07:11:00 AM] => Loaded: undir_indptr.npy
[09/23/2018 07:11:00 AM] 

[09/23/2018 07:11:01 AM] => Loaded: undir_indices.npy
[09/23/2018 07:11:01 AM] 

[09/23/2018 07:11:01 AM] => Loaded: undir_indeg_vec.npy
[09/23/2018 07:11:01 AM] 

[09/23/2018 07:11:01 AM] => Graph loaded: 1.30 secs.

[09/23/2018 07:11:01 AM] 

[09/23/2018 07:11:01 AM] PID is: 599.0, with type: float64
[09/23/2018 07:11:04 AM] Filename: streamminer2.py


[09/23/2018 07:11:04 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:11:04 AM] ================================================

[09/23/2018 07:11:04 AM]    329   3629.4 MiB   3629.4 MiB   @profile

[09/23/2018 07:11:04 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:11:04 AM]    331   3629.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:11:04 AM]    332   3652.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:04 AM]    333   3652.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:11:04 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:11:04 AM]    335                                     return discovered_paths

[09/23/2018 07:11:04 AM]    336   3652.5 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:11:04 AM]    337   3652.5 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:11:04 AM]    338   3652.5 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:11:04 AM]    339   3652.5 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:11:04 AM]    340   3652.5 MiB      0.0 MiB       B = []

[09/23/2018 07:11:04 AM]    341   3652.5 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:11:04 AM]    342   3652.5 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:11:04 AM]    343   3946.5 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:11:04 AM]    344   3951.1 MiB     -4.7 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:11:04 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:11:04 AM]    346   3951.1 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:11:04 AM]    347   3951.1 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:11:04 AM]    348   3951.1 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:11:04 AM]    349   3951.1 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:11:04 AM]    350   3951.1 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:11:04 AM]    351   3951.1 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:11:04 AM]    352   3951.1 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:11:04 AM]    353   3951.1 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:11:04 AM]    354   3951.1 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:11:04 AM]    355   3951.1 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:11:04 AM]    356   3951.1 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:11:04 AM]    357   3951.1 MiB    293.9 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:04 AM]    358   3951.1 MiB     -4.7 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:11:04 AM]    359   3951.1 MiB     -4.7 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:11:04 AM]    360   3951.1 MiB     -4.7 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:11:04 AM]    361   3951.1 MiB     -4.7 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:11:04 AM]    362   3951.1 MiB     -4.7 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:11:04 AM]    363   3951.1 MiB     -4.7 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:11:04 AM]    364   3951.1 MiB     -4.7 MiB                                   'path': totalPath,

[09/23/2018 07:11:04 AM]    365   3951.1 MiB     -4.7 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:11:04 AM]    366   3951.1 MiB     -4.7 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:11:04 AM]    367   3951.1 MiB     -4.7 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:11:04 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:11:04 AM]    369   3951.1 MiB     -4.7 MiB                       B.append(potential_k)

[09/23/2018 07:11:04 AM]    370   3951.1 MiB     -4.7 MiB               removed_nodes.reverse()

[09/23/2018 07:11:04 AM]    371   3951.1 MiB     -4.7 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:11:04 AM]    372   3951.1 MiB     -4.7 MiB               removed_edges.reverse()

[09/23/2018 07:11:04 AM]    373   3951.1 MiB     -4.7 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:11:04 AM]    374   3946.5 MiB     -4.7 MiB           if len(B):

[09/23/2018 07:11:04 AM]    375   3946.5 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:11:04 AM]    376   3946.5 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:11:04 AM]    377   3946.5 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:11:04 AM]    378                                     else:

[09/23/2018 07:11:04 AM]    379                                         break

[09/23/2018 07:11:04 AM]    380   3946.5 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:11:04 AM]    381   3946.5 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:11:04 AM]    382   3946.5 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:11:04 AM] 


[09/23/2018 07:11:04 AM]  
[09/23/2018 07:11:04 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.223007000151, Path (3):
[09/23/2018 07:11:04 AM] [851870] -123 (0.04)-> [4568464] -123 (0.07)-> [2016524] -189 (0.11)-> [917821]

[09/23/2018 07:11:04 AM]  
[09/23/2018 07:11:04 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.127755595684, Path (3):
[09/23/2018 07:11:04 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.07)-> [917821]

[09/23/2018 07:11:04 AM]  
[09/23/2018 07:11:04 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.264946302339, Path (3):
[09/23/2018 07:11:04 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -189 (0.18)-> [917821]

[09/23/2018 07:11:04 AM]  
[09/23/2018 07:11:04 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.215151373218, Path (5):
[09/23/2018 07:11:04 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -65 (0.03)-> [5450691] -65 (0.04)-> [4448484] -189 (0.05)-> [917821]

[09/23/2018 07:11:04 AM]  
[09/23/2018 07:11:04 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.289964307411, Path (5):
[09/23/2018 07:11:04 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.04)-> [2932568] -121 (0.08)-> [1928825] -189 (0.11)-> [917821]

[09/23/2018 07:11:07 AM] => Path extraction..(this can take a while)
[09/23/2018 07:11:12 AM] Filename: streamminer2.py


[09/23/2018 07:11:12 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:11:12 AM] ================================================

[09/23/2018 07:11:12 AM]    329   3946.5 MiB   3946.5 MiB   @profile

[09/23/2018 07:11:12 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:11:12 AM]    331   3946.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:11:12 AM]    332   3381.1 MiB   -565.4 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:12 AM]    333   3381.4 MiB      0.3 MiB       if rel_stack == [-1]:

[09/23/2018 07:11:12 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:11:12 AM]    335   3381.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:11:12 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:11:12 AM]    337                                     'path': path_stack,

[09/23/2018 07:11:12 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:11:12 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:11:12 AM]    340                                 B = []

[09/23/2018 07:11:12 AM]    341                                 removed_edges = []

[09/23/2018 07:11:12 AM]    342                                 removed_nodes = []

[09/23/2018 07:11:12 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:11:12 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:11:12 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:11:12 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:11:12 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:11:12 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:11:12 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:11:12 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:11:12 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:11:12 AM]    352                                         for path_dict in A:

[09/23/2018 07:11:12 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:11:12 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:11:12 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:11:12 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:11:12 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:12 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:11:12 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:11:12 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:11:12 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:11:12 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:11:12 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:11:12 AM]    364                                                             'path': totalPath,

[09/23/2018 07:11:12 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:11:12 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:11:12 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:11:12 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:11:12 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:11:12 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:11:12 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:11:12 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:11:12 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:11:12 AM]    374                                     if len(B):

[09/23/2018 07:11:12 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:11:12 AM]    376                                         A.append(B[0])

[09/23/2018 07:11:12 AM]    377                                         B.pop(0)

[09/23/2018 07:11:12 AM]    378                                     else:

[09/23/2018 07:11:12 AM]    379                                         break

[09/23/2018 07:11:12 AM]    380                                 for path_dict in A:

[09/23/2018 07:11:12 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:11:12 AM]    382                                 return discovered_paths

[09/23/2018 07:11:12 AM] 


[09/23/2018 07:11:19 AM] Filename: streamminer2.py


[09/23/2018 07:11:19 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:11:19 AM] ================================================

[09/23/2018 07:11:19 AM]    329   3386.0 MiB   3386.0 MiB   @profile

[09/23/2018 07:11:19 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:11:19 AM]    331   3386.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:11:19 AM]    332   3127.6 MiB   -258.4 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:19 AM]    333   3127.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:11:19 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:11:19 AM]    335   3127.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:11:19 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:11:19 AM]    337                                     'path': path_stack,

[09/23/2018 07:11:19 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:11:19 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:11:19 AM]    340                                 B = []

[09/23/2018 07:11:19 AM]    341                                 removed_edges = []

[09/23/2018 07:11:19 AM]    342                                 removed_nodes = []

[09/23/2018 07:11:19 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:11:19 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:11:19 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:11:19 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:11:19 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:11:19 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:11:19 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:11:19 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:11:19 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:11:19 AM]    352                                         for path_dict in A:

[09/23/2018 07:11:19 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:11:19 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:11:19 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:11:19 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:11:19 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:19 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:11:19 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:11:19 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:11:19 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:11:19 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:11:19 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:11:19 AM]    364                                                             'path': totalPath,

[09/23/2018 07:11:19 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:11:19 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:11:19 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:11:19 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:11:19 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:11:19 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:11:19 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:11:19 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:11:19 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:11:19 AM]    374                                     if len(B):

[09/23/2018 07:11:19 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:11:19 AM]    376                                         A.append(B[0])

[09/23/2018 07:11:19 AM]    377                                         B.pop(0)

[09/23/2018 07:11:19 AM]    378                                     else:

[09/23/2018 07:11:19 AM]    379                                         break

[09/23/2018 07:11:19 AM]    380                                 for path_dict in A:

[09/23/2018 07:11:19 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:11:19 AM]    382                                 return discovered_paths

[09/23/2018 07:11:19 AM] 


[09/23/2018 07:11:30 AM] Filename: streamminer2.py


[09/23/2018 07:11:30 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:11:30 AM] ================================================

[09/23/2018 07:11:30 AM]    329   3130.1 MiB   3130.1 MiB   @profile

[09/23/2018 07:11:30 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:11:30 AM]    331   3130.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:11:30 AM]    332   3035.0 MiB    -95.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:30 AM]    333   3035.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:11:30 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:11:30 AM]    335   3035.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:11:30 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:11:30 AM]    337                                     'path': path_stack,

[09/23/2018 07:11:30 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:11:30 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:11:30 AM]    340                                 B = []

[09/23/2018 07:11:30 AM]    341                                 removed_edges = []

[09/23/2018 07:11:30 AM]    342                                 removed_nodes = []

[09/23/2018 07:11:30 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:11:30 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:11:30 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:11:30 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:11:30 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:11:30 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:11:30 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:11:30 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:11:30 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:11:30 AM]    352                                         for path_dict in A:

[09/23/2018 07:11:30 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:11:30 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:11:30 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:11:30 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:11:30 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:11:30 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:11:30 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:11:30 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:11:30 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:11:30 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:11:30 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:11:30 AM]    364                                                             'path': totalPath,

[09/23/2018 07:11:30 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:11:30 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:11:30 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:11:30 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:11:30 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:11:30 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:11:30 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:11:30 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:11:30 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:11:30 AM]    374                                     if len(B):

[09/23/2018 07:11:30 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:11:30 AM]    376                                         A.append(B[0])

[09/23/2018 07:11:30 AM]    377                                         B.pop(0)

[09/23/2018 07:11:30 AM]    378                                     else:

[09/23/2018 07:11:30 AM]    379                                         break

[09/23/2018 07:11:30 AM]    380                                 for path_dict in A:

[09/23/2018 07:11:30 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:11:30 AM]    382                                 return discovered_paths

[09/23/2018 07:11:30 AM] 


[09/23/2018 07:13:24 AM] Filename: streamminer2.py


[09/23/2018 07:13:24 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:13:24 AM] ================================================

[09/23/2018 07:13:24 AM]    329   3036.8 MiB   3036.8 MiB   @profile

[09/23/2018 07:13:24 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:13:24 AM]    331   3036.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:13:24 AM]    332   3034.7 MiB     -2.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:24 AM]    333   3034.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:13:24 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:13:24 AM]    335                                     return discovered_paths

[09/23/2018 07:13:24 AM]    336   3034.8 MiB      0.1 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:13:24 AM]    337   3034.8 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:13:24 AM]    338   3034.8 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:13:24 AM]    339   3034.8 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:13:24 AM]    340   3034.8 MiB      0.0 MiB       B = []

[09/23/2018 07:13:24 AM]    341   3034.8 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:13:24 AM]    342   3034.8 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:13:24 AM]    343   3103.6 MiB    -59.9 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:13:24 AM]    344   3103.6 MiB   -600.9 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:13:24 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:13:24 AM]    346   3080.5 MiB   -541.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:13:24 AM]    347   3080.5 MiB   -541.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:13:24 AM]    348   3080.5 MiB   -541.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:13:24 AM]    349   3080.5 MiB   -541.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:13:24 AM]    350   3080.5 MiB   -540.8 MiB               removed_edges[:] = []

[09/23/2018 07:13:24 AM]    351   3080.5 MiB   -541.0 MiB               removed_nodes[:] = []

[09/23/2018 07:13:24 AM]    352   3080.5 MiB  -2224.1 MiB               for path_dict in A:

[09/23/2018 07:13:24 AM]    353   3080.5 MiB  -1683.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:13:24 AM]    354   3080.5 MiB   -740.3 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:13:24 AM]    355   3080.5 MiB  -1429.1 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:13:24 AM]    356   3080.5 MiB  -1022.6 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:13:24 AM]    357   3103.6 MiB   -472.6 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:24 AM]    358   3103.6 MiB   -541.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:13:24 AM]    359   3103.6 MiB   -294.5 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:13:24 AM]    360   3103.6 MiB   -294.5 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:13:24 AM]    361   3103.6 MiB   -294.5 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:13:24 AM]    362   3103.6 MiB   -294.5 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:13:24 AM]    363   3103.6 MiB   -294.5 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:13:24 AM]    364   3103.6 MiB   -294.5 MiB                                   'path': totalPath,

[09/23/2018 07:13:24 AM]    365   3103.6 MiB   -294.5 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:13:24 AM]    366   3103.6 MiB   -294.5 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:13:24 AM]    367   3103.6 MiB   -294.5 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:13:24 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:13:24 AM]    369   3103.6 MiB   -294.5 MiB                       B.append(potential_k)

[09/23/2018 07:13:24 AM]    370   3103.6 MiB   -541.0 MiB               removed_nodes.reverse()

[09/23/2018 07:13:24 AM]    371   3103.6 MiB   -541.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:13:24 AM]    372   3103.6 MiB   -541.0 MiB               removed_edges.reverse()

[09/23/2018 07:13:24 AM]    373   3103.6 MiB   -541.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:13:24 AM]    374   3103.6 MiB    -59.9 MiB           if len(B):

[09/23/2018 07:13:24 AM]    375   3103.6 MiB   -617.8 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:13:24 AM]    376   3103.6 MiB    -59.9 MiB               A.append(B[0])

[09/23/2018 07:13:24 AM]    377   3103.6 MiB    -59.9 MiB               B.pop(0)

[09/23/2018 07:13:24 AM]    378                                     else:

[09/23/2018 07:13:24 AM]    379                                         break

[09/23/2018 07:13:24 AM]    380   3103.6 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:13:24 AM]    381   3103.6 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:13:24 AM]    382   3103.6 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:13:24 AM] 


[09/23/2018 07:13:24 AM]  
[09/23/2018 07:13:24 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.0670245276544, Path (1):
[09/23/2018 07:13:24 AM] [890343] -189 (0.07)-> [685564]

[09/23/2018 07:13:24 AM]  
[09/23/2018 07:13:24 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.208336131551, Path (3):
[09/23/2018 07:13:24 AM] [890343] -123 (0.04)-> [3038271] -123 (0.07)-> [4479600] -189 (0.1)-> [685564]

[09/23/2018 07:13:24 AM]  
[09/23/2018 07:13:24 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.225169354063, Path (5):
[09/23/2018 07:13:24 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -601 (0.04)-> [3038271] -123 (0.06)-> [4479600] -189 (0.07)-> [685564]

[09/23/2018 07:13:24 AM]  
[09/23/2018 07:13:24 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.200927292463, Path (5):
[09/23/2018 07:13:24 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -660 (0.03)-> [662] -660 (0.05)-> [2229114] -601 (0.06)-> [685564]

[09/23/2018 07:13:24 AM]  
[09/23/2018 07:13:24 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.253899643492, Path (3):
[09/23/2018 07:13:24 AM] [890343] -123 (0.04)-> [3038271] -123 (0.05)-> [1499330] -189 (0.17)-> [685564]

[09/23/2018 07:13:29 AM] Filename: streamminer2.py


[09/23/2018 07:13:29 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:13:29 AM] ================================================

[09/23/2018 07:13:29 AM]    329   3104.5 MiB   3104.5 MiB   @profile

[09/23/2018 07:13:29 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:13:29 AM]    331   3104.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:13:29 AM]    332   3128.0 MiB     23.5 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:29 AM]    333   3128.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:13:29 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:13:29 AM]    335   3128.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:13:29 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:13:29 AM]    337                                     'path': path_stack,

[09/23/2018 07:13:29 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:13:29 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:13:29 AM]    340                                 B = []

[09/23/2018 07:13:29 AM]    341                                 removed_edges = []

[09/23/2018 07:13:29 AM]    342                                 removed_nodes = []

[09/23/2018 07:13:29 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:13:29 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:13:29 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:13:29 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:13:29 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:13:29 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:13:29 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:13:29 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:13:29 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:13:29 AM]    352                                         for path_dict in A:

[09/23/2018 07:13:29 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:13:29 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:13:29 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:13:29 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:13:29 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:29 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:13:29 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:13:29 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:13:29 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:13:29 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:13:29 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:13:29 AM]    364                                                             'path': totalPath,

[09/23/2018 07:13:29 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:13:29 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:13:29 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:13:29 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:13:29 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:13:29 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:13:29 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:13:29 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:13:29 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:13:29 AM]    374                                     if len(B):

[09/23/2018 07:13:29 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:13:29 AM]    376                                         A.append(B[0])

[09/23/2018 07:13:29 AM]    377                                         B.pop(0)

[09/23/2018 07:13:29 AM]    378                                     else:

[09/23/2018 07:13:29 AM]    379                                         break

[09/23/2018 07:13:29 AM]    380                                 for path_dict in A:

[09/23/2018 07:13:29 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:13:29 AM]    382                                 return discovered_paths

[09/23/2018 07:13:29 AM] 


[09/23/2018 07:13:42 AM] Filename: streamminer2.py


[09/23/2018 07:13:42 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:13:42 AM] ================================================

[09/23/2018 07:13:42 AM]    329   3128.0 MiB   3128.0 MiB   @profile

[09/23/2018 07:13:42 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:13:42 AM]    331   3128.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:13:42 AM]    332   3151.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:42 AM]    333   3151.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:13:42 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:13:42 AM]    335   3151.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:13:42 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:13:42 AM]    337                                     'path': path_stack,

[09/23/2018 07:13:42 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:13:42 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:13:42 AM]    340                                 B = []

[09/23/2018 07:13:42 AM]    341                                 removed_edges = []

[09/23/2018 07:13:42 AM]    342                                 removed_nodes = []

[09/23/2018 07:13:42 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:13:42 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:13:42 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:13:42 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:13:42 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:13:42 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:13:42 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:13:42 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:13:42 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:13:42 AM]    352                                         for path_dict in A:

[09/23/2018 07:13:42 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:13:42 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:13:42 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:13:42 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:13:42 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:42 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:13:42 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:13:42 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:13:42 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:13:42 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:13:42 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:13:42 AM]    364                                                             'path': totalPath,

[09/23/2018 07:13:42 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:13:42 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:13:42 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:13:42 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:13:42 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:13:42 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:13:42 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:13:42 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:13:42 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:13:42 AM]    374                                     if len(B):

[09/23/2018 07:13:42 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:13:42 AM]    376                                         A.append(B[0])

[09/23/2018 07:13:42 AM]    377                                         B.pop(0)

[09/23/2018 07:13:42 AM]    378                                     else:

[09/23/2018 07:13:42 AM]    379                                         break

[09/23/2018 07:13:42 AM]    380                                 for path_dict in A:

[09/23/2018 07:13:42 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:13:42 AM]    382                                 return discovered_paths

[09/23/2018 07:13:42 AM] 


[09/23/2018 07:13:51 AM] Filename: streamminer2.py


[09/23/2018 07:13:51 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:13:51 AM] ================================================

[09/23/2018 07:13:51 AM]    329   3151.1 MiB   3151.1 MiB   @profile

[09/23/2018 07:13:51 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:13:51 AM]    331   3151.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:13:51 AM]    332   3174.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:51 AM]    333   3174.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:13:51 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:13:51 AM]    335   3174.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:13:51 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:13:51 AM]    337                                     'path': path_stack,

[09/23/2018 07:13:51 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:13:51 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:13:51 AM]    340                                 B = []

[09/23/2018 07:13:51 AM]    341                                 removed_edges = []

[09/23/2018 07:13:51 AM]    342                                 removed_nodes = []

[09/23/2018 07:13:51 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:13:51 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:13:51 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:13:51 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:13:51 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:13:51 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:13:51 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:13:51 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:13:51 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:13:51 AM]    352                                         for path_dict in A:

[09/23/2018 07:13:51 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:13:51 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:13:51 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:13:51 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:13:51 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:13:51 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:13:51 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:13:51 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:13:51 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:13:51 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:13:51 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:13:51 AM]    364                                                             'path': totalPath,

[09/23/2018 07:13:51 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:13:51 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:13:51 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:13:51 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:13:51 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:13:51 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:13:51 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:13:51 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:13:51 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:13:51 AM]    374                                     if len(B):

[09/23/2018 07:13:51 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:13:51 AM]    376                                         A.append(B[0])

[09/23/2018 07:13:51 AM]    377                                         B.pop(0)

[09/23/2018 07:13:51 AM]    378                                     else:

[09/23/2018 07:13:51 AM]    379                                         break

[09/23/2018 07:13:51 AM]    380                                 for path_dict in A:

[09/23/2018 07:13:51 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:13:51 AM]    382                                 return discovered_paths

[09/23/2018 07:13:51 AM] 


[09/23/2018 07:15:32 AM] Filename: streamminer2.py


[09/23/2018 07:15:32 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:15:32 AM] ================================================

[09/23/2018 07:15:32 AM]    329   3174.3 MiB   3174.3 MiB   @profile

[09/23/2018 07:15:32 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:15:32 AM]    331   3174.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:15:32 AM]    332   3197.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:32 AM]    333   3197.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:15:32 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:15:32 AM]    335                                     return discovered_paths

[09/23/2018 07:15:32 AM]    336   3197.4 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:15:32 AM]    337   3197.4 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:15:32 AM]    338   3197.4 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:15:32 AM]    339   3197.4 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:15:32 AM]    340   3197.4 MiB      0.0 MiB       B = []

[09/23/2018 07:15:32 AM]    341   3197.4 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:15:32 AM]    342   3197.4 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:15:32 AM]    343   3522.4 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:15:32 AM]    344   3522.4 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:15:32 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:15:32 AM]    346   3499.3 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:15:32 AM]    347   3499.3 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:15:32 AM]    348   3499.3 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:15:32 AM]    349   3499.3 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:15:32 AM]    350   3499.3 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:15:32 AM]    351   3499.3 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:15:32 AM]    352   3499.3 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:15:32 AM]    353   3499.3 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:15:32 AM]    354   3499.3 MiB      1.1 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:15:32 AM]    355   3499.3 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:15:32 AM]    356   3499.3 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:15:32 AM]    357   3522.4 MiB    323.9 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:32 AM]    358   3522.4 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:15:32 AM]    359   3522.4 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:15:32 AM]    360   3522.4 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:15:32 AM]    361   3522.4 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:15:32 AM]    362   3522.4 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:15:32 AM]    363   3522.4 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:15:32 AM]    364   3522.4 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:15:32 AM]    365   3522.4 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:15:32 AM]    366   3522.4 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:15:32 AM]    367   3522.4 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:15:32 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:15:32 AM]    369   3522.4 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:15:32 AM]    370   3522.4 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:15:32 AM]    371   3522.4 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:15:32 AM]    372   3522.4 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:15:32 AM]    373   3522.4 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:15:32 AM]    374   3522.4 MiB      0.0 MiB           if len(B):

[09/23/2018 07:15:32 AM]    375   3522.4 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:15:32 AM]    376   3522.4 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:15:32 AM]    377   3522.4 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:15:32 AM]    378                                     else:

[09/23/2018 07:15:32 AM]    379                                         break

[09/23/2018 07:15:32 AM]    380   3522.4 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:15:32 AM]    381   3522.4 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:15:32 AM]    382   3522.4 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:15:32 AM] 


[09/23/2018 07:15:32 AM]  
[09/23/2018 07:15:32 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.0709806674345, Path (1):
[09/23/2018 07:15:32 AM] [1029025] -189 (0.07)-> [2364618]

[09/23/2018 07:15:32 AM]  
[09/23/2018 07:15:32 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.324233084967, Path (5):
[09/23/2018 07:15:32 AM] [1029025] -123 (0.03)-> [3789441] -123 (0.04)-> [2678431] -462 (0.04)-> [4755814] -462 (0.08)-> [2249904] -189 (0.13)-> [2364618]

[09/23/2018 07:15:32 AM]  
[09/23/2018 07:15:32 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.0859695116702, Path (3):
[09/23/2018 07:15:32 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [2364618]

[09/23/2018 07:15:32 AM]  
[09/23/2018 07:15:32 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.224579024521, Path (5):
[09/23/2018 07:15:32 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -601 (0.06)-> [2287973] -601 (0.08)-> [2364618]

[09/23/2018 07:15:32 AM]  
[09/23/2018 07:15:32 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.199346583418, Path (5):
[09/23/2018 07:15:32 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -660 (0.04)-> [79] -660 (0.07)-> [2364618]

[09/23/2018 07:15:43 AM] Filename: streamminer2.py


[09/23/2018 07:15:43 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:15:43 AM] ================================================

[09/23/2018 07:15:43 AM]    329   3522.4 MiB   3522.4 MiB   @profile

[09/23/2018 07:15:43 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:15:43 AM]    331   3522.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:15:43 AM]    332   3545.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:43 AM]    333   3545.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:15:43 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:15:43 AM]    335   3545.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:15:43 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:15:43 AM]    337                                     'path': path_stack,

[09/23/2018 07:15:43 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:15:43 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:15:43 AM]    340                                 B = []

[09/23/2018 07:15:43 AM]    341                                 removed_edges = []

[09/23/2018 07:15:43 AM]    342                                 removed_nodes = []

[09/23/2018 07:15:43 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:15:43 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:15:43 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:15:43 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:15:43 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:15:43 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:15:43 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:15:43 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:15:43 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:15:43 AM]    352                                         for path_dict in A:

[09/23/2018 07:15:43 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:15:43 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:15:43 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:15:43 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:15:43 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:43 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:15:43 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:15:43 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:15:43 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:15:43 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:15:43 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:15:43 AM]    364                                                             'path': totalPath,

[09/23/2018 07:15:43 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:15:43 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:15:43 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:15:43 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:15:43 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:15:43 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:15:43 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:15:43 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:15:43 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:15:43 AM]    374                                     if len(B):

[09/23/2018 07:15:43 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:15:43 AM]    376                                         A.append(B[0])

[09/23/2018 07:15:43 AM]    377                                         B.pop(0)

[09/23/2018 07:15:43 AM]    378                                     else:

[09/23/2018 07:15:43 AM]    379                                         break

[09/23/2018 07:15:43 AM]    380                                 for path_dict in A:

[09/23/2018 07:15:43 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:15:43 AM]    382                                 return discovered_paths

[09/23/2018 07:15:43 AM] 


[09/23/2018 07:15:48 AM] Filename: streamminer2.py


[09/23/2018 07:15:48 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:15:48 AM] ================================================

[09/23/2018 07:15:48 AM]    329   3545.5 MiB   3545.5 MiB   @profile

[09/23/2018 07:15:48 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:15:48 AM]    331   3545.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:15:48 AM]    332   3568.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:48 AM]    333   3568.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:15:48 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:15:48 AM]    335   3568.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:15:48 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:15:48 AM]    337                                     'path': path_stack,

[09/23/2018 07:15:48 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:15:48 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:15:48 AM]    340                                 B = []

[09/23/2018 07:15:48 AM]    341                                 removed_edges = []

[09/23/2018 07:15:48 AM]    342                                 removed_nodes = []

[09/23/2018 07:15:48 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:15:48 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:15:48 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:15:48 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:15:48 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:15:48 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:15:48 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:15:48 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:15:48 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:15:48 AM]    352                                         for path_dict in A:

[09/23/2018 07:15:48 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:15:48 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:15:48 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:15:48 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:15:48 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:48 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:15:48 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:15:48 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:15:48 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:15:48 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:15:48 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:15:48 AM]    364                                                             'path': totalPath,

[09/23/2018 07:15:48 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:15:48 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:15:48 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:15:48 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:15:48 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:15:48 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:15:48 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:15:48 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:15:48 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:15:48 AM]    374                                     if len(B):

[09/23/2018 07:15:48 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:15:48 AM]    376                                         A.append(B[0])

[09/23/2018 07:15:48 AM]    377                                         B.pop(0)

[09/23/2018 07:15:48 AM]    378                                     else:

[09/23/2018 07:15:48 AM]    379                                         break

[09/23/2018 07:15:48 AM]    380                                 for path_dict in A:

[09/23/2018 07:15:48 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:15:48 AM]    382                                 return discovered_paths

[09/23/2018 07:15:48 AM] 


[09/23/2018 07:15:57 AM] Filename: streamminer2.py


[09/23/2018 07:15:57 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:15:57 AM] ================================================

[09/23/2018 07:15:57 AM]    329   3568.6 MiB   3568.6 MiB   @profile

[09/23/2018 07:15:57 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:15:57 AM]    331   3568.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:15:57 AM]    332   3591.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:57 AM]    333   3591.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:15:57 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:15:57 AM]    335   3591.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:15:57 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:15:57 AM]    337                                     'path': path_stack,

[09/23/2018 07:15:57 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:15:57 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:15:57 AM]    340                                 B = []

[09/23/2018 07:15:57 AM]    341                                 removed_edges = []

[09/23/2018 07:15:57 AM]    342                                 removed_nodes = []

[09/23/2018 07:15:57 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:15:57 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:15:57 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:15:57 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:15:57 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:15:57 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:15:57 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:15:57 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:15:57 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:15:57 AM]    352                                         for path_dict in A:

[09/23/2018 07:15:57 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:15:57 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:15:57 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:15:57 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:15:57 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:15:57 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:15:57 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:15:57 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:15:57 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:15:57 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:15:57 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:15:57 AM]    364                                                             'path': totalPath,

[09/23/2018 07:15:57 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:15:57 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:15:57 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:15:57 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:15:57 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:15:57 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:15:57 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:15:57 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:15:57 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:15:57 AM]    374                                     if len(B):

[09/23/2018 07:15:57 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:15:57 AM]    376                                         A.append(B[0])

[09/23/2018 07:15:57 AM]    377                                         B.pop(0)

[09/23/2018 07:15:57 AM]    378                                     else:

[09/23/2018 07:15:57 AM]    379                                         break

[09/23/2018 07:15:57 AM]    380                                 for path_dict in A:

[09/23/2018 07:15:57 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:15:57 AM]    382                                 return discovered_paths

[09/23/2018 07:15:57 AM] 


[09/23/2018 07:17:03 AM] Filename: streamminer2.py


[09/23/2018 07:17:03 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:17:03 AM] ================================================

[09/23/2018 07:17:03 AM]    329   3591.8 MiB   3591.8 MiB   @profile

[09/23/2018 07:17:03 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:17:03 AM]    331   3591.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:17:03 AM]    332   3614.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:03 AM]    333   3614.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:17:03 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:17:03 AM]    335                                     return discovered_paths

[09/23/2018 07:17:03 AM]    336   3614.9 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:17:03 AM]    337   3614.9 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:17:03 AM]    338   3614.9 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:17:03 AM]    339   3614.9 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:17:03 AM]    340   3614.9 MiB      0.0 MiB       B = []

[09/23/2018 07:17:03 AM]    341   3614.9 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:17:03 AM]    342   3614.9 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:17:03 AM]    343   4124.1 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:17:03 AM]    344   4124.1 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:17:03 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:17:03 AM]    346   4101.0 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:17:03 AM]    347   4101.0 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:17:03 AM]    348   4101.0 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:17:03 AM]    349   4101.0 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:17:03 AM]    350   4101.0 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:17:03 AM]    351   4101.0 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:17:03 AM]    352   4101.0 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:17:03 AM]    353   4101.0 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:17:03 AM]    354   4101.0 MiB      0.4 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:17:03 AM]    355   4101.0 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:17:03 AM]    356   4101.0 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:17:03 AM]    357   4124.1 MiB    508.8 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:03 AM]    358   4124.1 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:17:03 AM]    359   4124.1 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:17:03 AM]    360   4124.1 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:17:03 AM]    361   4124.1 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:17:03 AM]    362   4124.1 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:17:03 AM]    363   4124.1 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:17:03 AM]    364   4124.1 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:17:03 AM]    365   4124.1 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:17:03 AM]    366   4124.1 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:17:03 AM]    367   4124.1 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:17:03 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:17:03 AM]    369   4124.1 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:17:03 AM]    370   4124.1 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:17:03 AM]    371   4124.1 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:17:03 AM]    372   4124.1 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:17:03 AM]    373   4124.1 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:17:03 AM]    374   4124.1 MiB      0.0 MiB           if len(B):

[09/23/2018 07:17:03 AM]    375   4124.1 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:17:03 AM]    376   4124.1 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:17:03 AM]    377   4124.1 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:17:03 AM]    378                                     else:

[09/23/2018 07:17:03 AM]    379                                         break

[09/23/2018 07:17:03 AM]    380   4124.1 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:17:03 AM]    381   4124.1 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:17:03 AM]    382   4124.1 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:17:03 AM] 


[09/23/2018 07:17:03 AM]  
[09/23/2018 07:17:03 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.0732918175248, Path (1):
[09/23/2018 07:17:03 AM] [1397869] -189 (0.07)-> [5305646]

[09/23/2018 07:17:03 AM]  
[09/23/2018 07:17:03 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.302960177346, Path (5):
[09/23/2018 07:17:03 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -189 (0.18)-> [5305646]

[09/23/2018 07:17:03 AM]  
[09/23/2018 07:17:03 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.302236904099, Path (7):
[09/23/2018 07:17:03 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -189 (0.09)-> [5305646]

[09/23/2018 07:17:03 AM]  
[09/23/2018 07:17:03 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.402103069783, Path (9):
[09/23/2018 07:17:03 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -462 (0.04)-> [4704367] -462 (0.07)-> [2619928] -189 (0.08)-> [5305646]

[09/23/2018 07:17:03 AM]  
[09/23/2018 07:17:03 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.398263975535, Path (9):
[09/23/2018 07:17:03 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -329 (0.04)-> [3740468] -329 (0.06)-> [4243536] -121 (0.08)-> [5305646]

[09/23/2018 07:17:08 AM] Filename: streamminer2.py


[09/23/2018 07:17:08 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:17:08 AM] ================================================

[09/23/2018 07:17:08 AM]    329   4124.1 MiB   4124.1 MiB   @profile

[09/23/2018 07:17:08 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:17:08 AM]    331   4124.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:17:08 AM]    332   4147.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:08 AM]    333   4147.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:17:08 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:17:08 AM]    335   4147.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:17:08 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:17:08 AM]    337                                     'path': path_stack,

[09/23/2018 07:17:08 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:17:08 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:17:08 AM]    340                                 B = []

[09/23/2018 07:17:08 AM]    341                                 removed_edges = []

[09/23/2018 07:17:08 AM]    342                                 removed_nodes = []

[09/23/2018 07:17:08 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:17:08 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:17:08 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:17:08 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:17:08 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:17:08 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:17:08 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:17:08 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:17:08 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:17:08 AM]    352                                         for path_dict in A:

[09/23/2018 07:17:08 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:17:08 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:17:08 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:17:08 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:17:08 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:08 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:17:08 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:17:08 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:17:08 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:17:08 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:17:08 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:17:08 AM]    364                                                             'path': totalPath,

[09/23/2018 07:17:08 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:17:08 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:17:08 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:17:08 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:17:08 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:17:08 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:17:08 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:17:08 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:17:08 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:17:08 AM]    374                                     if len(B):

[09/23/2018 07:17:08 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:17:08 AM]    376                                         A.append(B[0])

[09/23/2018 07:17:08 AM]    377                                         B.pop(0)

[09/23/2018 07:17:08 AM]    378                                     else:

[09/23/2018 07:17:08 AM]    379                                         break

[09/23/2018 07:17:08 AM]    380                                 for path_dict in A:

[09/23/2018 07:17:08 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:17:08 AM]    382                                 return discovered_paths

[09/23/2018 07:17:08 AM] 


[09/23/2018 07:17:15 AM] Filename: streamminer2.py


[09/23/2018 07:17:15 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:17:15 AM] ================================================

[09/23/2018 07:17:15 AM]    329   4147.3 MiB   4147.3 MiB   @profile

[09/23/2018 07:17:15 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:17:15 AM]    331   4147.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:17:15 AM]    332   4170.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:15 AM]    333   4170.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:17:15 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:17:15 AM]    335   4170.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:17:15 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:17:15 AM]    337                                     'path': path_stack,

[09/23/2018 07:17:15 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:17:15 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:17:15 AM]    340                                 B = []

[09/23/2018 07:17:15 AM]    341                                 removed_edges = []

[09/23/2018 07:17:15 AM]    342                                 removed_nodes = []

[09/23/2018 07:17:15 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:17:15 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:17:15 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:17:15 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:17:15 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:17:15 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:17:15 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:17:15 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:17:15 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:17:15 AM]    352                                         for path_dict in A:

[09/23/2018 07:17:15 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:17:15 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:17:15 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:17:15 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:17:15 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:15 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:17:15 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:17:15 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:17:15 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:17:15 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:17:15 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:17:15 AM]    364                                                             'path': totalPath,

[09/23/2018 07:17:15 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:17:15 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:17:15 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:17:15 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:17:15 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:17:15 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:17:15 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:17:15 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:17:15 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:17:15 AM]    374                                     if len(B):

[09/23/2018 07:17:15 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:17:15 AM]    376                                         A.append(B[0])

[09/23/2018 07:17:15 AM]    377                                         B.pop(0)

[09/23/2018 07:17:15 AM]    378                                     else:

[09/23/2018 07:17:15 AM]    379                                         break

[09/23/2018 07:17:15 AM]    380                                 for path_dict in A:

[09/23/2018 07:17:15 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:17:15 AM]    382                                 return discovered_paths

[09/23/2018 07:17:15 AM] 


[09/23/2018 07:17:20 AM] Filename: streamminer2.py


[09/23/2018 07:17:20 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:17:20 AM] ================================================

[09/23/2018 07:17:20 AM]    329   4170.4 MiB   4170.4 MiB   @profile

[09/23/2018 07:17:20 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:17:20 AM]    331   4170.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:17:20 AM]    332   4193.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:20 AM]    333   4193.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:17:20 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:17:20 AM]    335   4193.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:17:20 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:17:20 AM]    337                                     'path': path_stack,

[09/23/2018 07:17:20 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:17:20 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:17:20 AM]    340                                 B = []

[09/23/2018 07:17:20 AM]    341                                 removed_edges = []

[09/23/2018 07:17:20 AM]    342                                 removed_nodes = []

[09/23/2018 07:17:20 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:17:20 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:17:20 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:17:20 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:17:20 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:17:20 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:17:20 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:17:20 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:17:20 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:17:20 AM]    352                                         for path_dict in A:

[09/23/2018 07:17:20 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:17:20 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:17:20 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:17:20 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:17:20 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:17:20 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:17:20 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:17:20 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:17:20 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:17:20 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:17:20 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:17:20 AM]    364                                                             'path': totalPath,

[09/23/2018 07:17:20 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:17:20 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:17:20 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:17:20 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:17:20 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:17:20 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:17:20 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:17:20 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:17:20 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:17:20 AM]    374                                     if len(B):

[09/23/2018 07:17:20 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:17:20 AM]    376                                         A.append(B[0])

[09/23/2018 07:17:20 AM]    377                                         B.pop(0)

[09/23/2018 07:17:20 AM]    378                                     else:

[09/23/2018 07:17:20 AM]    379                                         break

[09/23/2018 07:17:20 AM]    380                                 for path_dict in A:

[09/23/2018 07:17:20 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:17:20 AM]    382                                 return discovered_paths

[09/23/2018 07:17:20 AM] 


[09/23/2018 07:20:13 AM] Filename: streamminer2.py


[09/23/2018 07:20:13 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:20:13 AM] ================================================

[09/23/2018 07:20:13 AM]    329   4193.5 MiB   4193.5 MiB   @profile

[09/23/2018 07:20:13 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:20:13 AM]    331   4193.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:20:13 AM]    332   4216.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:13 AM]    333   4216.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:20:13 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:20:13 AM]    335                                     return discovered_paths

[09/23/2018 07:20:13 AM]    336   4216.6 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:20:13 AM]    337   4216.6 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:20:13 AM]    338   4216.6 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:20:13 AM]    339   4216.6 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:20:13 AM]    340   4216.6 MiB      0.0 MiB       B = []

[09/23/2018 07:20:13 AM]    341   4216.6 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:20:13 AM]    342   4216.6 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:20:13 AM]    343   4725.5 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:20:13 AM]    344   4725.5 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:20:13 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:20:13 AM]    346   4702.3 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:20:13 AM]    347   4702.3 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:20:13 AM]    348   4702.3 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:20:13 AM]    349   4702.3 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:20:13 AM]    350   4702.3 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:20:13 AM]    351   4702.3 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:20:13 AM]    352   4702.3 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:20:13 AM]    353   4702.3 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:20:13 AM]    354   4702.3 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:20:13 AM]    355   4702.3 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:20:13 AM]    356   4702.3 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:20:13 AM]    357   4725.5 MiB    508.8 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:13 AM]    358   4725.5 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:20:13 AM]    359   4725.5 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:20:13 AM]    360   4725.5 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:20:13 AM]    361   4725.5 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:20:13 AM]    362   4725.5 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:20:13 AM]    363   4725.5 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:20:13 AM]    364   4725.5 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:20:13 AM]    365   4725.5 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:20:13 AM]    366   4725.5 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:20:13 AM]    367   4725.5 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:20:13 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:20:13 AM]    369   4725.5 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:20:13 AM]    370   4725.5 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:20:13 AM]    371   4725.5 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:20:13 AM]    372   4725.5 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:20:13 AM]    373   4725.5 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:20:13 AM]    374   4725.5 MiB      0.0 MiB           if len(B):

[09/23/2018 07:20:13 AM]    375   4725.5 MiB      0.0 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:20:13 AM]    376   4725.5 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:20:13 AM]    377   4725.5 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:20:13 AM]    378                                     else:

[09/23/2018 07:20:13 AM]    379                                         break

[09/23/2018 07:20:13 AM]    380   4725.5 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:20:13 AM]    381   4725.5 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:20:13 AM]    382   4725.5 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:20:13 AM] 


[09/23/2018 07:20:13 AM]  
[09/23/2018 07:20:13 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.3767466941, Path (5):
[09/23/2018 07:20:13 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -329 (0.05)-> [3148940] -329 (0.09)-> [5651172] -189 (0.18)-> [4567127]

[09/23/2018 07:20:13 AM]  
[09/23/2018 07:20:13 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.235878581379, Path (5):
[09/23/2018 07:20:13 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.04)-> [3640344] -65 (0.06)-> [5492355] -189 (0.09)-> [4567127]

[09/23/2018 07:20:13 AM]  
[09/23/2018 07:20:13 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.192672051272, Path (5):
[09/23/2018 07:20:13 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -189 (0.06)-> [4567127]

[09/23/2018 07:20:13 AM]  
[09/23/2018 07:20:13 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.258765654105, Path (7):
[09/23/2018 07:20:13 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -65 (0.03)-> [917573] -65 (0.05)-> [1059235] -189 (0.06)-> [4567127]

[09/23/2018 07:20:13 AM]  
[09/23/2018 07:20:13 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.289525100991, Path (7):
[09/23/2018 07:20:13 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -65 (0.02)-> [1354392] -65 (0.03)-> [678457] -189 (0.04)-> [4567129] -601 (0.06)-> [290262] -601 (0.08)-> [4567127]

[09/23/2018 07:20:20 AM] Filename: streamminer2.py


[09/23/2018 07:20:20 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:20:20 AM] ================================================

[09/23/2018 07:20:20 AM]    329   4725.5 MiB   4725.5 MiB   @profile

[09/23/2018 07:20:20 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:20:20 AM]    331   4725.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:20:20 AM]    332   4748.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:20 AM]    333   4748.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:20:20 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:20:20 AM]    335   4748.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:20:20 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:20:20 AM]    337                                     'path': path_stack,

[09/23/2018 07:20:20 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:20:20 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:20:20 AM]    340                                 B = []

[09/23/2018 07:20:20 AM]    341                                 removed_edges = []

[09/23/2018 07:20:20 AM]    342                                 removed_nodes = []

[09/23/2018 07:20:20 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:20:20 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:20:20 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:20:20 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:20:20 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:20:20 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:20:20 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:20:20 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:20:20 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:20:20 AM]    352                                         for path_dict in A:

[09/23/2018 07:20:20 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:20:20 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:20:20 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:20:20 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:20:20 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:20 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:20:20 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:20:20 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:20:20 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:20:20 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:20:20 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:20:20 AM]    364                                                             'path': totalPath,

[09/23/2018 07:20:20 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:20:20 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:20:20 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:20:20 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:20:20 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:20:20 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:20:20 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:20:20 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:20:20 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:20:20 AM]    374                                     if len(B):

[09/23/2018 07:20:20 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:20:20 AM]    376                                         A.append(B[0])

[09/23/2018 07:20:20 AM]    377                                         B.pop(0)

[09/23/2018 07:20:20 AM]    378                                     else:

[09/23/2018 07:20:20 AM]    379                                         break

[09/23/2018 07:20:20 AM]    380                                 for path_dict in A:

[09/23/2018 07:20:20 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:20:20 AM]    382                                 return discovered_paths

[09/23/2018 07:20:20 AM] 


[09/23/2018 07:20:32 AM] Filename: streamminer2.py


[09/23/2018 07:20:32 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:20:32 AM] ================================================

[09/23/2018 07:20:32 AM]    329   4748.6 MiB   4748.6 MiB   @profile

[09/23/2018 07:20:32 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:20:32 AM]    331   4748.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:20:32 AM]    332   4760.8 MiB     12.2 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:32 AM]    333   4760.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:20:32 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:20:32 AM]    335   4760.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:20:32 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:20:32 AM]    337                                     'path': path_stack,

[09/23/2018 07:20:32 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:20:32 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:20:32 AM]    340                                 B = []

[09/23/2018 07:20:32 AM]    341                                 removed_edges = []

[09/23/2018 07:20:32 AM]    342                                 removed_nodes = []

[09/23/2018 07:20:32 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:20:32 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:20:32 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:20:32 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:20:32 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:20:32 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:20:32 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:20:32 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:20:32 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:20:32 AM]    352                                         for path_dict in A:

[09/23/2018 07:20:32 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:20:32 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:20:32 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:20:32 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:20:32 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:32 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:20:32 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:20:32 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:20:32 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:20:32 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:20:32 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:20:32 AM]    364                                                             'path': totalPath,

[09/23/2018 07:20:32 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:20:32 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:20:32 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:20:32 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:20:32 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:20:32 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:20:32 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:20:32 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:20:32 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:20:32 AM]    374                                     if len(B):

[09/23/2018 07:20:32 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:20:32 AM]    376                                         A.append(B[0])

[09/23/2018 07:20:32 AM]    377                                         B.pop(0)

[09/23/2018 07:20:32 AM]    378                                     else:

[09/23/2018 07:20:32 AM]    379                                         break

[09/23/2018 07:20:32 AM]    380                                 for path_dict in A:

[09/23/2018 07:20:32 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:20:32 AM]    382                                 return discovered_paths

[09/23/2018 07:20:32 AM] 


[09/23/2018 07:20:37 AM] Filename: streamminer2.py


[09/23/2018 07:20:37 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:20:37 AM] ================================================

[09/23/2018 07:20:37 AM]    329   4760.8 MiB   4760.8 MiB   @profile

[09/23/2018 07:20:37 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:20:37 AM]    331   4760.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:20:37 AM]    332   4783.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:37 AM]    333   4783.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:20:37 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:20:37 AM]    335   4783.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:20:37 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:20:37 AM]    337                                     'path': path_stack,

[09/23/2018 07:20:37 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:20:37 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:20:37 AM]    340                                 B = []

[09/23/2018 07:20:37 AM]    341                                 removed_edges = []

[09/23/2018 07:20:37 AM]    342                                 removed_nodes = []

[09/23/2018 07:20:37 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:20:37 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:20:37 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:20:37 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:20:37 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:20:37 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:20:37 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:20:37 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:20:37 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:20:37 AM]    352                                         for path_dict in A:

[09/23/2018 07:20:37 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:20:37 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:20:37 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:20:37 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:20:37 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:20:37 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:20:37 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:20:37 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:20:37 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:20:37 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:20:37 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:20:37 AM]    364                                                             'path': totalPath,

[09/23/2018 07:20:37 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:20:37 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:20:37 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:20:37 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:20:37 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:20:37 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:20:37 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:20:37 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:20:37 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:20:37 AM]    374                                     if len(B):

[09/23/2018 07:20:37 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:20:37 AM]    376                                         A.append(B[0])

[09/23/2018 07:20:37 AM]    377                                         B.pop(0)

[09/23/2018 07:20:37 AM]    378                                     else:

[09/23/2018 07:20:37 AM]    379                                         break

[09/23/2018 07:20:37 AM]    380                                 for path_dict in A:

[09/23/2018 07:20:37 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:20:37 AM]    382                                 return discovered_paths

[09/23/2018 07:20:37 AM] 


[09/23/2018 07:22:07 AM] Filename: streamminer2.py


[09/23/2018 07:22:07 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:22:07 AM] ================================================

[09/23/2018 07:22:07 AM]    329   4783.9 MiB   4783.9 MiB   @profile

[09/23/2018 07:22:07 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:22:07 AM]    331   4783.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:22:07 AM]    332   4807.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:22:07 AM]    333   4807.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:22:07 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:22:07 AM]    335                                     return discovered_paths

[09/23/2018 07:22:07 AM]    336   4807.0 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:22:07 AM]    337   4807.0 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:22:07 AM]    338   4807.0 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:22:07 AM]    339   4807.0 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:22:07 AM]    340   4807.0 MiB      0.0 MiB       B = []

[09/23/2018 07:22:07 AM]    341   4807.0 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:22:07 AM]    342   4807.0 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:22:07 AM]    343   4945.8 MiB   -269.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:22:07 AM]    344   4945.8 MiB   -992.9 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:22:07 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:22:07 AM]    346   4945.8 MiB   -723.9 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:22:07 AM]    347   4945.8 MiB   -723.9 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:22:07 AM]    348   4945.8 MiB   -723.9 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:22:07 AM]    349   4945.8 MiB   -723.9 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:22:07 AM]    350   4945.8 MiB   -723.9 MiB               removed_edges[:] = []

[09/23/2018 07:22:07 AM]    351   4945.8 MiB   -723.9 MiB               removed_nodes[:] = []

[09/23/2018 07:22:07 AM]    352   4945.8 MiB  -3327.7 MiB               for path_dict in A:

[09/23/2018 07:22:07 AM]    353   4945.8 MiB  -2603.9 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:22:07 AM]    354   4945.8 MiB  -1471.7 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:22:07 AM]    355   4945.8 MiB  -1448.6 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:22:07 AM]    356   4922.7 MiB   -863.4 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:22:07 AM]    357   4945.8 MiB   -690.6 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:22:07 AM]    358   4945.8 MiB   -829.4 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:22:07 AM]    359   4945.8 MiB   -269.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:22:07 AM]    360   4945.8 MiB   -269.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:22:07 AM]    361   4945.8 MiB   -269.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:22:07 AM]    362   4945.8 MiB   -269.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:22:07 AM]    363   4945.8 MiB   -269.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:22:07 AM]    364   4945.8 MiB   -269.0 MiB                                   'path': totalPath,

[09/23/2018 07:22:07 AM]    365   4945.8 MiB   -269.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:22:07 AM]    366   4945.8 MiB   -269.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:22:07 AM]    367   4945.8 MiB   -269.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:22:07 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:22:07 AM]    369   4945.8 MiB   -269.0 MiB                       B.append(potential_k)

[09/23/2018 07:22:07 AM]    370   4945.8 MiB   -829.4 MiB               removed_nodes.reverse()

[09/23/2018 07:22:07 AM]    371   4945.8 MiB   -829.4 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:22:07 AM]    372   4945.8 MiB   -829.4 MiB               removed_edges.reverse()

[09/23/2018 07:22:07 AM]    373   4945.8 MiB   -829.4 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:22:07 AM]    374   4945.8 MiB   -269.0 MiB           if len(B):

[09/23/2018 07:22:07 AM]    375   4945.8 MiB  -2421.4 MiB               B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:22:07 AM]    376   4945.8 MiB   -269.0 MiB               A.append(B[0])

[09/23/2018 07:22:07 AM]    377   4945.8 MiB   -269.0 MiB               B.pop(0)

[09/23/2018 07:22:07 AM]    378                                     else:

[09/23/2018 07:22:07 AM]    379                                         break

[09/23/2018 07:22:07 AM]    380   4840.3 MiB   -105.5 MiB       for path_dict in A:

[09/23/2018 07:22:07 AM]    381   4840.3 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:22:07 AM]    382   4840.3 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:22:07 AM] 


[09/23/2018 07:22:07 AM]  
[09/23/2018 07:22:07 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.17915544258, Path (3):
[09/23/2018 07:22:07 AM] [1522148] -329 (0.04)-> [3740468] -329 (0.06)-> [4368651] -121 (0.08)-> [1357357]

[09/23/2018 07:22:07 AM]  
[09/23/2018 07:22:07 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.15147173385, Path (3):
[09/23/2018 07:22:07 AM] [1522148] -189 (0.03)-> [3584723] -121 (0.05)-> [2594378] -189 (0.07)-> [1357357]

[09/23/2018 07:22:07 AM]  
[09/23/2018 07:22:07 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.14092926234, Path (3):
[09/23/2018 07:22:07 AM] [1522148] -189 (0.03)-> [3584723] -660 (0.04)-> [79] -660 (0.07)-> [1357357]

[09/23/2018 07:22:07 AM]  
[09/23/2018 07:22:07 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.282334153748, Path (3):
[09/23/2018 07:22:07 AM] [1522148] -329 (0.04)-> [3740468] -329 (0.06)-> [2834442] -189 (0.19)-> [1357357]

[09/23/2018 07:22:07 AM]  
[09/23/2018 07:22:07 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.298489117074, Path (5):
[09/23/2018 07:22:07 AM] [1522148] -189 (0.03)-> [3584723] -121 (0.05)-> [2594378] -462 (0.04)-> [2269316] -462 (0.07)-> [4368651] -121 (0.1)-> [1357357]

[09/23/2018 07:22:24 AM] Filename: streamminer2.py


[09/23/2018 07:22:24 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:22:24 AM] ================================================

[09/23/2018 07:22:24 AM]    329   4840.3 MiB   4840.3 MiB   @profile

[09/23/2018 07:22:24 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:22:24 AM]    331   4840.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:22:24 AM]    332   3040.6 MiB  -1799.7 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:22:24 AM]    333   3041.2 MiB      0.6 MiB       if rel_stack == [-1]:

[09/23/2018 07:22:24 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:22:24 AM]    335   3041.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:22:24 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:22:24 AM]    337                                     'path': path_stack,

[09/23/2018 07:22:24 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:22:24 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:22:24 AM]    340                                 B = []

[09/23/2018 07:22:24 AM]    341                                 removed_edges = []

[09/23/2018 07:22:24 AM]    342                                 removed_nodes = []

[09/23/2018 07:22:24 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:22:24 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:22:24 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:22:24 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:22:24 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:22:24 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:22:24 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:22:24 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:22:24 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:22:24 AM]    352                                         for path_dict in A:

[09/23/2018 07:22:24 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:22:24 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:22:24 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:22:24 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:22:24 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:22:24 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:22:24 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:22:24 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:22:24 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:22:24 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:22:24 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:22:24 AM]    364                                                             'path': totalPath,

[09/23/2018 07:22:24 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:22:24 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:22:24 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:22:24 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:22:24 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:22:24 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:22:24 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:22:24 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:22:24 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:22:24 AM]    374                                     if len(B):

[09/23/2018 07:22:24 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:22:24 AM]    376                                         A.append(B[0])

[09/23/2018 07:22:24 AM]    377                                         B.pop(0)

[09/23/2018 07:22:24 AM]    378                                     else:

[09/23/2018 07:22:24 AM]    379                                         break

[09/23/2018 07:22:24 AM]    380                                 for path_dict in A:

[09/23/2018 07:22:24 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:22:24 AM]    382                                 return discovered_paths

[09/23/2018 07:22:24 AM] 


[09/23/2018 07:22:39 AM] Filename: streamminer2.py


[09/23/2018 07:22:39 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:22:39 AM] ================================================

[09/23/2018 07:22:39 AM]    329   3045.5 MiB   3045.5 MiB   @profile

[09/23/2018 07:22:39 AM]    330                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:22:39 AM]    331   3045.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:22:39 AM]    332   2791.4 MiB   -254.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:22:39 AM]    333   2791.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:22:39 AM]    334                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:22:39 AM]    335   2791.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:22:39 AM]    336                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:22:39 AM]    337                                     'path': path_stack,

[09/23/2018 07:22:39 AM]    338                                     'path_rel': rel_stack,

[09/23/2018 07:22:39 AM]    339                                     'path_weights': weight_stack}]

[09/23/2018 07:22:39 AM]    340                                 B = []

[09/23/2018 07:22:39 AM]    341                                 removed_edges = []

[09/23/2018 07:22:39 AM]    342                                 removed_nodes = []

[09/23/2018 07:22:39 AM]    343                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:22:39 AM]    344                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:22:39 AM]    345                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:22:39 AM]    346                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:22:39 AM]    347                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:22:39 AM]    348                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:22:39 AM]    349                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:22:39 AM]    350                                         removed_edges[:] = []

[09/23/2018 07:22:39 AM]    351                                         removed_nodes[:] = []

[09/23/2018 07:22:39 AM]    352                                         for path_dict in A:

[09/23/2018 07:22:39 AM]    353                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:22:39 AM]    354                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:22:39 AM]    355                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:22:39 AM]    356                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:22:39 AM]    357                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:22:39 AM]    358                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:22:39 AM]    359                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:22:39 AM]    360                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:22:39 AM]    361                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:22:39 AM]    362                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:22:39 AM]    363                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:22:39 AM]    364                                                             'path': totalPath,

[09/23/2018 07:22:39 AM]    365                                                             'path_rel': totalPathRel,

[09/23/2018 07:22:39 AM]    366                                                             'path_weights': totalWeights}

[09/23/2018 07:22:39 AM]    367                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:22:39 AM]    368                                                 # removes repititive paths in A & B

[09/23/2018 07:22:39 AM]    369                                                 B.append(potential_k)

[09/23/2018 07:22:39 AM]    370                                         removed_nodes.reverse()

[09/23/2018 07:22:39 AM]    371                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:22:39 AM]    372                                         removed_edges.reverse()

[09/23/2018 07:22:39 AM]    373                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:22:39 AM]    374                                     if len(B):

[09/23/2018 07:22:39 AM]    375                                         B = sorted(B, key=lambda k: k['path_total_cost'])

[09/23/2018 07:22:39 AM]    376                                         A.append(B[0])

[09/23/2018 07:22:39 AM]    377                                         B.pop(0)

[09/23/2018 07:22:39 AM]    378                                     else:

[09/23/2018 07:22:39 AM]    379                                         break

[09/23/2018 07:22:39 AM]    380                                 for path_dict in A:

[09/23/2018 07:22:39 AM]    381                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:22:39 AM]    382                                 return discovered_paths

[09/23/2018 07:22:39 AM] 


[09/23/2018 07:22:39 AM] Filename: streamminer2.py


[09/23/2018 07:22:39 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:22:39 AM] ================================================

[09/23/2018 07:22:39 AM]    294   1941.5 MiB   1941.5 MiB   @profile

[09/23/2018 07:22:39 AM]    295                             def extract_paths_sm(Gv, Gr, triples, y, features=None):

[09/23/2018 07:22:39 AM]    296   1941.5 MiB      0.0 MiB       return_features = False

[09/23/2018 07:22:39 AM]    297   1941.5 MiB      0.0 MiB       if features is None:

[09/23/2018 07:22:39 AM]    298   1941.5 MiB      0.0 MiB           return_features = True

[09/23/2018 07:22:39 AM]    299   1941.5 MiB      0.0 MiB           features, pos_features, neg_features = set(), set(), set()

[09/23/2018 07:22:39 AM]    300   1941.5 MiB      0.0 MiB       measurements = []

[09/23/2018 07:22:39 AM]    301                             

[09/23/2018 07:22:39 AM]    302   4840.3 MiB -10919.0 MiB       for idx, triple in enumerate(tqdm(triples)):

[09/23/2018 07:22:39 AM]    303   4840.3 MiB  -8872.2 MiB           sid, pid, oid = triple['sid'], triple['pid'], triple['oid']

[09/23/2018 07:22:39 AM]    304   4840.3 MiB  -8869.2 MiB           label = y[idx]

[09/23/2018 07:22:39 AM]    305   4840.3 MiB  -8868.3 MiB           triple_feature = dict()

[09/23/2018 07:22:39 AM]    306   4840.3 MiB  -8022.0 MiB           discovered_paths = yenKSP5(Gv, Gr, sid, pid, oid, K = 5)

[09/23/2018 07:22:39 AM]    307   4840.3 MiB -17253.2 MiB           for path in discovered_paths:

[09/23/2018 07:22:39 AM]    308   4840.3 MiB  -6332.6 MiB               log.info("{}\n".format(path))

[09/23/2018 07:22:39 AM]    309   4840.3 MiB  -6332.6 MiB               ff = tuple(path.relational_path)

[09/23/2018 07:22:39 AM]    310   4840.3 MiB  -6332.6 MiB               if ff not in features:

[09/23/2018 07:22:39 AM]    311   4840.3 MiB  -3381.2 MiB                   features.add(ff)

[09/23/2018 07:22:39 AM]    312   4840.3 MiB  -3381.2 MiB                   if label == 1:

[09/23/2018 07:22:39 AM]    313   4840.3 MiB  -3381.2 MiB                       pos_features.add(ff)

[09/23/2018 07:22:39 AM]    314                                             elif label == 0:

[09/23/2018 07:22:39 AM]    315                                                 neg_features.add(ff)

[09/23/2018 07:22:39 AM]    316                                             else:

[09/23/2018 07:22:39 AM]    317                                                 raise Exception("Unknown class label: {}".format(label))

[09/23/2018 07:22:39 AM]    318   4840.3 MiB  -6332.6 MiB               triple_feature[ff] = triple_feature.get(ff, 0) + 1

[09/23/2018 07:22:39 AM]    319   4840.3 MiB -10920.3 MiB           measurements.append(triple_feature)

[09/23/2018 07:22:39 AM]    320   2793.5 MiB  -2046.8 MiB       if return_features:

[09/23/2018 07:22:39 AM]    321   2793.5 MiB      0.0 MiB           return features, pos_features, neg_features, measurements

[09/23/2018 07:22:39 AM]    322                                 return measurements

[09/23/2018 07:22:39 AM] 


[09/23/2018 07:22:39 AM] P: +:34, -:0, unique tot:34
[09/23/2018 07:22:40 AM] Time taken: 1186.18s


[09/23/2018 07:22:40 AM] => Path selection..
[09/23/2018 07:22:40 AM] D: +:34, -:0, tot:34
[09/23/2018 07:22:40 AM] Time taken: 0.20s

[09/23/2018 07:22:40 AM] => Model building..
[09/23/2018 07:22:43 AM] #Features: 34, best-AUROC: 0.89744
[09/23/2018 07:22:43 AM] Time taken: 3.13s

[09/23/2018 07:22:43 AM] Filename: streamminer2.py


[09/23/2018 07:22:43 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:22:43 AM] ================================================

[09/23/2018 07:22:43 AM]    141    935.5 MiB    935.5 MiB   @profile

[09/23/2018 07:22:43 AM]    142                             def train_model_sm(G, triples, relsim, use_interpretable_features=False, cv=10):

[09/23/2018 07:22:43 AM]    143                                 """

[09/23/2018 07:22:43 AM]    144                                 Entry point for building a fact-checking classifier.

[09/23/2018 07:22:43 AM]    145                                 Performs three steps:

[09/23/2018 07:22:43 AM]    146                                 1. Path extraction (features)

[09/23/2018 07:22:43 AM]    147                                 2a. Path selection using information gain

[09/23/2018 07:22:43 AM]    148                                 2b. Filtering most informative discriminative predicate paths

[09/23/2018 07:22:43 AM]    149                                 3. Building logistic regression model

[09/23/2018 07:22:43 AM]    150                             

[09/23/2018 07:22:43 AM]    151                                 Parameters:

[09/23/2018 07:22:43 AM]    152                                 -----------

[09/23/2018 07:22:43 AM]    153                                 G: rgraph

[09/23/2018 07:22:43 AM]    154                                     Knowledge graph.

[09/23/2018 07:22:43 AM]    155                                 triples: dataframe

[09/23/2018 07:22:43 AM]    156                                     A data frame consisting of at least four columns, including

[09/23/2018 07:22:43 AM]    157                                     sid, pid, oid, class.

[09/23/2018 07:22:43 AM]    158                                 use_interpretable_features: bool

[09/23/2018 07:22:43 AM]    159                                     Whether or not to perform 2b.

[09/23/2018 07:22:43 AM]    160                                 cv: int

[09/23/2018 07:22:43 AM]    161                                     Number of cross-validation folds.

[09/23/2018 07:22:43 AM]    162                             

[09/23/2018 07:22:43 AM]    163                                 Returns:

[09/23/2018 07:22:43 AM]    164                                 --------

[09/23/2018 07:22:43 AM]    165                                 vec: DictVectorizer

[09/23/2018 07:22:43 AM]    166                                     Useful for preprocessing future triples.

[09/23/2018 07:22:43 AM]    167                                 model: dict

[09/23/2018 07:22:43 AM]    168                                     A dictionary containing 'clf' as the built model,

[09/23/2018 07:22:43 AM]    169                                     and two other key-value pairs, including best parameter

[09/23/2018 07:22:43 AM]    170                                     and best AUROC score.

[09/23/2018 07:22:43 AM]    171                                 """

[09/23/2018 07:22:43 AM]    172    935.5 MiB      0.0 MiB       y = triples['class'] # ground truth

[09/23/2018 07:22:43 AM]    173    935.5 MiB      0.0 MiB       triples = triples[['sid', 'pid', 'oid']].to_dict(orient='records')

[09/23/2018 07:22:43 AM]    174                             

[09/23/2018 07:22:43 AM]    175    935.5 MiB      0.0 MiB       pid = triples[0]['pid']

[09/23/2018 07:22:43 AM]    176    935.5 MiB      0.0 MiB       log.info('PID is: {}, with type: {}'.format(pid, pid.dtype))

[09/23/2018 07:22:43 AM]    177                             

[09/23/2018 07:22:43 AM]    178    935.5 MiB      0.0 MiB       if np.DataSource().exists(join(HOME, "sm", "G_fil_val_{}.npz".format(int(pid)) ))\

[09/23/2018 07:22:43 AM]    179    935.5 MiB      0.0 MiB          and np.DataSource().exists(join(HOME, "sm", "G_fil_rel_{}.npz".format(int(pid)) )):

[09/23/2018 07:22:43 AM]    180   1438.6 MiB    503.1 MiB           Gr = load_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid)) ))

[09/23/2018 07:22:43 AM]    181   1941.5 MiB    502.9 MiB           Gv = load_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid)) ))

[09/23/2018 07:22:43 AM]    182                                 else:

[09/23/2018 07:22:43 AM]    183                                     # set weights

[09/23/2018 07:22:43 AM]    184                                     indegsim = weighted_degree(G.indeg_vec, weight=WTFN).reshape((1, G.N))

[09/23/2018 07:22:43 AM]    185                                     indegsim = indegsim.ravel()

[09/23/2018 07:22:43 AM]    186                                     targets = G.csr.indices % G.N

[09/23/2018 07:22:43 AM]    187                                     relations = (G.csr.indices - targets) / G.N

[09/23/2018 07:22:43 AM]    188                                     relsimvec = np.array(relsim[int(pid), :]) # specific to predicate p

[09/23/2018 07:22:43 AM]    189                                     relsim_wt = relsimvec[relations] # with the size of relations as the number of relations

[09/23/2018 07:22:43 AM]    190                                     ######################################################

[09/23/2018 07:22:43 AM]    191                                     specificity_wt = indegsim[targets] # specificity

[09/23/2018 07:22:43 AM]    192                             

[09/23/2018 07:22:43 AM]    193                                     ## Removing all the edges with the predicte p in between any nodes.

[09/23/2018 07:22:43 AM]    194                                     log.info('=> Removing predicate {} from KG.\n\n'.format(pid))

[09/23/2018 07:22:43 AM]    195                                     eraseedges_mask = ((G.csr.indices - (G.csr.indices % G.N)) / G.N) == pid

[09/23/2018 07:22:43 AM]    196                                     specificity_wt[eraseedges_mask] = 0

[09/23/2018 07:22:43 AM]    197                                     relsim_wt[eraseedges_mask] = 0

[09/23/2018 07:22:43 AM]    198                                     G.csr.data = specificity_wt.copy()

[09/23/2018 07:22:43 AM]    199                             

[09/23/2018 07:22:43 AM]    200                                     G.csr.data = np.multiply(relsim_wt, G.csr.data)

[09/23/2018 07:22:43 AM]    201                                     log.info("Constructing adjacency matrix for: {}".format(pid))

[09/23/2018 07:22:43 AM]    202                                     adj_list_data = []

[09/23/2018 07:22:43 AM]    203                                     adj_list_s = []

[09/23/2018 07:22:43 AM]    204                                     adj_list_p = []

[09/23/2018 07:22:43 AM]    205                                     adj_list_o = []

[09/23/2018 07:22:43 AM]    206                                     sel_data = np.array([])

[09/23/2018 07:22:43 AM]    207                                     sel_relations = np.array([])

[09/23/2018 07:22:43 AM]    208                                     dicti = {}

[09/23/2018 07:22:43 AM]    209                                     num_nodes = len(G.csr.indptr)-1

[09/23/2018 07:22:43 AM]    210                                     for node in tqdm(xrange(num_nodes)):

[09/23/2018 07:22:43 AM]    211                                         dicti = {}

[09/23/2018 07:22:43 AM]    212                                         start = G.csr.indptr[node]

[09/23/2018 07:22:43 AM]    213                                         end = G.csr.indptr[node+1]

[09/23/2018 07:22:43 AM]    214                             

[09/23/2018 07:22:43 AM]    215                                         sel_data = G.csr.data[start:end]

[09/23/2018 07:22:43 AM]    216                                         sel_relations = relations[start:end]

[09/23/2018 07:22:43 AM]    217                                         for i, sel_tar in enumerate(targets[start:end]):

[09/23/2018 07:22:43 AM]    218                                             if sel_tar in dicti:

[09/23/2018 07:22:43 AM]    219                                                 if dicti[sel_tar][0] < sel_data[i]:

[09/23/2018 07:22:43 AM]    220                                                     dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 07:22:43 AM]    221                                             else:

[09/23/2018 07:22:43 AM]    222                                                 dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 07:22:43 AM]    223                                         for key, value in dicti.iteritems():

[09/23/2018 07:22:43 AM]    224                                             if value[0] != 0:

[09/23/2018 07:22:43 AM]    225                                                 adj_list_data.append(value[0])

[09/23/2018 07:22:43 AM]    226                                                 adj_list_s.append(node)

[09/23/2018 07:22:43 AM]    227                                                 adj_list_p.append(value[1])

[09/23/2018 07:22:43 AM]    228                                                 adj_list_o.append(key)

[09/23/2018 07:22:43 AM]    229                                     Gr = csr_matrix((adj_list_p, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 07:22:43 AM]    230                                     Gv = csr_matrix((adj_list_data, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 07:22:43 AM]    231                                     save_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid))), Gr)

[09/23/2018 07:22:43 AM]    232                                     save_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid))), Gv)

[09/23/2018 07:22:43 AM]    233                             

[09/23/2018 07:22:43 AM]    234                                 ############# Path extraction ###################

[09/23/2018 07:22:43 AM]    235   1941.5 MiB      0.0 MiB       log.info('=> Path extraction..(this can take a while)')

[09/23/2018 07:22:43 AM]    236   1941.5 MiB      0.0 MiB       t1 = time()

[09/23/2018 07:22:43 AM]    237   2793.6 MiB    852.1 MiB       features, pos_features, neg_features, measurements = extract_paths_sm(Gv, Gr, triples, y)

[09/23/2018 07:22:43 AM]    238   2793.6 MiB      0.0 MiB       log.info('P: +:{}, -:{}, unique tot:{}'.format(len(pos_features), len(neg_features), len(features)))

[09/23/2018 07:22:43 AM]    239   2793.6 MiB      0.0 MiB       vec = DictVectorizer()

[09/23/2018 07:22:43 AM]    240   2799.7 MiB      6.1 MiB       X = vec.fit_transform(measurements)

[09/23/2018 07:22:43 AM]    241   2799.7 MiB      0.0 MiB       n, m = X.shape

[09/23/2018 07:22:43 AM]    242   2799.7 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n\n'.format(time() - t1))

[09/23/2018 07:22:43 AM]    243                             

[09/23/2018 07:22:43 AM]    244                                 ########### Path selection ###############

[09/23/2018 07:22:43 AM]    245   2799.7 MiB      0.0 MiB       log.info('=> Path selection..')

[09/23/2018 07:22:43 AM]    246   2799.7 MiB      0.0 MiB       t1 = time()

[09/23/2018 07:22:43 AM]    247   2799.9 MiB      0.2 MiB       pathselect = SelectKBest(mutual_info_classif, k=min(100, m))

[09/23/2018 07:22:43 AM]    248   2802.2 MiB      2.3 MiB       X_select = pathselect.fit_transform(X, y)

[09/23/2018 07:22:43 AM]    249   2802.2 MiB      0.0 MiB       selectidx = pathselect.get_support(indices=True) # selected feature indices

[09/23/2018 07:22:43 AM]    250   2802.2 MiB      0.0 MiB       vec = vec.restrict(selectidx, indices=True)

[09/23/2018 07:22:43 AM]    251   2802.2 MiB      0.0 MiB       select_pos_features, select_neg_features = set(), set()

[09/23/2018 07:22:43 AM]    252   2802.3 MiB      0.0 MiB       for feature in vec.get_feature_names():

[09/23/2018 07:22:43 AM]    253   2802.3 MiB      0.0 MiB           if feature in pos_features:

[09/23/2018 07:22:43 AM]    254   2802.3 MiB      0.1 MiB               select_pos_features.add(feature)

[09/23/2018 07:22:43 AM]    255   2802.3 MiB      0.0 MiB           if feature in neg_features:

[09/23/2018 07:22:43 AM]    256                                         select_neg_features.add(feature)

[09/23/2018 07:22:43 AM]    257   2802.3 MiB      0.0 MiB       log.info('D: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 07:22:43 AM]    258   2802.3 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 07:22:43 AM]    259                             

[09/23/2018 07:22:43 AM]    260                                 # Fact interpretation

[09/23/2018 07:22:43 AM]    261   2802.3 MiB      0.0 MiB       if use_interpretable_features and len(select_neg_features) > 0:

[09/23/2018 07:22:43 AM]    262                                     log.info('=> Fact interpretation..')

[09/23/2018 07:22:43 AM]    263                                     t1 = time()

[09/23/2018 07:22:43 AM]    264                                     theta = 10

[09/23/2018 07:22:43 AM]    265                                     select_neg_idx = [i for i, f in enumerate(vec.get_feature_names()) if f in select_neg_features]

[09/23/2018 07:22:43 AM]    266                                     removemask = np.where(np.sum(X_select[:, select_neg_idx], axis=0) >= theta)[0]

[09/23/2018 07:22:43 AM]    267                                     restrictidx = select_neg_idx[removemask]

[09/23/2018 07:22:43 AM]    268                                     keepidx = []

[09/23/2018 07:22:43 AM]    269                                     for i, f in enumerate(vec.get_feature_names()):

[09/23/2018 07:22:43 AM]    270                                         if i not in restrictidx:

[09/23/2018 07:22:43 AM]    271                                             keepidx.append(i)

[09/23/2018 07:22:43 AM]    272                                         else:

[09/23/2018 07:22:43 AM]    273                                             select_neg_features.remove(f)

[09/23/2018 07:22:43 AM]    274                                     vec = vec.restrictidx(keepidx, indices=True)

[09/23/2018 07:22:43 AM]    275                                     X_select = X_select[:, keepidx]

[09/23/2018 07:22:43 AM]    276                                     log.info('D*: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 07:22:43 AM]    277                                     log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 07:22:43 AM]    278                             

[09/23/2018 07:22:43 AM]    279                                 # Model creation

[09/23/2018 07:22:43 AM]    280   2802.3 MiB      0.0 MiB       log.info('=> Model building..')

[09/23/2018 07:22:43 AM]    281   2802.3 MiB      0.0 MiB       t1 = time()

[09/23/2018 07:22:43 AM]    282   2852.6 MiB     50.3 MiB       model = find_best_model(X_select, y, cv=cv)

[09/23/2018 07:22:43 AM]    283   2852.6 MiB      0.0 MiB       log.info('#Features: {}, best-AUROC: {:.5f}'.format(X_select.shape[1], model['best_score']))

[09/23/2018 07:22:43 AM]    284   2852.6 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 07:22:43 AM]    285                             

[09/23/2018 07:22:43 AM]    286   2852.6 MiB      0.0 MiB       return vec, model

[09/23/2018 07:22:43 AM] 


[09/23/2018 07:22:43 AM] Time taken: 1194.01s

[09/23/2018 07:22:43 AM] Saved: /home/alex/Documents/streamminer/output/out_streamminer_sub_sample_2018-09-23.pkl
[09/23/2018 07:22:43 AM] 
Done!

[09/23/2018 07:22:43 AM] 

[09/23/2018 20:10:01 PM] Launching sm..
[09/23/2018 20:10:01 PM] Dataset: sub_sample.csv
[09/23/2018 20:10:01 PM] Output dir: /home/alex/Documents/streamminer/output
[09/23/2018 20:10:01 PM] Read data: (39, 7) sub_sample.csv
[09/23/2018 20:10:01 PM] Note: Found non-NA records: (39, 7)
[09/23/2018 20:10:03 PM] PID is: 599.0, with type: float64
[09/23/2018 20:10:05 PM] => Removing predicate 599.0 from KG.

[09/23/2018 20:10:10 PM] => Path extraction..(this can take a while)
[09/23/2018 20:11:11 PM] Launching sm..
[09/23/2018 20:11:11 PM] Dataset: sub_sample.csv
[09/23/2018 20:11:11 PM] Output dir: /home/alex/Documents/streamminer/output
[09/23/2018 20:11:11 PM] Read data: (39, 7) sub_sample.csv
[09/23/2018 20:11:11 PM] Note: Found non-NA records: (39, 7)
[09/23/2018 20:11:13 PM] PID is: 599.0, with type: float64
[09/23/2018 20:11:15 PM] => Removing predicate 599.0 from KG.

[09/23/2018 20:11:16 PM] => Path extraction..(this can take a while)
[09/23/2018 20:13:00 PM] Launching sm..
[09/23/2018 20:13:00 PM] Dataset: sub_sample.csv
[09/23/2018 20:13:00 PM] Output dir: /home/alex/Documents/streamminer/output
[09/23/2018 20:13:00 PM] Read data: (39, 7) sub_sample.csv
[09/23/2018 20:13:00 PM] Note: Found non-NA records: (39, 7)
[09/23/2018 20:13:02 PM] PID is: 599.0, with type: float64
[09/23/2018 20:13:04 PM] => Removing predicate 599.0 from KG.

[09/23/2018 20:13:06 PM] => Path extraction..(this can take a while)

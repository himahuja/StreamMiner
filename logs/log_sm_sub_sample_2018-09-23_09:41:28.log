[09/23/2018 09:41:28 AM] Launching sm..
[09/23/2018 09:41:28 AM] Dataset: sub_sample.csv
[09/23/2018 09:41:28 AM] Output dir: /home/galois/Documents/streamminer/output
[09/23/2018 09:41:28 AM] Read data: (39, 7) sub_sample.csv
[09/23/2018 09:41:28 AM] Note: Found non-NA records: (39, 7)
[09/23/2018 09:41:28 AM] Reconstructing graph from /home/galois/Documents/streamminer/data/kg/_undir
[09/23/2018 09:41:28 AM] 

[09/23/2018 09:41:28 AM] => Loaded: undir_data.npy
[09/23/2018 09:41:28 AM] 

[09/23/2018 09:41:28 AM] => Loaded: undir_indptr.npy
[09/23/2018 09:41:28 AM] 

[09/23/2018 09:41:28 AM] => Loaded: undir_indices.npy
[09/23/2018 09:41:28 AM] 

[09/23/2018 09:41:28 AM] => Loaded: undir_indeg_vec.npy
[09/23/2018 09:41:28 AM] 

[09/23/2018 09:41:28 AM] => Graph loaded: 0.54 secs.

[09/23/2018 09:41:28 AM] 

[09/23/2018 09:41:29 AM] PID is: 599.0, with type: float64
[09/23/2018 09:41:34 AM] => Path extraction..(this can take a while)
[09/23/2018 09:42:45 AM] Filename: streamminer2.py


[09/23/2018 09:42:45 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:42:45 AM] ================================================

[09/23/2018 09:42:45 AM]    365   1944.9 MiB   1944.9 MiB   @profile

[09/23/2018 09:42:45 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:42:45 AM]    367   1944.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:42:45 AM]    368   1968.1 MiB     23.2 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:42:45 AM]    369   1968.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:42:45 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:42:45 AM]    371                                     return discovered_paths

[09/23/2018 09:42:45 AM]    372   1968.1 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:42:45 AM]    373   1968.1 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:42:45 AM]    374   1968.1 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:42:45 AM]    375   1968.1 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:42:45 AM]    376   1968.1 MiB      0.0 MiB       B = []

[09/23/2018 09:42:45 AM]    377   1968.1 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:42:45 AM]    378   1968.1 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:42:45 AM]    379   2314.5 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:42:45 AM]    380   2314.5 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:42:45 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:42:45 AM]    382   2291.4 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:42:45 AM]    383   2291.4 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:42:45 AM]    384   2291.4 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:42:45 AM]    385   2291.4 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:42:45 AM]    386   2291.4 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:42:45 AM]    387   2291.4 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:42:45 AM]    388   2291.4 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:42:45 AM]    389   2291.4 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:42:45 AM]    390   2291.4 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:42:45 AM]    391   2291.4 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:42:45 AM]    392   2291.4 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:42:45 AM]    393   2314.5 MiB    346.4 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:42:45 AM]    394   2314.5 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:42:45 AM]    395   2314.5 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:42:45 AM]    396   2314.5 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:42:45 AM]    397   2314.5 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:42:45 AM]    398   2314.5 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:42:45 AM]    399   2314.5 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:42:45 AM]    400   2314.5 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:42:45 AM]    401   2314.5 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:42:45 AM]    402   2314.5 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:42:45 AM]    403   2314.5 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:42:45 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:42:45 AM]    405   2314.5 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:42:45 AM]    406   2314.5 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:42:45 AM]    407   2314.5 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:42:45 AM]    408   2314.5 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:42:45 AM]    409   2314.5 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:42:45 AM]    410   2314.5 MiB      0.0 MiB           if len(B):

[09/23/2018 09:42:45 AM]    411   2314.5 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:42:45 AM]    412   2314.5 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:42:45 AM]    413   2314.5 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:42:45 AM]    414                                     else:

[09/23/2018 09:42:45 AM]    415                                         break

[09/23/2018 09:42:45 AM]    416   2314.5 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:42:45 AM]    417   2314.5 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:42:45 AM]    418   2314.5 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:42:45 AM] 


[09/23/2018 09:42:45 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.0677970562743, Path (1):
[09/23/2018 09:42:45 AM] [392035] -189 (0.07)-> [2115741]

[09/23/2018 09:42:45 AM]  
[09/23/2018 09:42:45 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.129642864833, Path (3):
[09/23/2018 09:42:45 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.06)-> [2115741]

[09/23/2018 09:42:45 AM]  
[09/23/2018 09:42:45 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.227870891895, Path (3):
[09/23/2018 09:42:45 AM] [392035] -660 (0.03)-> [78] -660 (0.06)-> [532169] -236 (0.14)-> [2115741]

[09/23/2018 09:42:45 AM]  
[09/23/2018 09:42:45 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.32246592914, Path (5):
[09/23/2018 09:42:45 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [3040313] -236 (0.08)-> [532169] -236 (0.13)-> [2115741]

[09/23/2018 09:42:45 AM]  
[09/23/2018 09:42:45 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.292163189332, Path (5):
[09/23/2018 09:42:45 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [1006463] -236 (0.07)-> [532169] -236 (0.11)-> [2115741]

[09/23/2018 09:42:52 AM] Filename: streamminer2.py


[09/23/2018 09:42:52 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:42:52 AM] ================================================

[09/23/2018 09:42:52 AM]    365   2314.5 MiB   2314.5 MiB   @profile

[09/23/2018 09:42:52 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:42:52 AM]    367   2314.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:42:52 AM]    368   2337.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:42:52 AM]    369   2337.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:42:52 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:42:52 AM]    371   2337.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:42:52 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:42:52 AM]    373                                     'path': path_stack,

[09/23/2018 09:42:52 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:42:52 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:42:52 AM]    376                                 B = []

[09/23/2018 09:42:52 AM]    377                                 removed_edges = []

[09/23/2018 09:42:52 AM]    378                                 removed_nodes = []

[09/23/2018 09:42:52 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:42:52 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:42:52 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:42:52 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:42:52 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:42:52 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:42:52 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:42:52 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:42:52 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:42:52 AM]    388                                         for path_dict in A:

[09/23/2018 09:42:52 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:42:52 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:42:52 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:42:52 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:42:52 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:42:52 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:42:52 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:42:52 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:42:52 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:42:52 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:42:52 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:42:52 AM]    400                                                             'path': totalPath,

[09/23/2018 09:42:52 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:42:52 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:42:52 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:42:52 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:42:52 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:42:52 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:42:52 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:42:52 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:42:52 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:42:52 AM]    410                                     if len(B):

[09/23/2018 09:42:52 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:42:52 AM]    412                                         A.append(B[0])

[09/23/2018 09:42:52 AM]    413                                         B.pop(0)

[09/23/2018 09:42:52 AM]    414                                     else:

[09/23/2018 09:42:52 AM]    415                                         break

[09/23/2018 09:42:52 AM]    416                                 for path_dict in A:

[09/23/2018 09:42:52 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:42:52 AM]    418                                 return discovered_paths

[09/23/2018 09:42:52 AM] 


[09/23/2018 09:43:06 AM] Filename: streamminer2.py


[09/23/2018 09:43:06 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:43:06 AM] ================================================

[09/23/2018 09:43:06 AM]    365   2337.6 MiB   2337.6 MiB   @profile

[09/23/2018 09:43:06 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:43:06 AM]    367   2337.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:43:06 AM]    368   2360.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:43:06 AM]    369   2360.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:43:06 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:43:06 AM]    371   2360.7 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:43:06 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:43:06 AM]    373                                     'path': path_stack,

[09/23/2018 09:43:06 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:43:06 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:43:06 AM]    376                                 B = []

[09/23/2018 09:43:06 AM]    377                                 removed_edges = []

[09/23/2018 09:43:06 AM]    378                                 removed_nodes = []

[09/23/2018 09:43:06 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:43:06 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:43:06 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:43:06 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:43:06 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:43:06 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:43:06 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:43:06 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:43:06 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:43:06 AM]    388                                         for path_dict in A:

[09/23/2018 09:43:06 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:43:06 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:43:06 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:43:06 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:43:06 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:43:06 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:43:06 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:43:06 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:43:06 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:43:06 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:43:06 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:43:06 AM]    400                                                             'path': totalPath,

[09/23/2018 09:43:06 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:43:06 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:43:06 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:43:06 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:43:06 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:43:06 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:43:06 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:43:06 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:43:06 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:43:06 AM]    410                                     if len(B):

[09/23/2018 09:43:06 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:43:06 AM]    412                                         A.append(B[0])

[09/23/2018 09:43:06 AM]    413                                         B.pop(0)

[09/23/2018 09:43:06 AM]    414                                     else:

[09/23/2018 09:43:06 AM]    415                                         break

[09/23/2018 09:43:06 AM]    416                                 for path_dict in A:

[09/23/2018 09:43:06 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:43:06 AM]    418                                 return discovered_paths

[09/23/2018 09:43:06 AM] 


[09/23/2018 09:43:16 AM] Filename: streamminer2.py


[09/23/2018 09:43:16 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:43:16 AM] ================================================

[09/23/2018 09:43:16 AM]    365   2360.7 MiB   2360.7 MiB   @profile

[09/23/2018 09:43:16 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:43:16 AM]    367   2360.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:43:16 AM]    368   2383.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:43:16 AM]    369   2383.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:43:16 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:43:16 AM]    371   2383.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:43:16 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:43:16 AM]    373                                     'path': path_stack,

[09/23/2018 09:43:16 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:43:16 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:43:16 AM]    376                                 B = []

[09/23/2018 09:43:16 AM]    377                                 removed_edges = []

[09/23/2018 09:43:16 AM]    378                                 removed_nodes = []

[09/23/2018 09:43:16 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:43:16 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:43:16 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:43:16 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:43:16 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:43:16 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:43:16 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:43:16 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:43:16 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:43:16 AM]    388                                         for path_dict in A:

[09/23/2018 09:43:16 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:43:16 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:43:16 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:43:16 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:43:16 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:43:16 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:43:16 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:43:16 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:43:16 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:43:16 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:43:16 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:43:16 AM]    400                                                             'path': totalPath,

[09/23/2018 09:43:16 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:43:16 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:43:16 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:43:16 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:43:16 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:43:16 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:43:16 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:43:16 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:43:16 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:43:16 AM]    410                                     if len(B):

[09/23/2018 09:43:16 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:43:16 AM]    412                                         A.append(B[0])

[09/23/2018 09:43:16 AM]    413                                         B.pop(0)

[09/23/2018 09:43:16 AM]    414                                     else:

[09/23/2018 09:43:16 AM]    415                                         break

[09/23/2018 09:43:16 AM]    416                                 for path_dict in A:

[09/23/2018 09:43:16 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:43:16 AM]    418                                 return discovered_paths

[09/23/2018 09:43:16 AM] 


[09/23/2018 09:45:03 AM] Filename: streamminer2.py


[09/23/2018 09:45:03 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:45:03 AM] ================================================

[09/23/2018 09:45:03 AM]    365   2383.9 MiB   2383.9 MiB   @profile

[09/23/2018 09:45:03 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:45:03 AM]    367   2383.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:45:03 AM]    368   2407.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:03 AM]    369   2407.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:45:03 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:45:03 AM]    371                                     return discovered_paths

[09/23/2018 09:45:03 AM]    372   2407.0 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:45:03 AM]    373   2407.0 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:45:03 AM]    374   2407.0 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:45:03 AM]    375   2407.0 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:45:03 AM]    376   2407.0 MiB      0.0 MiB       B = []

[09/23/2018 09:45:03 AM]    377   2407.0 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:45:03 AM]    378   2407.0 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:45:03 AM]    379   2776.9 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:45:03 AM]    380   2776.9 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:45:03 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:45:03 AM]    382   2753.8 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:45:03 AM]    383   2753.8 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:45:03 AM]    384   2753.8 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:45:03 AM]    385   2753.8 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:45:03 AM]    386   2753.8 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:45:03 AM]    387   2753.8 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:45:03 AM]    388   2753.8 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:45:03 AM]    389   2753.8 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:45:03 AM]    390   2753.8 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:45:03 AM]    391   2753.8 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:45:03 AM]    392   2753.8 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:45:03 AM]    393   2776.9 MiB    369.9 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:03 AM]    394   2776.9 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:45:03 AM]    395   2776.9 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:45:03 AM]    396   2776.9 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:45:03 AM]    397   2776.9 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:45:03 AM]    398   2776.9 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:45:03 AM]    399   2776.9 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:45:03 AM]    400   2776.9 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:45:03 AM]    401   2776.9 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:45:03 AM]    402   2776.9 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:45:03 AM]    403   2776.9 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:45:03 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:45:03 AM]    405   2776.9 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:45:03 AM]    406   2776.9 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:45:03 AM]    407   2776.9 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:45:03 AM]    408   2776.9 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:45:03 AM]    409   2776.9 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:45:03 AM]    410   2776.9 MiB      0.0 MiB           if len(B):

[09/23/2018 09:45:03 AM]    411   2776.9 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:45:03 AM]    412   2776.9 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:45:03 AM]    413   2776.9 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:45:03 AM]    414                                     else:

[09/23/2018 09:45:03 AM]    415                                         break

[09/23/2018 09:45:03 AM]    416   2776.9 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:45:03 AM]    417   2776.9 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:45:03 AM]    418   2776.9 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:45:03 AM] 


[09/23/2018 09:45:03 AM]  
[09/23/2018 09:45:03 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.0709806674345, Path (1):
[09/23/2018 09:45:03 AM] [482030] -189 (0.07)-> [2364618]

[09/23/2018 09:45:03 AM]  
[09/23/2018 09:45:03 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.189150057923, Path (3):
[09/23/2018 09:45:03 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -189 (0.08)-> [2364618]

[09/23/2018 09:45:03 AM]  
[09/23/2018 09:45:03 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.300590160143, Path (5):
[09/23/2018 09:45:03 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -123 (0.03)-> [3229261] -123 (0.06)-> [3641685] -189 (0.1)-> [2364618]

[09/23/2018 09:45:03 AM]  
[09/23/2018 09:45:03 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.307470839662, Path (7):
[09/23/2018 09:45:03 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -601 (0.04)-> [3741813] -601 (0.05)-> [679305] -601 (0.06)-> [2364618]

[09/23/2018 09:45:03 AM]  
[09/23/2018 09:45:03 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.298667188758, Path (7):
[09/23/2018 09:45:03 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -660 (0.03)-> [662] -660 (0.05)-> [2287973] -601 (0.06)-> [2364618]

[09/23/2018 09:45:16 AM] Filename: streamminer2.py


[09/23/2018 09:45:16 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:45:16 AM] ================================================

[09/23/2018 09:45:16 AM]    365   2776.9 MiB   2776.9 MiB   @profile

[09/23/2018 09:45:16 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:45:16 AM]    367   2776.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:45:16 AM]    368   2800.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:16 AM]    369   2800.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:45:16 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:45:16 AM]    371   2800.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:45:16 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:45:16 AM]    373                                     'path': path_stack,

[09/23/2018 09:45:16 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:45:16 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:45:16 AM]    376                                 B = []

[09/23/2018 09:45:16 AM]    377                                 removed_edges = []

[09/23/2018 09:45:16 AM]    378                                 removed_nodes = []

[09/23/2018 09:45:16 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:45:16 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:45:16 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:45:16 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:45:16 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:45:16 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:45:16 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:45:16 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:45:16 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:45:16 AM]    388                                         for path_dict in A:

[09/23/2018 09:45:16 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:45:16 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:45:16 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:45:16 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:45:16 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:16 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:45:16 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:45:16 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:45:16 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:45:16 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:45:16 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:45:16 AM]    400                                                             'path': totalPath,

[09/23/2018 09:45:16 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:45:16 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:45:16 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:45:16 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:45:16 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:45:16 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:45:16 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:45:16 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:45:16 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:45:16 AM]    410                                     if len(B):

[09/23/2018 09:45:16 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:45:16 AM]    412                                         A.append(B[0])

[09/23/2018 09:45:16 AM]    413                                         B.pop(0)

[09/23/2018 09:45:16 AM]    414                                     else:

[09/23/2018 09:45:16 AM]    415                                         break

[09/23/2018 09:45:16 AM]    416                                 for path_dict in A:

[09/23/2018 09:45:16 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:45:16 AM]    418                                 return discovered_paths

[09/23/2018 09:45:16 AM] 


[09/23/2018 09:45:29 AM] Filename: streamminer2.py


[09/23/2018 09:45:29 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:45:29 AM] ================================================

[09/23/2018 09:45:29 AM]    365   2800.0 MiB   2800.0 MiB   @profile

[09/23/2018 09:45:29 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:45:29 AM]    367   2800.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:45:29 AM]    368   2823.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:29 AM]    369   2823.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:45:29 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:45:29 AM]    371   2823.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:45:29 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:45:29 AM]    373                                     'path': path_stack,

[09/23/2018 09:45:29 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:45:29 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:45:29 AM]    376                                 B = []

[09/23/2018 09:45:29 AM]    377                                 removed_edges = []

[09/23/2018 09:45:29 AM]    378                                 removed_nodes = []

[09/23/2018 09:45:29 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:45:29 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:45:29 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:45:29 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:45:29 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:45:29 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:45:29 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:45:29 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:45:29 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:45:29 AM]    388                                         for path_dict in A:

[09/23/2018 09:45:29 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:45:29 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:45:29 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:45:29 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:45:29 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:29 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:45:29 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:45:29 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:45:29 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:45:29 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:45:29 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:45:29 AM]    400                                                             'path': totalPath,

[09/23/2018 09:45:29 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:45:29 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:45:29 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:45:29 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:45:29 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:45:29 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:45:29 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:45:29 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:45:29 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:45:29 AM]    410                                     if len(B):

[09/23/2018 09:45:29 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:45:29 AM]    412                                         A.append(B[0])

[09/23/2018 09:45:29 AM]    413                                         B.pop(0)

[09/23/2018 09:45:29 AM]    414                                     else:

[09/23/2018 09:45:29 AM]    415                                         break

[09/23/2018 09:45:29 AM]    416                                 for path_dict in A:

[09/23/2018 09:45:29 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:45:29 AM]    418                                 return discovered_paths

[09/23/2018 09:45:29 AM] 


[09/23/2018 09:45:38 AM] Filename: streamminer2.py


[09/23/2018 09:45:38 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:45:38 AM] ================================================

[09/23/2018 09:45:38 AM]    365   2823.2 MiB   2823.2 MiB   @profile

[09/23/2018 09:45:38 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:45:38 AM]    367   2823.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:45:38 AM]    368   2846.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:38 AM]    369   2846.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:45:38 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:45:38 AM]    371   2846.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:45:38 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:45:38 AM]    373                                     'path': path_stack,

[09/23/2018 09:45:38 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:45:38 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:45:38 AM]    376                                 B = []

[09/23/2018 09:45:38 AM]    377                                 removed_edges = []

[09/23/2018 09:45:38 AM]    378                                 removed_nodes = []

[09/23/2018 09:45:38 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:45:38 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:45:38 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:45:38 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:45:38 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:45:38 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:45:38 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:45:38 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:45:38 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:45:38 AM]    388                                         for path_dict in A:

[09/23/2018 09:45:38 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:45:38 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:45:38 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:45:38 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:45:38 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:45:38 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:45:38 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:45:38 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:45:38 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:45:38 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:45:38 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:45:38 AM]    400                                                             'path': totalPath,

[09/23/2018 09:45:38 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:45:38 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:45:38 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:45:38 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:45:38 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:45:38 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:45:38 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:45:38 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:45:38 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:45:38 AM]    410                                     if len(B):

[09/23/2018 09:45:38 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:45:38 AM]    412                                         A.append(B[0])

[09/23/2018 09:45:38 AM]    413                                         B.pop(0)

[09/23/2018 09:45:38 AM]    414                                     else:

[09/23/2018 09:45:38 AM]    415                                         break

[09/23/2018 09:45:38 AM]    416                                 for path_dict in A:

[09/23/2018 09:45:38 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:45:38 AM]    418                                 return discovered_paths

[09/23/2018 09:45:38 AM] 


[09/23/2018 09:46:33 AM] Filename: streamminer2.py


[09/23/2018 09:46:33 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:46:33 AM] ================================================

[09/23/2018 09:46:33 AM]    365   2846.3 MiB   2846.3 MiB   @profile

[09/23/2018 09:46:33 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:46:33 AM]    367   2846.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:46:33 AM]    368   2869.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:46:33 AM]    369   2869.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:46:33 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:46:33 AM]    371                                     return discovered_paths

[09/23/2018 09:46:33 AM]    372   2869.4 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:46:33 AM]    373   2869.4 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:46:33 AM]    374   2869.4 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:46:33 AM]    375   2869.4 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:46:33 AM]    376   2869.4 MiB      0.0 MiB       B = []

[09/23/2018 09:46:33 AM]    377   2869.4 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:46:33 AM]    378   2869.4 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:46:33 AM]    379   3146.9 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:46:33 AM]    380   3146.9 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:46:33 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:46:33 AM]    382   3123.7 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:46:33 AM]    383   3123.7 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:46:33 AM]    384   3123.7 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:46:33 AM]    385   3123.7 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:46:33 AM]    386   3123.7 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:46:33 AM]    387   3123.7 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:46:33 AM]    388   3123.7 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:46:33 AM]    389   3123.7 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:46:33 AM]    390   3123.7 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:46:33 AM]    391   3123.7 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:46:33 AM]    392   3123.7 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:46:33 AM]    393   3146.9 MiB    277.4 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:46:33 AM]    394   3146.9 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:46:33 AM]    395   3146.9 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:46:33 AM]    396   3146.9 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:46:33 AM]    397   3146.9 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:46:33 AM]    398   3146.9 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:46:33 AM]    399   3146.9 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:46:33 AM]    400   3146.9 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:46:33 AM]    401   3146.9 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:46:33 AM]    402   3146.9 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:46:33 AM]    403   3146.9 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:46:33 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:46:33 AM]    405   3146.9 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:46:33 AM]    406   3146.9 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:46:33 AM]    407   3146.9 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:46:33 AM]    408   3146.9 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:46:33 AM]    409   3146.9 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:46:33 AM]    410   3146.9 MiB      0.0 MiB           if len(B):

[09/23/2018 09:46:33 AM]    411   3146.9 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:46:33 AM]    412   3146.9 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:46:33 AM]    413   3146.9 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:46:33 AM]    414                                     else:

[09/23/2018 09:46:33 AM]    415                                         break

[09/23/2018 09:46:33 AM]    416   3146.9 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:46:33 AM]    417   3146.9 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:46:33 AM]    418   3146.9 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:46:33 AM] 


[09/23/2018 09:46:33 AM]  
[09/23/2018 09:46:33 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.0709806674345, Path (1):
[09/23/2018 09:46:33 AM] [494082] -189 (0.07)-> [4119746]

[09/23/2018 09:46:33 AM]  
[09/23/2018 09:46:33 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.185839285232, Path (3):
[09/23/2018 09:46:33 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -189 (0.08)-> [4119746]

[09/23/2018 09:46:33 AM]  
[09/23/2018 09:46:33 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.185223180919, Path (3):
[09/23/2018 09:46:33 AM] [494082] -462 (0.04)-> [1095182] -462 (0.07)-> [4421062] -189 (0.08)-> [4119746]

[09/23/2018 09:46:33 AM]  
[09/23/2018 09:46:33 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.236441046223, Path (5):
[09/23/2018 09:46:33 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -65 (0.03)-> [3516497] -65 (0.04)-> [4370446] -189 (0.06)-> [4119746]

[09/23/2018 09:46:33 AM]  
[09/23/2018 09:46:33 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.318141167082, Path (3):
[09/23/2018 09:46:33 AM] [494082] -462 (0.04)-> [4182344] -462 (0.06)-> [3400649] -189 (0.23)-> [4119746]

[09/23/2018 09:46:43 AM] Filename: streamminer2.py


[09/23/2018 09:46:43 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:46:43 AM] ================================================

[09/23/2018 09:46:43 AM]    365   3146.9 MiB   3146.9 MiB   @profile

[09/23/2018 09:46:43 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:46:43 AM]    367   3146.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:46:43 AM]    368   3170.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:46:43 AM]    369   3170.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:46:43 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:46:43 AM]    371   3170.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:46:43 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:46:43 AM]    373                                     'path': path_stack,

[09/23/2018 09:46:43 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:46:43 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:46:43 AM]    376                                 B = []

[09/23/2018 09:46:43 AM]    377                                 removed_edges = []

[09/23/2018 09:46:43 AM]    378                                 removed_nodes = []

[09/23/2018 09:46:43 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:46:43 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:46:43 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:46:43 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:46:43 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:46:43 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:46:43 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:46:43 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:46:43 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:46:43 AM]    388                                         for path_dict in A:

[09/23/2018 09:46:43 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:46:43 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:46:43 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:46:43 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:46:43 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:46:43 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:46:43 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:46:43 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:46:43 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:46:43 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:46:43 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:46:43 AM]    400                                                             'path': totalPath,

[09/23/2018 09:46:43 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:46:43 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:46:43 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:46:43 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:46:43 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:46:43 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:46:43 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:46:43 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:46:43 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:46:43 AM]    410                                     if len(B):

[09/23/2018 09:46:43 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:46:43 AM]    412                                         A.append(B[0])

[09/23/2018 09:46:43 AM]    413                                         B.pop(0)

[09/23/2018 09:46:43 AM]    414                                     else:

[09/23/2018 09:46:43 AM]    415                                         break

[09/23/2018 09:46:43 AM]    416                                 for path_dict in A:

[09/23/2018 09:46:43 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:46:43 AM]    418                                 return discovered_paths

[09/23/2018 09:46:43 AM] 


[09/23/2018 09:46:57 AM] Filename: streamminer2.py


[09/23/2018 09:46:57 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:46:57 AM] ================================================

[09/23/2018 09:46:57 AM]    365   3170.0 MiB   3170.0 MiB   @profile

[09/23/2018 09:46:57 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:46:57 AM]    367   3170.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:46:57 AM]    368   3193.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:46:57 AM]    369   3193.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:46:57 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:46:57 AM]    371   3193.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:46:57 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:46:57 AM]    373                                     'path': path_stack,

[09/23/2018 09:46:57 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:46:57 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:46:57 AM]    376                                 B = []

[09/23/2018 09:46:57 AM]    377                                 removed_edges = []

[09/23/2018 09:46:57 AM]    378                                 removed_nodes = []

[09/23/2018 09:46:57 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:46:57 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:46:57 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:46:57 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:46:57 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:46:57 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:46:57 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:46:57 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:46:57 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:46:57 AM]    388                                         for path_dict in A:

[09/23/2018 09:46:57 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:46:57 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:46:57 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:46:57 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:46:57 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:46:57 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:46:57 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:46:57 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:46:57 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:46:57 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:46:57 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:46:57 AM]    400                                                             'path': totalPath,

[09/23/2018 09:46:57 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:46:57 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:46:57 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:46:57 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:46:57 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:46:57 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:46:57 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:46:57 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:46:57 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:46:57 AM]    410                                     if len(B):

[09/23/2018 09:46:57 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:46:57 AM]    412                                         A.append(B[0])

[09/23/2018 09:46:57 AM]    413                                         B.pop(0)

[09/23/2018 09:46:57 AM]    414                                     else:

[09/23/2018 09:46:57 AM]    415                                         break

[09/23/2018 09:46:57 AM]    416                                 for path_dict in A:

[09/23/2018 09:46:57 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:46:57 AM]    418                                 return discovered_paths

[09/23/2018 09:46:57 AM] 


[09/23/2018 09:47:05 AM] Filename: streamminer2.py


[09/23/2018 09:47:05 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:47:05 AM] ================================================

[09/23/2018 09:47:05 AM]    365   3193.1 MiB   3193.1 MiB   @profile

[09/23/2018 09:47:05 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:47:05 AM]    367   3193.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:47:05 AM]    368   3216.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:47:05 AM]    369   3216.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:47:05 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:47:05 AM]    371   3216.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:47:05 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:47:05 AM]    373                                     'path': path_stack,

[09/23/2018 09:47:05 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:47:05 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:47:05 AM]    376                                 B = []

[09/23/2018 09:47:05 AM]    377                                 removed_edges = []

[09/23/2018 09:47:05 AM]    378                                 removed_nodes = []

[09/23/2018 09:47:05 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:47:05 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:47:05 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:47:05 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:47:05 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:47:05 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:47:05 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:47:05 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:47:05 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:47:05 AM]    388                                         for path_dict in A:

[09/23/2018 09:47:05 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:47:05 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:47:05 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:47:05 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:47:05 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:47:05 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:47:05 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:47:05 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:47:05 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:47:05 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:47:05 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:47:05 AM]    400                                                             'path': totalPath,

[09/23/2018 09:47:05 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:47:05 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:47:05 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:47:05 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:47:05 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:47:05 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:47:05 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:47:05 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:47:05 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:47:05 AM]    410                                     if len(B):

[09/23/2018 09:47:05 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:47:05 AM]    412                                         A.append(B[0])

[09/23/2018 09:47:05 AM]    413                                         B.pop(0)

[09/23/2018 09:47:05 AM]    414                                     else:

[09/23/2018 09:47:05 AM]    415                                         break

[09/23/2018 09:47:05 AM]    416                                 for path_dict in A:

[09/23/2018 09:47:05 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:47:05 AM]    418                                 return discovered_paths

[09/23/2018 09:47:05 AM] 


[09/23/2018 09:48:31 AM] Filename: streamminer2.py


[09/23/2018 09:48:31 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:48:31 AM] ================================================

[09/23/2018 09:48:31 AM]    365   3216.2 MiB   3216.2 MiB   @profile

[09/23/2018 09:48:31 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:48:31 AM]    367   3216.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:48:31 AM]    368   3239.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:31 AM]    369   3239.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:48:31 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:48:31 AM]    371                                     return discovered_paths

[09/23/2018 09:48:31 AM]    372   3239.3 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:48:31 AM]    373   3239.3 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:48:31 AM]    374   3239.3 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:48:31 AM]    375   3239.3 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:48:31 AM]    376   3239.3 MiB      0.0 MiB       B = []

[09/23/2018 09:48:31 AM]    377   3239.3 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:48:31 AM]    378   3239.3 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:48:31 AM]    379   3563.0 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:48:31 AM]    380   3563.0 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:48:31 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:48:31 AM]    382   3539.9 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:48:31 AM]    383   3539.9 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:48:31 AM]    384   3539.9 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:48:31 AM]    385   3539.9 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:48:31 AM]    386   3539.9 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:48:31 AM]    387   3539.9 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:48:31 AM]    388   3539.9 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:48:31 AM]    389   3539.9 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:48:31 AM]    390   3539.9 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:48:31 AM]    391   3539.9 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:48:31 AM]    392   3539.9 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:48:31 AM]    393   3563.0 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:31 AM]    394   3563.0 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:48:31 AM]    395   3563.0 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:48:31 AM]    396   3563.0 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:48:31 AM]    397   3563.0 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:48:31 AM]    398   3563.0 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:48:31 AM]    399   3563.0 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:48:31 AM]    400   3563.0 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:48:31 AM]    401   3563.0 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:48:31 AM]    402   3563.0 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:48:31 AM]    403   3563.0 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:48:31 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:48:31 AM]    405   3563.0 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:48:31 AM]    406   3563.0 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:48:31 AM]    407   3563.0 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:48:31 AM]    408   3563.0 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:48:31 AM]    409   3563.0 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:48:31 AM]    410   3563.0 MiB      0.0 MiB           if len(B):

[09/23/2018 09:48:31 AM]    411   3563.0 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:48:31 AM]    412   3563.0 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:48:31 AM]    413   3563.0 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:48:31 AM]    414                                     else:

[09/23/2018 09:48:31 AM]    415                                         break

[09/23/2018 09:48:31 AM]    416   3563.0 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:48:31 AM]    417   3563.0 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:48:31 AM]    418   3563.0 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:48:31 AM] 


[09/23/2018 09:48:31 AM]  
[09/23/2018 09:48:31 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.286517316618, Path (3):
[09/23/2018 09:48:31 AM] [846737] -65 (0.04)-> [1321700] -65 (0.09)-> [846745] -189 (0.15)-> [3782014]

[09/23/2018 09:48:31 AM]  
[09/23/2018 09:48:31 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.114141656281, Path (3):
[09/23/2018 09:48:31 AM] [846737] -480 (0.03)-> [769522] -480 (0.04)-> [5528006] -189 (0.05)-> [3782014]

[09/23/2018 09:48:31 AM]  
[09/23/2018 09:48:31 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.221127137519, Path (3):
[09/23/2018 09:48:31 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -189 (0.15)-> [3782014]

[09/23/2018 09:48:31 AM]  
[09/23/2018 09:48:31 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.293878884718, Path (5):
[09/23/2018 09:48:31 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -329 (0.04)-> [743463] -329 (0.07)-> [4327133] -189 (0.11)-> [3782014]

[09/23/2018 09:48:31 AM]  
[09/23/2018 09:48:31 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.262451694096, Path (5):
[09/23/2018 09:48:31 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -462 (0.04)-> [769614] -462 (0.07)-> [2927811] -189 (0.08)-> [3782014]

[09/23/2018 09:48:36 AM] Filename: streamminer2.py


[09/23/2018 09:48:36 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:48:36 AM] ================================================

[09/23/2018 09:48:36 AM]    365   3563.0 MiB   3563.0 MiB   @profile

[09/23/2018 09:48:36 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:48:36 AM]    367   3563.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:48:36 AM]    368   3586.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:36 AM]    369   3586.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:48:36 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:48:36 AM]    371   3586.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:48:36 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:48:36 AM]    373                                     'path': path_stack,

[09/23/2018 09:48:36 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:48:36 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:48:36 AM]    376                                 B = []

[09/23/2018 09:48:36 AM]    377                                 removed_edges = []

[09/23/2018 09:48:36 AM]    378                                 removed_nodes = []

[09/23/2018 09:48:36 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:48:36 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:48:36 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:48:36 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:48:36 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:48:36 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:48:36 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:48:36 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:48:36 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:48:36 AM]    388                                         for path_dict in A:

[09/23/2018 09:48:36 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:48:36 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:48:36 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:48:36 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:48:36 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:36 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:48:36 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:48:36 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:48:36 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:48:36 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:48:36 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:48:36 AM]    400                                                             'path': totalPath,

[09/23/2018 09:48:36 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:48:36 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:48:36 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:48:36 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:48:36 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:48:36 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:48:36 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:48:36 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:48:36 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:48:36 AM]    410                                     if len(B):

[09/23/2018 09:48:36 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:48:36 AM]    412                                         A.append(B[0])

[09/23/2018 09:48:36 AM]    413                                         B.pop(0)

[09/23/2018 09:48:36 AM]    414                                     else:

[09/23/2018 09:48:36 AM]    415                                         break

[09/23/2018 09:48:36 AM]    416                                 for path_dict in A:

[09/23/2018 09:48:36 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:48:36 AM]    418                                 return discovered_paths

[09/23/2018 09:48:36 AM] 


[09/23/2018 09:48:42 AM] Filename: streamminer2.py


[09/23/2018 09:48:42 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:48:42 AM] ================================================

[09/23/2018 09:48:42 AM]    365   3586.2 MiB   3586.2 MiB   @profile

[09/23/2018 09:48:42 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:48:42 AM]    367   3586.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:48:42 AM]    368   3609.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:42 AM]    369   3609.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:48:42 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:48:42 AM]    371   3609.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:48:42 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:48:42 AM]    373                                     'path': path_stack,

[09/23/2018 09:48:42 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:48:42 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:48:42 AM]    376                                 B = []

[09/23/2018 09:48:42 AM]    377                                 removed_edges = []

[09/23/2018 09:48:42 AM]    378                                 removed_nodes = []

[09/23/2018 09:48:42 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:48:42 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:48:42 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:48:42 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:48:42 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:48:42 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:48:42 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:48:42 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:48:42 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:48:42 AM]    388                                         for path_dict in A:

[09/23/2018 09:48:42 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:48:42 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:48:42 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:48:42 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:48:42 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:42 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:48:42 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:48:42 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:48:42 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:48:42 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:48:42 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:48:42 AM]    400                                                             'path': totalPath,

[09/23/2018 09:48:42 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:48:42 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:48:42 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:48:42 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:48:42 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:48:42 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:48:42 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:48:42 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:48:42 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:48:42 AM]    410                                     if len(B):

[09/23/2018 09:48:42 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:48:42 AM]    412                                         A.append(B[0])

[09/23/2018 09:48:42 AM]    413                                         B.pop(0)

[09/23/2018 09:48:42 AM]    414                                     else:

[09/23/2018 09:48:42 AM]    415                                         break

[09/23/2018 09:48:42 AM]    416                                 for path_dict in A:

[09/23/2018 09:48:42 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:48:42 AM]    418                                 return discovered_paths

[09/23/2018 09:48:42 AM] 


[09/23/2018 09:48:47 AM] Filename: streamminer2.py


[09/23/2018 09:48:47 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:48:47 AM] ================================================

[09/23/2018 09:48:47 AM]    365   3609.3 MiB   3609.3 MiB   @profile

[09/23/2018 09:48:47 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:48:47 AM]    367   3609.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:48:47 AM]    368   3632.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:47 AM]    369   3632.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:48:47 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:48:47 AM]    371   3632.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:48:47 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:48:47 AM]    373                                     'path': path_stack,

[09/23/2018 09:48:47 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:48:47 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:48:47 AM]    376                                 B = []

[09/23/2018 09:48:47 AM]    377                                 removed_edges = []

[09/23/2018 09:48:47 AM]    378                                 removed_nodes = []

[09/23/2018 09:48:47 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:48:47 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:48:47 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:48:47 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:48:47 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:48:47 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:48:47 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:48:47 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:48:47 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:48:47 AM]    388                                         for path_dict in A:

[09/23/2018 09:48:47 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:48:47 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:48:47 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:48:47 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:48:47 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:48:47 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:48:47 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:48:47 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:48:47 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:48:47 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:48:47 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:48:47 AM]    400                                                             'path': totalPath,

[09/23/2018 09:48:47 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:48:47 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:48:47 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:48:47 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:48:47 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:48:47 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:48:47 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:48:47 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:48:47 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:48:47 AM]    410                                     if len(B):

[09/23/2018 09:48:47 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:48:47 AM]    412                                         A.append(B[0])

[09/23/2018 09:48:47 AM]    413                                         B.pop(0)

[09/23/2018 09:48:47 AM]    414                                     else:

[09/23/2018 09:48:47 AM]    415                                         break

[09/23/2018 09:48:47 AM]    416                                 for path_dict in A:

[09/23/2018 09:48:47 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:48:47 AM]    418                                 return discovered_paths

[09/23/2018 09:48:47 AM] 


[09/23/2018 09:50:36 AM] Filename: streamminer2.py


[09/23/2018 09:50:36 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:50:36 AM] ================================================

[09/23/2018 09:50:36 AM]    365   3632.4 MiB   3632.4 MiB   @profile

[09/23/2018 09:50:36 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:50:36 AM]    367   3632.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:50:36 AM]    368   3655.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:36 AM]    369   3655.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:50:36 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:50:36 AM]    371                                     return discovered_paths

[09/23/2018 09:50:36 AM]    372   3655.5 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:50:36 AM]    373   3655.5 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:50:36 AM]    374   3655.5 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:50:36 AM]    375   3655.5 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:50:36 AM]    376   3655.5 MiB      0.0 MiB       B = []

[09/23/2018 09:50:36 AM]    377   3655.5 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:50:36 AM]    378   3655.5 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:50:36 AM]    379   3979.2 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:50:36 AM]    380   3979.2 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:50:36 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:50:36 AM]    382   3956.1 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:50:36 AM]    383   3956.1 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:50:36 AM]    384   3956.1 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:50:36 AM]    385   3956.1 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:50:36 AM]    386   3956.1 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:50:36 AM]    387   3956.1 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:50:36 AM]    388   3956.1 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:50:36 AM]    389   3956.1 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:50:36 AM]    390   3956.1 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:50:36 AM]    391   3956.1 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:50:36 AM]    392   3956.1 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:50:36 AM]    393   3979.2 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:36 AM]    394   3979.2 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:50:36 AM]    395   3979.2 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:50:36 AM]    396   3979.2 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:50:36 AM]    397   3979.2 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:50:36 AM]    398   3979.2 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:50:36 AM]    399   3979.2 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:50:36 AM]    400   3979.2 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:50:36 AM]    401   3979.2 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:50:36 AM]    402   3979.2 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:50:36 AM]    403   3979.2 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:50:36 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:50:36 AM]    405   3979.2 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:50:36 AM]    406   3979.2 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:50:36 AM]    407   3979.2 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:50:36 AM]    408   3979.2 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:50:36 AM]    409   3979.2 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:50:36 AM]    410   3979.2 MiB      0.0 MiB           if len(B):

[09/23/2018 09:50:36 AM]    411   3979.2 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:50:36 AM]    412   3979.2 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:50:36 AM]    413   3979.2 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:50:36 AM]    414                                     else:

[09/23/2018 09:50:36 AM]    415                                         break

[09/23/2018 09:50:36 AM]    416   3979.2 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:50:36 AM]    417   3979.2 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:50:36 AM]    418   3979.2 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:50:36 AM] 


[09/23/2018 09:50:36 AM]  
[09/23/2018 09:50:36 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.223007000151, Path (3):
[09/23/2018 09:50:36 AM] [851870] -123 (0.04)-> [4568464] -123 (0.07)-> [2016524] -189 (0.11)-> [917821]

[09/23/2018 09:50:36 AM]  
[09/23/2018 09:50:36 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.127755595684, Path (3):
[09/23/2018 09:50:36 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.07)-> [917821]

[09/23/2018 09:50:36 AM]  
[09/23/2018 09:50:36 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.264946302339, Path (3):
[09/23/2018 09:50:36 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -189 (0.18)-> [917821]

[09/23/2018 09:50:36 AM]  
[09/23/2018 09:50:36 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.215151373218, Path (5):
[09/23/2018 09:50:36 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -65 (0.03)-> [5450691] -65 (0.04)-> [4448484] -189 (0.05)-> [917821]

[09/23/2018 09:50:36 AM]  
[09/23/2018 09:50:36 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.289964307411, Path (5):
[09/23/2018 09:50:36 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.04)-> [2932568] -121 (0.08)-> [1928825] -189 (0.11)-> [917821]

[09/23/2018 09:50:42 AM] Filename: streamminer2.py


[09/23/2018 09:50:42 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:50:42 AM] ================================================

[09/23/2018 09:50:42 AM]    365   3979.2 MiB   3979.2 MiB   @profile

[09/23/2018 09:50:42 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:50:42 AM]    367   3979.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:50:42 AM]    368   4002.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:42 AM]    369   4002.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:50:42 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:50:42 AM]    371   4002.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:50:42 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:50:42 AM]    373                                     'path': path_stack,

[09/23/2018 09:50:42 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:50:42 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:50:42 AM]    376                                 B = []

[09/23/2018 09:50:42 AM]    377                                 removed_edges = []

[09/23/2018 09:50:42 AM]    378                                 removed_nodes = []

[09/23/2018 09:50:42 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:50:42 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:50:42 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:50:42 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:50:42 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:50:42 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:50:42 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:50:42 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:50:42 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:50:42 AM]    388                                         for path_dict in A:

[09/23/2018 09:50:42 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:50:42 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:50:42 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:50:42 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:50:42 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:42 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:50:42 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:50:42 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:50:42 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:50:42 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:50:42 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:50:42 AM]    400                                                             'path': totalPath,

[09/23/2018 09:50:42 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:50:42 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:50:42 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:50:42 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:50:42 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:50:42 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:50:42 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:50:42 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:50:42 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:50:42 AM]    410                                     if len(B):

[09/23/2018 09:50:42 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:50:42 AM]    412                                         A.append(B[0])

[09/23/2018 09:50:42 AM]    413                                         B.pop(0)

[09/23/2018 09:50:42 AM]    414                                     else:

[09/23/2018 09:50:42 AM]    415                                         break

[09/23/2018 09:50:42 AM]    416                                 for path_dict in A:

[09/23/2018 09:50:42 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:50:42 AM]    418                                 return discovered_paths

[09/23/2018 09:50:42 AM] 


[09/23/2018 09:50:48 AM] Filename: streamminer2.py


[09/23/2018 09:50:48 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:50:48 AM] ================================================

[09/23/2018 09:50:48 AM]    365   4002.3 MiB   4002.3 MiB   @profile

[09/23/2018 09:50:48 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:50:48 AM]    367   4002.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:50:48 AM]    368   4025.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:48 AM]    369   4025.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:50:48 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:50:48 AM]    371   4025.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:50:48 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:50:48 AM]    373                                     'path': path_stack,

[09/23/2018 09:50:48 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:50:48 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:50:48 AM]    376                                 B = []

[09/23/2018 09:50:48 AM]    377                                 removed_edges = []

[09/23/2018 09:50:48 AM]    378                                 removed_nodes = []

[09/23/2018 09:50:48 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:50:48 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:50:48 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:50:48 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:50:48 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:50:48 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:50:48 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:50:48 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:50:48 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:50:48 AM]    388                                         for path_dict in A:

[09/23/2018 09:50:48 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:50:48 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:50:48 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:50:48 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:50:48 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:48 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:50:48 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:50:48 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:50:48 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:50:48 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:50:48 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:50:48 AM]    400                                                             'path': totalPath,

[09/23/2018 09:50:48 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:50:48 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:50:48 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:50:48 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:50:48 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:50:48 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:50:48 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:50:48 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:50:48 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:50:48 AM]    410                                     if len(B):

[09/23/2018 09:50:48 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:50:48 AM]    412                                         A.append(B[0])

[09/23/2018 09:50:48 AM]    413                                         B.pop(0)

[09/23/2018 09:50:48 AM]    414                                     else:

[09/23/2018 09:50:48 AM]    415                                         break

[09/23/2018 09:50:48 AM]    416                                 for path_dict in A:

[09/23/2018 09:50:48 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:50:48 AM]    418                                 return discovered_paths

[09/23/2018 09:50:48 AM] 


[09/23/2018 09:50:59 AM] Filename: streamminer2.py


[09/23/2018 09:50:59 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:50:59 AM] ================================================

[09/23/2018 09:50:59 AM]    365   4025.5 MiB   4025.5 MiB   @profile

[09/23/2018 09:50:59 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:50:59 AM]    367   4025.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:50:59 AM]    368   4048.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:59 AM]    369   4048.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:50:59 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:50:59 AM]    371   4048.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:50:59 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:50:59 AM]    373                                     'path': path_stack,

[09/23/2018 09:50:59 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:50:59 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:50:59 AM]    376                                 B = []

[09/23/2018 09:50:59 AM]    377                                 removed_edges = []

[09/23/2018 09:50:59 AM]    378                                 removed_nodes = []

[09/23/2018 09:50:59 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:50:59 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:50:59 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:50:59 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:50:59 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:50:59 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:50:59 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:50:59 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:50:59 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:50:59 AM]    388                                         for path_dict in A:

[09/23/2018 09:50:59 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:50:59 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:50:59 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:50:59 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:50:59 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:50:59 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:50:59 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:50:59 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:50:59 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:50:59 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:50:59 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:50:59 AM]    400                                                             'path': totalPath,

[09/23/2018 09:50:59 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:50:59 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:50:59 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:50:59 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:50:59 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:50:59 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:50:59 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:50:59 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:50:59 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:50:59 AM]    410                                     if len(B):

[09/23/2018 09:50:59 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:50:59 AM]    412                                         A.append(B[0])

[09/23/2018 09:50:59 AM]    413                                         B.pop(0)

[09/23/2018 09:50:59 AM]    414                                     else:

[09/23/2018 09:50:59 AM]    415                                         break

[09/23/2018 09:50:59 AM]    416                                 for path_dict in A:

[09/23/2018 09:50:59 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:50:59 AM]    418                                 return discovered_paths

[09/23/2018 09:50:59 AM] 


[09/23/2018 09:52:56 AM] Filename: streamminer2.py


[09/23/2018 09:52:56 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:52:56 AM] ================================================

[09/23/2018 09:52:56 AM]    365   4048.6 MiB   4048.6 MiB   @profile

[09/23/2018 09:52:56 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:52:56 AM]    367   4048.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:52:56 AM]    368   4071.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:52:56 AM]    369   4071.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:52:56 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:52:56 AM]    371                                     return discovered_paths

[09/23/2018 09:52:56 AM]    372   4071.7 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:52:56 AM]    373   4071.7 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:52:56 AM]    374   4071.7 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:52:56 AM]    375   4071.7 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:52:56 AM]    376   4071.7 MiB      0.0 MiB       B = []

[09/23/2018 09:52:56 AM]    377   4071.7 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:52:56 AM]    378   4071.7 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:52:56 AM]    379   4395.4 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:52:56 AM]    380   4395.4 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:52:56 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:52:56 AM]    382   4372.3 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:52:56 AM]    383   4372.3 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:52:56 AM]    384   4372.3 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:52:56 AM]    385   4372.3 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:52:56 AM]    386   4372.3 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:52:56 AM]    387   4372.3 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:52:56 AM]    388   4372.3 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:52:56 AM]    389   4372.3 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:52:56 AM]    390   4372.3 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:52:56 AM]    391   4372.3 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:52:56 AM]    392   4372.3 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:52:56 AM]    393   4395.4 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:52:56 AM]    394   4395.4 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:52:56 AM]    395   4395.4 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:52:56 AM]    396   4395.4 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:52:56 AM]    397   4395.4 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:52:56 AM]    398   4395.4 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:52:56 AM]    399   4395.4 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:52:56 AM]    400   4395.4 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:52:56 AM]    401   4395.4 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:52:56 AM]    402   4395.4 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:52:56 AM]    403   4395.4 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:52:56 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:52:56 AM]    405   4395.4 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:52:56 AM]    406   4395.4 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:52:56 AM]    407   4395.4 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:52:56 AM]    408   4395.4 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:52:56 AM]    409   4395.4 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:52:56 AM]    410   4395.4 MiB      0.0 MiB           if len(B):

[09/23/2018 09:52:56 AM]    411   4395.4 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:52:56 AM]    412   4395.4 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:52:56 AM]    413   4395.4 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:52:56 AM]    414                                     else:

[09/23/2018 09:52:56 AM]    415                                         break

[09/23/2018 09:52:56 AM]    416   4395.4 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:52:56 AM]    417   4395.4 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:52:56 AM]    418   4395.4 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:52:56 AM] 


[09/23/2018 09:52:56 AM]  
[09/23/2018 09:52:56 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.0670245276544, Path (1):
[09/23/2018 09:52:56 AM] [890343] -189 (0.07)-> [685564]

[09/23/2018 09:52:56 AM]  
[09/23/2018 09:52:56 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.208336131551, Path (3):
[09/23/2018 09:52:56 AM] [890343] -123 (0.04)-> [3038271] -123 (0.07)-> [4479600] -189 (0.1)-> [685564]

[09/23/2018 09:52:56 AM]  
[09/23/2018 09:52:56 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.225169354063, Path (5):
[09/23/2018 09:52:56 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -601 (0.04)-> [3038271] -123 (0.06)-> [4479600] -189 (0.07)-> [685564]

[09/23/2018 09:52:56 AM]  
[09/23/2018 09:52:56 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.200927292463, Path (5):
[09/23/2018 09:52:56 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -660 (0.03)-> [662] -660 (0.05)-> [2229114] -601 (0.06)-> [685564]

[09/23/2018 09:52:56 AM]  
[09/23/2018 09:52:56 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.253899643492, Path (3):
[09/23/2018 09:52:56 AM] [890343] -123 (0.04)-> [3038271] -123 (0.05)-> [1499330] -189 (0.17)-> [685564]

[09/23/2018 09:53:02 AM] Filename: streamminer2.py


[09/23/2018 09:53:02 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:53:02 AM] ================================================

[09/23/2018 09:53:02 AM]    365   4395.4 MiB   4395.4 MiB   @profile

[09/23/2018 09:53:02 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:53:02 AM]    367   4395.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:53:02 AM]    368   4418.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:53:02 AM]    369   4418.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:53:02 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:53:02 AM]    371   4418.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:53:02 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:53:02 AM]    373                                     'path': path_stack,

[09/23/2018 09:53:02 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:53:02 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:53:02 AM]    376                                 B = []

[09/23/2018 09:53:02 AM]    377                                 removed_edges = []

[09/23/2018 09:53:02 AM]    378                                 removed_nodes = []

[09/23/2018 09:53:02 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:53:02 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:53:02 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:53:02 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:53:02 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:53:02 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:53:02 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:53:02 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:53:02 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:53:02 AM]    388                                         for path_dict in A:

[09/23/2018 09:53:02 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:53:02 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:53:02 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:53:02 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:53:02 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:53:02 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:53:02 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:53:02 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:53:02 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:53:02 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:53:02 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:53:02 AM]    400                                                             'path': totalPath,

[09/23/2018 09:53:02 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:53:02 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:53:02 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:53:02 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:53:02 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:53:02 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:53:02 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:53:02 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:53:02 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:53:02 AM]    410                                     if len(B):

[09/23/2018 09:53:02 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:53:02 AM]    412                                         A.append(B[0])

[09/23/2018 09:53:02 AM]    413                                         B.pop(0)

[09/23/2018 09:53:02 AM]    414                                     else:

[09/23/2018 09:53:02 AM]    415                                         break

[09/23/2018 09:53:02 AM]    416                                 for path_dict in A:

[09/23/2018 09:53:02 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:53:02 AM]    418                                 return discovered_paths

[09/23/2018 09:53:02 AM] 


[09/23/2018 09:53:15 AM] Filename: streamminer2.py


[09/23/2018 09:53:15 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:53:15 AM] ================================================

[09/23/2018 09:53:15 AM]    365   4418.5 MiB   4418.5 MiB   @profile

[09/23/2018 09:53:15 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:53:15 AM]    367   4418.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:53:15 AM]    368   4441.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:53:15 AM]    369   4441.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:53:15 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:53:15 AM]    371   4441.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:53:15 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:53:15 AM]    373                                     'path': path_stack,

[09/23/2018 09:53:15 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:53:15 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:53:15 AM]    376                                 B = []

[09/23/2018 09:53:15 AM]    377                                 removed_edges = []

[09/23/2018 09:53:15 AM]    378                                 removed_nodes = []

[09/23/2018 09:53:15 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:53:15 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:53:15 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:53:15 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:53:15 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:53:15 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:53:15 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:53:15 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:53:15 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:53:15 AM]    388                                         for path_dict in A:

[09/23/2018 09:53:15 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:53:15 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:53:15 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:53:15 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:53:15 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:53:15 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:53:15 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:53:15 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:53:15 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:53:15 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:53:15 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:53:15 AM]    400                                                             'path': totalPath,

[09/23/2018 09:53:15 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:53:15 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:53:15 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:53:15 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:53:15 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:53:15 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:53:15 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:53:15 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:53:15 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:53:15 AM]    410                                     if len(B):

[09/23/2018 09:53:15 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:53:15 AM]    412                                         A.append(B[0])

[09/23/2018 09:53:15 AM]    413                                         B.pop(0)

[09/23/2018 09:53:15 AM]    414                                     else:

[09/23/2018 09:53:15 AM]    415                                         break

[09/23/2018 09:53:15 AM]    416                                 for path_dict in A:

[09/23/2018 09:53:15 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:53:15 AM]    418                                 return discovered_paths

[09/23/2018 09:53:15 AM] 


[09/23/2018 09:53:24 AM] Filename: streamminer2.py


[09/23/2018 09:53:24 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:53:24 AM] ================================================

[09/23/2018 09:53:24 AM]    365   4441.6 MiB   4441.6 MiB   @profile

[09/23/2018 09:53:24 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:53:24 AM]    367   4441.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:53:24 AM]    368   4464.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:53:24 AM]    369   4464.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:53:24 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:53:24 AM]    371   4464.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:53:24 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:53:24 AM]    373                                     'path': path_stack,

[09/23/2018 09:53:24 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:53:24 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:53:24 AM]    376                                 B = []

[09/23/2018 09:53:24 AM]    377                                 removed_edges = []

[09/23/2018 09:53:24 AM]    378                                 removed_nodes = []

[09/23/2018 09:53:24 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:53:24 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:53:24 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:53:24 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:53:24 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:53:24 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:53:24 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:53:24 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:53:24 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:53:24 AM]    388                                         for path_dict in A:

[09/23/2018 09:53:24 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:53:24 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:53:24 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:53:24 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:53:24 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:53:24 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:53:24 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:53:24 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:53:24 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:53:24 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:53:24 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:53:24 AM]    400                                                             'path': totalPath,

[09/23/2018 09:53:24 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:53:24 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:53:24 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:53:24 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:53:24 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:53:24 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:53:24 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:53:24 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:53:24 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:53:24 AM]    410                                     if len(B):

[09/23/2018 09:53:24 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:53:24 AM]    412                                         A.append(B[0])

[09/23/2018 09:53:24 AM]    413                                         B.pop(0)

[09/23/2018 09:53:24 AM]    414                                     else:

[09/23/2018 09:53:24 AM]    415                                         break

[09/23/2018 09:53:24 AM]    416                                 for path_dict in A:

[09/23/2018 09:53:24 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:53:24 AM]    418                                 return discovered_paths

[09/23/2018 09:53:24 AM] 


[09/23/2018 09:54:56 AM] Filename: streamminer2.py


[09/23/2018 09:54:56 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:54:56 AM] ================================================

[09/23/2018 09:54:56 AM]    365   4464.8 MiB   4464.8 MiB   @profile

[09/23/2018 09:54:56 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:54:56 AM]    367   4464.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:54:56 AM]    368   4487.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:54:56 AM]    369   4487.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:54:56 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:54:56 AM]    371                                     return discovered_paths

[09/23/2018 09:54:56 AM]    372   4487.9 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:54:56 AM]    373   4487.9 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:54:56 AM]    374   4487.9 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:54:56 AM]    375   4487.9 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:54:56 AM]    376   4487.9 MiB      0.0 MiB       B = []

[09/23/2018 09:54:56 AM]    377   4487.9 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:54:56 AM]    378   4487.9 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:54:56 AM]    379   4811.6 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:54:56 AM]    380   4811.6 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:54:56 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:54:56 AM]    382   4788.5 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:54:56 AM]    383   4788.5 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:54:56 AM]    384   4788.5 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:54:56 AM]    385   4788.5 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:54:56 AM]    386   4788.5 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:54:56 AM]    387   4788.5 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:54:56 AM]    388   4788.5 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:54:56 AM]    389   4788.5 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:54:56 AM]    390   4788.5 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:54:56 AM]    391   4788.5 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:54:56 AM]    392   4788.5 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:54:56 AM]    393   4811.6 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:54:56 AM]    394   4811.6 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:54:56 AM]    395   4811.6 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:54:56 AM]    396   4811.6 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:54:56 AM]    397   4811.6 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:54:56 AM]    398   4811.6 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:54:56 AM]    399   4811.6 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:54:56 AM]    400   4811.6 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:54:56 AM]    401   4811.6 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:54:56 AM]    402   4811.6 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:54:56 AM]    403   4811.6 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:54:56 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:54:56 AM]    405   4811.6 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:54:56 AM]    406   4811.6 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:54:56 AM]    407   4811.6 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:54:56 AM]    408   4811.6 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:54:56 AM]    409   4811.6 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:54:56 AM]    410   4811.6 MiB      0.0 MiB           if len(B):

[09/23/2018 09:54:56 AM]    411   4811.6 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:54:56 AM]    412   4811.6 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:54:56 AM]    413   4811.6 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:54:56 AM]    414                                     else:

[09/23/2018 09:54:56 AM]    415                                         break

[09/23/2018 09:54:56 AM]    416   4811.6 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:54:56 AM]    417   4811.6 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:54:56 AM]    418   4811.6 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:54:56 AM] 


[09/23/2018 09:54:56 AM]  
[09/23/2018 09:54:56 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.0709806674345, Path (1):
[09/23/2018 09:54:56 AM] [1029025] -189 (0.07)-> [2364618]

[09/23/2018 09:54:56 AM]  
[09/23/2018 09:54:56 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.324233084967, Path (5):
[09/23/2018 09:54:56 AM] [1029025] -123 (0.03)-> [3789441] -123 (0.04)-> [2678431] -462 (0.04)-> [4755814] -462 (0.08)-> [2249904] -189 (0.13)-> [2364618]

[09/23/2018 09:54:56 AM]  
[09/23/2018 09:54:56 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.0859695116702, Path (3):
[09/23/2018 09:54:56 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [2364618]

[09/23/2018 09:54:56 AM]  
[09/23/2018 09:54:56 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.224579024521, Path (5):
[09/23/2018 09:54:56 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -601 (0.06)-> [2287973] -601 (0.08)-> [2364618]

[09/23/2018 09:54:56 AM]  
[09/23/2018 09:54:56 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.199346583418, Path (5):
[09/23/2018 09:54:56 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -660 (0.04)-> [79] -660 (0.07)-> [2364618]

[09/23/2018 09:55:02 AM] Filename: streamminer2.py


[09/23/2018 09:55:02 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:55:02 AM] ================================================

[09/23/2018 09:55:02 AM]    365   4811.6 MiB   4811.6 MiB   @profile

[09/23/2018 09:55:02 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:55:02 AM]    367   4811.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:55:02 AM]    368   4834.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:55:02 AM]    369   4834.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:55:02 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:55:02 AM]    371   4834.7 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:55:02 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:55:02 AM]    373                                     'path': path_stack,

[09/23/2018 09:55:02 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:55:02 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:55:02 AM]    376                                 B = []

[09/23/2018 09:55:02 AM]    377                                 removed_edges = []

[09/23/2018 09:55:02 AM]    378                                 removed_nodes = []

[09/23/2018 09:55:02 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:55:02 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:55:02 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:55:02 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:55:02 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:55:02 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:55:02 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:55:02 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:55:02 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:55:02 AM]    388                                         for path_dict in A:

[09/23/2018 09:55:02 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:55:02 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:55:02 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:55:02 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:55:02 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:55:02 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:55:02 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:55:02 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:55:02 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:55:02 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:55:02 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:55:02 AM]    400                                                             'path': totalPath,

[09/23/2018 09:55:02 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:55:02 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:55:02 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:55:02 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:55:02 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:55:02 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:55:02 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:55:02 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:55:02 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:55:02 AM]    410                                     if len(B):

[09/23/2018 09:55:02 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:55:02 AM]    412                                         A.append(B[0])

[09/23/2018 09:55:02 AM]    413                                         B.pop(0)

[09/23/2018 09:55:02 AM]    414                                     else:

[09/23/2018 09:55:02 AM]    415                                         break

[09/23/2018 09:55:02 AM]    416                                 for path_dict in A:

[09/23/2018 09:55:02 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:55:02 AM]    418                                 return discovered_paths

[09/23/2018 09:55:02 AM] 


[09/23/2018 09:55:05 AM] Filename: streamminer2.py


[09/23/2018 09:55:05 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:55:05 AM] ================================================

[09/23/2018 09:55:05 AM]    365   4834.7 MiB   4834.7 MiB   @profile

[09/23/2018 09:55:05 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:55:05 AM]    367   4834.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:55:05 AM]    368   4857.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:55:05 AM]    369   4857.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:55:05 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:55:05 AM]    371   4857.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:55:05 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:55:05 AM]    373                                     'path': path_stack,

[09/23/2018 09:55:05 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:55:05 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:55:05 AM]    376                                 B = []

[09/23/2018 09:55:05 AM]    377                                 removed_edges = []

[09/23/2018 09:55:05 AM]    378                                 removed_nodes = []

[09/23/2018 09:55:05 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:55:05 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:55:05 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:55:05 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:55:05 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:55:05 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:55:05 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:55:05 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:55:05 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:55:05 AM]    388                                         for path_dict in A:

[09/23/2018 09:55:05 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:55:05 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:55:05 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:55:05 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:55:05 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:55:05 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:55:05 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:55:05 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:55:05 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:55:05 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:55:05 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:55:05 AM]    400                                                             'path': totalPath,

[09/23/2018 09:55:05 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:55:05 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:55:05 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:55:05 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:55:05 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:55:05 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:55:05 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:55:05 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:55:05 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:55:05 AM]    410                                     if len(B):

[09/23/2018 09:55:05 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:55:05 AM]    412                                         A.append(B[0])

[09/23/2018 09:55:05 AM]    413                                         B.pop(0)

[09/23/2018 09:55:05 AM]    414                                     else:

[09/23/2018 09:55:05 AM]    415                                         break

[09/23/2018 09:55:05 AM]    416                                 for path_dict in A:

[09/23/2018 09:55:05 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:55:05 AM]    418                                 return discovered_paths

[09/23/2018 09:55:05 AM] 


[09/23/2018 09:55:14 AM] Filename: streamminer2.py


[09/23/2018 09:55:14 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:55:14 AM] ================================================

[09/23/2018 09:55:14 AM]    365   4857.8 MiB   4857.8 MiB   @profile

[09/23/2018 09:55:14 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:55:14 AM]    367   4857.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:55:14 AM]    368   4880.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:55:14 AM]    369   4880.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:55:14 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:55:14 AM]    371   4880.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:55:14 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:55:14 AM]    373                                     'path': path_stack,

[09/23/2018 09:55:14 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:55:14 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:55:14 AM]    376                                 B = []

[09/23/2018 09:55:14 AM]    377                                 removed_edges = []

[09/23/2018 09:55:14 AM]    378                                 removed_nodes = []

[09/23/2018 09:55:14 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:55:14 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:55:14 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:55:14 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:55:14 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:55:14 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:55:14 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:55:14 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:55:14 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:55:14 AM]    388                                         for path_dict in A:

[09/23/2018 09:55:14 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:55:14 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:55:14 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:55:14 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:55:14 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:55:14 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:55:14 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:55:14 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:55:14 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:55:14 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:55:14 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:55:14 AM]    400                                                             'path': totalPath,

[09/23/2018 09:55:14 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:55:14 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:55:14 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:55:14 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:55:14 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:55:14 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:55:14 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:55:14 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:55:14 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:55:14 AM]    410                                     if len(B):

[09/23/2018 09:55:14 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:55:14 AM]    412                                         A.append(B[0])

[09/23/2018 09:55:14 AM]    413                                         B.pop(0)

[09/23/2018 09:55:14 AM]    414                                     else:

[09/23/2018 09:55:14 AM]    415                                         break

[09/23/2018 09:55:14 AM]    416                                 for path_dict in A:

[09/23/2018 09:55:14 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:55:14 AM]    418                                 return discovered_paths

[09/23/2018 09:55:14 AM] 


[09/23/2018 09:56:27 AM] Filename: streamminer2.py


[09/23/2018 09:56:27 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:56:27 AM] ================================================

[09/23/2018 09:56:27 AM]    365   4880.9 MiB   4880.9 MiB   @profile

[09/23/2018 09:56:27 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:56:27 AM]    367   4880.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:56:27 AM]    368   4904.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:27 AM]    369   4904.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:56:27 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:56:27 AM]    371                                     return discovered_paths

[09/23/2018 09:56:27 AM]    372   4904.1 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:56:27 AM]    373   4904.1 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:56:27 AM]    374   4904.1 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:56:27 AM]    375   4904.1 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:56:27 AM]    376   4904.1 MiB      0.0 MiB       B = []

[09/23/2018 09:56:27 AM]    377   4904.1 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:56:27 AM]    378   4904.1 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:56:27 AM]    379   5412.7 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:56:27 AM]    380   5412.7 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:56:27 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:56:27 AM]    382   5389.6 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:56:27 AM]    383   5389.6 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:56:27 AM]    384   5389.6 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:56:27 AM]    385   5389.6 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:56:27 AM]    386   5389.6 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:56:27 AM]    387   5389.6 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:56:27 AM]    388   5389.6 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:56:27 AM]    389   5389.6 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:56:27 AM]    390   5389.6 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:56:27 AM]    391   5389.6 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:56:27 AM]    392   5389.6 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:56:27 AM]    393   5412.7 MiB    508.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:27 AM]    394   5412.7 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:56:27 AM]    395   5412.7 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:56:27 AM]    396   5412.7 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:56:27 AM]    397   5412.7 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:56:27 AM]    398   5412.7 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:56:27 AM]    399   5412.7 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:56:27 AM]    400   5412.7 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:56:27 AM]    401   5412.7 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:56:27 AM]    402   5412.7 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:56:27 AM]    403   5412.7 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:56:27 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:56:27 AM]    405   5412.7 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:56:27 AM]    406   5412.7 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:56:27 AM]    407   5412.7 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:56:27 AM]    408   5412.7 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:56:27 AM]    409   5412.7 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:56:27 AM]    410   5412.7 MiB      0.0 MiB           if len(B):

[09/23/2018 09:56:27 AM]    411   5412.7 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:56:27 AM]    412   5412.7 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:56:27 AM]    413   5412.7 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:56:27 AM]    414                                     else:

[09/23/2018 09:56:27 AM]    415                                         break

[09/23/2018 09:56:27 AM]    416   5412.7 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:56:27 AM]    417   5412.7 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:56:27 AM]    418   5412.7 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:56:27 AM] 


[09/23/2018 09:56:27 AM]  
[09/23/2018 09:56:27 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.0732918175248, Path (1):
[09/23/2018 09:56:27 AM] [1397869] -189 (0.07)-> [5305646]

[09/23/2018 09:56:27 AM]  
[09/23/2018 09:56:27 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.302960177346, Path (5):
[09/23/2018 09:56:27 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -189 (0.18)-> [5305646]

[09/23/2018 09:56:27 AM]  
[09/23/2018 09:56:27 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.302236904099, Path (7):
[09/23/2018 09:56:27 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -189 (0.09)-> [5305646]

[09/23/2018 09:56:27 AM]  
[09/23/2018 09:56:27 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.402103069783, Path (9):
[09/23/2018 09:56:27 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -462 (0.04)-> [4704367] -462 (0.07)-> [2619928] -189 (0.08)-> [5305646]

[09/23/2018 09:56:27 AM]  
[09/23/2018 09:56:27 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.398263975535, Path (9):
[09/23/2018 09:56:27 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -329 (0.04)-> [3740468] -329 (0.06)-> [4243536] -121 (0.08)-> [5305646]

[09/23/2018 09:56:33 AM] Filename: streamminer2.py


[09/23/2018 09:56:33 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:56:33 AM] ================================================

[09/23/2018 09:56:33 AM]    365   5412.7 MiB   5412.7 MiB   @profile

[09/23/2018 09:56:33 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:56:33 AM]    367   5412.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:56:33 AM]    368   5435.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:33 AM]    369   5435.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:56:33 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:56:33 AM]    371   5435.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:56:33 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:56:33 AM]    373                                     'path': path_stack,

[09/23/2018 09:56:33 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:56:33 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:56:33 AM]    376                                 B = []

[09/23/2018 09:56:33 AM]    377                                 removed_edges = []

[09/23/2018 09:56:33 AM]    378                                 removed_nodes = []

[09/23/2018 09:56:33 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:56:33 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:56:33 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:56:33 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:56:33 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:56:33 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:56:33 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:56:33 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:56:33 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:56:33 AM]    388                                         for path_dict in A:

[09/23/2018 09:56:33 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:56:33 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:56:33 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:56:33 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:56:33 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:33 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:56:33 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:56:33 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:56:33 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:56:33 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:56:33 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:56:33 AM]    400                                                             'path': totalPath,

[09/23/2018 09:56:33 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:56:33 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:56:33 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:56:33 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:56:33 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:56:33 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:56:33 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:56:33 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:56:33 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:56:33 AM]    410                                     if len(B):

[09/23/2018 09:56:33 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:56:33 AM]    412                                         A.append(B[0])

[09/23/2018 09:56:33 AM]    413                                         B.pop(0)

[09/23/2018 09:56:33 AM]    414                                     else:

[09/23/2018 09:56:33 AM]    415                                         break

[09/23/2018 09:56:33 AM]    416                                 for path_dict in A:

[09/23/2018 09:56:33 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:56:33 AM]    418                                 return discovered_paths

[09/23/2018 09:56:33 AM] 


[09/23/2018 09:56:41 AM] Filename: streamminer2.py


[09/23/2018 09:56:41 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:56:41 AM] ================================================

[09/23/2018 09:56:41 AM]    365   5435.8 MiB   5435.8 MiB   @profile

[09/23/2018 09:56:41 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:56:41 AM]    367   5435.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:56:41 AM]    368   5459.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:41 AM]    369   5459.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:56:41 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:56:41 AM]    371   5459.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:56:41 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:56:41 AM]    373                                     'path': path_stack,

[09/23/2018 09:56:41 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:56:41 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:56:41 AM]    376                                 B = []

[09/23/2018 09:56:41 AM]    377                                 removed_edges = []

[09/23/2018 09:56:41 AM]    378                                 removed_nodes = []

[09/23/2018 09:56:41 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:56:41 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:56:41 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:56:41 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:56:41 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:56:41 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:56:41 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:56:41 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:56:41 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:56:41 AM]    388                                         for path_dict in A:

[09/23/2018 09:56:41 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:56:41 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:56:41 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:56:41 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:56:41 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:41 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:56:41 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:56:41 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:56:41 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:56:41 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:56:41 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:56:41 AM]    400                                                             'path': totalPath,

[09/23/2018 09:56:41 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:56:41 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:56:41 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:56:41 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:56:41 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:56:41 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:56:41 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:56:41 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:56:41 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:56:41 AM]    410                                     if len(B):

[09/23/2018 09:56:41 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:56:41 AM]    412                                         A.append(B[0])

[09/23/2018 09:56:41 AM]    413                                         B.pop(0)

[09/23/2018 09:56:41 AM]    414                                     else:

[09/23/2018 09:56:41 AM]    415                                         break

[09/23/2018 09:56:41 AM]    416                                 for path_dict in A:

[09/23/2018 09:56:41 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:56:41 AM]    418                                 return discovered_paths

[09/23/2018 09:56:41 AM] 


[09/23/2018 09:56:47 AM] Filename: streamminer2.py


[09/23/2018 09:56:47 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:56:47 AM] ================================================

[09/23/2018 09:56:47 AM]    365   5459.0 MiB   5459.0 MiB   @profile

[09/23/2018 09:56:47 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:56:47 AM]    367   5459.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:56:47 AM]    368   5482.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:47 AM]    369   5482.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:56:47 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:56:47 AM]    371   5482.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:56:47 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:56:47 AM]    373                                     'path': path_stack,

[09/23/2018 09:56:47 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:56:47 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:56:47 AM]    376                                 B = []

[09/23/2018 09:56:47 AM]    377                                 removed_edges = []

[09/23/2018 09:56:47 AM]    378                                 removed_nodes = []

[09/23/2018 09:56:47 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:56:47 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:56:47 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:56:47 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:56:47 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:56:47 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:56:47 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:56:47 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:56:47 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:56:47 AM]    388                                         for path_dict in A:

[09/23/2018 09:56:47 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:56:47 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:56:47 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:56:47 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:56:47 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:56:47 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:56:47 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:56:47 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:56:47 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:56:47 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:56:47 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:56:47 AM]    400                                                             'path': totalPath,

[09/23/2018 09:56:47 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:56:47 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:56:47 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:56:47 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:56:47 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:56:47 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:56:47 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:56:47 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:56:47 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:56:47 AM]    410                                     if len(B):

[09/23/2018 09:56:47 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:56:47 AM]    412                                         A.append(B[0])

[09/23/2018 09:56:47 AM]    413                                         B.pop(0)

[09/23/2018 09:56:47 AM]    414                                     else:

[09/23/2018 09:56:47 AM]    415                                         break

[09/23/2018 09:56:47 AM]    416                                 for path_dict in A:

[09/23/2018 09:56:47 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:56:47 AM]    418                                 return discovered_paths

[09/23/2018 09:56:47 AM] 


[09/23/2018 09:59:40 AM] Filename: streamminer2.py


[09/23/2018 09:59:40 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:59:40 AM] ================================================

[09/23/2018 09:59:40 AM]    365   5482.1 MiB   5482.1 MiB   @profile

[09/23/2018 09:59:40 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:59:40 AM]    367   5482.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:59:40 AM]    368   5505.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:59:40 AM]    369   5505.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:59:40 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:59:40 AM]    371                                     return discovered_paths

[09/23/2018 09:59:40 AM]    372   5505.2 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:59:40 AM]    373   5505.2 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 09:59:40 AM]    374   5505.2 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 09:59:40 AM]    375   5505.2 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 09:59:40 AM]    376   5505.2 MiB      0.0 MiB       B = []

[09/23/2018 09:59:40 AM]    377   5505.2 MiB      0.0 MiB       removed_edges = []

[09/23/2018 09:59:40 AM]    378   5505.2 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 09:59:40 AM]    379   6013.9 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:59:40 AM]    380   6013.9 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:59:40 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:59:40 AM]    382   5990.8 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 09:59:40 AM]    383   5990.8 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:59:40 AM]    384   5990.8 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:59:40 AM]    385   5990.8 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:59:40 AM]    386   5990.8 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 09:59:40 AM]    387   5990.8 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 09:59:40 AM]    388   5990.8 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 09:59:40 AM]    389   5990.8 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:59:40 AM]    390   5990.8 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:59:40 AM]    391   5990.8 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 09:59:40 AM]    392   5990.8 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:59:40 AM]    393   6013.9 MiB    508.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:59:40 AM]    394   6013.9 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 09:59:40 AM]    395   6013.9 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:59:40 AM]    396   6013.9 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:59:40 AM]    397   6013.9 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:59:40 AM]    398   6013.9 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:59:40 AM]    399   6013.9 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:59:40 AM]    400   6013.9 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 09:59:40 AM]    401   6013.9 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 09:59:40 AM]    402   6013.9 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 09:59:40 AM]    403   6013.9 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 09:59:40 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:59:40 AM]    405   6013.9 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 09:59:40 AM]    406   6013.9 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 09:59:40 AM]    407   6013.9 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:59:40 AM]    408   6013.9 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 09:59:40 AM]    409   6013.9 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:59:40 AM]    410   6013.9 MiB      0.0 MiB           if len(B):

[09/23/2018 09:59:40 AM]    411   6013.9 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 09:59:40 AM]    412   6013.9 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 09:59:40 AM]    413   6013.9 MiB      0.0 MiB               B.pop(0)

[09/23/2018 09:59:40 AM]    414                                     else:

[09/23/2018 09:59:40 AM]    415                                         break

[09/23/2018 09:59:40 AM]    416   6013.9 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 09:59:40 AM]    417   6013.9 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:59:40 AM]    418   6013.9 MiB      0.0 MiB       return discovered_paths

[09/23/2018 09:59:40 AM] 


[09/23/2018 09:59:40 AM]  
[09/23/2018 09:59:40 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.3767466941, Path (5):
[09/23/2018 09:59:40 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -329 (0.05)-> [3148940] -329 (0.09)-> [5651172] -189 (0.18)-> [4567127]

[09/23/2018 09:59:40 AM]  
[09/23/2018 09:59:40 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.235878581379, Path (5):
[09/23/2018 09:59:40 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.04)-> [3640344] -65 (0.06)-> [5492355] -189 (0.09)-> [4567127]

[09/23/2018 09:59:40 AM]  
[09/23/2018 09:59:40 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.192672051272, Path (5):
[09/23/2018 09:59:40 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -189 (0.06)-> [4567127]

[09/23/2018 09:59:40 AM]  
[09/23/2018 09:59:40 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.258765654105, Path (7):
[09/23/2018 09:59:40 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -65 (0.03)-> [917573] -65 (0.05)-> [1059235] -189 (0.06)-> [4567127]

[09/23/2018 09:59:40 AM]  
[09/23/2018 09:59:40 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.289525100991, Path (7):
[09/23/2018 09:59:40 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -65 (0.02)-> [1354392] -65 (0.03)-> [678457] -189 (0.04)-> [4567129] -601 (0.06)-> [290262] -601 (0.08)-> [4567127]

[09/23/2018 09:59:47 AM] Filename: streamminer2.py


[09/23/2018 09:59:47 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 09:59:47 AM] ================================================

[09/23/2018 09:59:47 AM]    365   6013.9 MiB   6013.9 MiB   @profile

[09/23/2018 09:59:47 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 09:59:47 AM]    367   6013.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 09:59:47 AM]    368   6037.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:59:47 AM]    369   6037.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 09:59:47 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 09:59:47 AM]    371   6037.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 09:59:47 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 09:59:47 AM]    373                                     'path': path_stack,

[09/23/2018 09:59:47 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 09:59:47 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 09:59:47 AM]    376                                 B = []

[09/23/2018 09:59:47 AM]    377                                 removed_edges = []

[09/23/2018 09:59:47 AM]    378                                 removed_nodes = []

[09/23/2018 09:59:47 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 09:59:47 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 09:59:47 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 09:59:47 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 09:59:47 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 09:59:47 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 09:59:47 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 09:59:47 AM]    386                                         removed_edges[:] = []

[09/23/2018 09:59:47 AM]    387                                         removed_nodes[:] = []

[09/23/2018 09:59:47 AM]    388                                         for path_dict in A:

[09/23/2018 09:59:47 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 09:59:47 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 09:59:47 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 09:59:47 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 09:59:47 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 09:59:47 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 09:59:47 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 09:59:47 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 09:59:47 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 09:59:47 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 09:59:47 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 09:59:47 AM]    400                                                             'path': totalPath,

[09/23/2018 09:59:47 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 09:59:47 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 09:59:47 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 09:59:47 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 09:59:47 AM]    405                                                 B.append(potential_k)

[09/23/2018 09:59:47 AM]    406                                         removed_nodes.reverse()

[09/23/2018 09:59:47 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 09:59:47 AM]    408                                         removed_edges.reverse()

[09/23/2018 09:59:47 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 09:59:47 AM]    410                                     if len(B):

[09/23/2018 09:59:47 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 09:59:47 AM]    412                                         A.append(B[0])

[09/23/2018 09:59:47 AM]    413                                         B.pop(0)

[09/23/2018 09:59:47 AM]    414                                     else:

[09/23/2018 09:59:47 AM]    415                                         break

[09/23/2018 09:59:47 AM]    416                                 for path_dict in A:

[09/23/2018 09:59:47 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 09:59:47 AM]    418                                 return discovered_paths

[09/23/2018 09:59:47 AM] 


[09/23/2018 10:00:01 AM] Filename: streamminer2.py


[09/23/2018 10:00:01 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 10:00:01 AM] ================================================

[09/23/2018 10:00:01 AM]    365   6037.0 MiB   6037.0 MiB   @profile

[09/23/2018 10:00:01 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 10:00:01 AM]    367   6037.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 10:00:01 AM]    368   6060.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 10:00:01 AM]    369   6060.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 10:00:01 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 10:00:01 AM]    371   6060.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 10:00:01 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 10:00:01 AM]    373                                     'path': path_stack,

[09/23/2018 10:00:01 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 10:00:01 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 10:00:01 AM]    376                                 B = []

[09/23/2018 10:00:01 AM]    377                                 removed_edges = []

[09/23/2018 10:00:01 AM]    378                                 removed_nodes = []

[09/23/2018 10:00:01 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 10:00:01 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 10:00:01 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 10:00:01 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 10:00:01 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 10:00:01 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 10:00:01 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 10:00:01 AM]    386                                         removed_edges[:] = []

[09/23/2018 10:00:01 AM]    387                                         removed_nodes[:] = []

[09/23/2018 10:00:01 AM]    388                                         for path_dict in A:

[09/23/2018 10:00:01 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 10:00:01 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 10:00:01 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 10:00:01 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 10:00:01 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 10:00:01 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 10:00:01 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 10:00:01 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 10:00:01 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 10:00:01 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 10:00:01 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 10:00:01 AM]    400                                                             'path': totalPath,

[09/23/2018 10:00:01 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 10:00:01 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 10:00:01 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 10:00:01 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 10:00:01 AM]    405                                                 B.append(potential_k)

[09/23/2018 10:00:01 AM]    406                                         removed_nodes.reverse()

[09/23/2018 10:00:01 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 10:00:01 AM]    408                                         removed_edges.reverse()

[09/23/2018 10:00:01 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 10:00:01 AM]    410                                     if len(B):

[09/23/2018 10:00:01 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 10:00:01 AM]    412                                         A.append(B[0])

[09/23/2018 10:00:01 AM]    413                                         B.pop(0)

[09/23/2018 10:00:01 AM]    414                                     else:

[09/23/2018 10:00:01 AM]    415                                         break

[09/23/2018 10:00:01 AM]    416                                 for path_dict in A:

[09/23/2018 10:00:01 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 10:00:01 AM]    418                                 return discovered_paths

[09/23/2018 10:00:01 AM] 


[09/23/2018 10:00:06 AM] Filename: streamminer2.py


[09/23/2018 10:00:06 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 10:00:06 AM] ================================================

[09/23/2018 10:00:06 AM]    365   6060.1 MiB   6060.1 MiB   @profile

[09/23/2018 10:00:06 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 10:00:06 AM]    367   6060.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 10:00:06 AM]    368   6083.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 10:00:06 AM]    369   6083.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 10:00:06 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 10:00:06 AM]    371   6083.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 10:00:06 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 10:00:06 AM]    373                                     'path': path_stack,

[09/23/2018 10:00:06 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 10:00:06 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 10:00:06 AM]    376                                 B = []

[09/23/2018 10:00:06 AM]    377                                 removed_edges = []

[09/23/2018 10:00:06 AM]    378                                 removed_nodes = []

[09/23/2018 10:00:06 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 10:00:06 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 10:00:06 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 10:00:06 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 10:00:06 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 10:00:06 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 10:00:06 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 10:00:06 AM]    386                                         removed_edges[:] = []

[09/23/2018 10:00:06 AM]    387                                         removed_nodes[:] = []

[09/23/2018 10:00:06 AM]    388                                         for path_dict in A:

[09/23/2018 10:00:06 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 10:00:06 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 10:00:06 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 10:00:06 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 10:00:06 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 10:00:06 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 10:00:06 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 10:00:06 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 10:00:06 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 10:00:06 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 10:00:06 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 10:00:06 AM]    400                                                             'path': totalPath,

[09/23/2018 10:00:06 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 10:00:06 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 10:00:06 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 10:00:06 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 10:00:06 AM]    405                                                 B.append(potential_k)

[09/23/2018 10:00:06 AM]    406                                         removed_nodes.reverse()

[09/23/2018 10:00:06 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 10:00:06 AM]    408                                         removed_edges.reverse()

[09/23/2018 10:00:06 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 10:00:06 AM]    410                                     if len(B):

[09/23/2018 10:00:06 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 10:00:06 AM]    412                                         A.append(B[0])

[09/23/2018 10:00:06 AM]    413                                         B.pop(0)

[09/23/2018 10:00:06 AM]    414                                     else:

[09/23/2018 10:00:06 AM]    415                                         break

[09/23/2018 10:00:06 AM]    416                                 for path_dict in A:

[09/23/2018 10:00:06 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 10:00:06 AM]    418                                 return discovered_paths

[09/23/2018 10:00:06 AM] 



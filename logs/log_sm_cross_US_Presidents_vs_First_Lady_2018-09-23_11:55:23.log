[09/23/2018 11:55:23 AM] Launching sm..
[09/23/2018 11:55:23 AM] Dataset: cross_US_Presidents_vs_First_Lady.csv
[09/23/2018 11:55:23 AM] Output dir: /home/galois/Documents/streamminer/output
[09/23/2018 11:55:23 AM] Read data: (256, 7) cross_US_Presidents_vs_First_Lady.csv
[09/23/2018 11:55:23 AM] Note: Found non-NA records: (256, 7)
[09/23/2018 11:55:23 AM] Reconstructing graph from /home/galois/Documents/streamminer/data/kg/_undir
[09/23/2018 11:55:23 AM] 

[09/23/2018 11:55:24 AM] => Loaded: undir_data.npy
[09/23/2018 11:55:24 AM] 

[09/23/2018 11:55:24 AM] => Loaded: undir_indptr.npy
[09/23/2018 11:55:24 AM] 

[09/23/2018 11:55:26 AM] => Loaded: undir_indices.npy
[09/23/2018 11:55:26 AM] 

[09/23/2018 11:55:26 AM] => Loaded: undir_indeg_vec.npy
[09/23/2018 11:55:26 AM] 

[09/23/2018 11:55:26 AM] => Graph loaded: 3.40 secs.

[09/23/2018 11:55:26 AM] 

[09/23/2018 11:55:26 AM] PID is: 578, with type: int64
[09/23/2018 11:55:34 AM] => Path extraction..(this can take a while)
[09/23/2018 11:56:17 AM] SPO: [ 5448341 578 1882304], Score: 0.219189839286, Path (1):
[09/23/2018 11:56:17 AM] [5448341] -468 (0.22)-> [1882304]

[09/23/2018 11:56:17 AM]  
[09/23/2018 11:56:17 AM] SPO: [ 5448341 578 1882304], Score: 0.284929823438, Path (2):
[09/23/2018 11:56:17 AM] [5448341] -468 (0.1)-> [2134565] -465 (0.18)-> [1882304]

[09/23/2018 11:56:17 AM]  
[09/23/2018 11:56:17 AM] SPO: [ 5448341 578 1882304], Score: 0.169746841112, Path (2):
[09/23/2018 11:56:17 AM] [5448341] -512 (0.07)-> [3384409] -65 (0.1)-> [1882304]

[09/23/2018 11:56:17 AM]  
[09/23/2018 11:56:17 AM] SPO: [ 5448341 578 1882304], Score: 0.377191762575, Path (4):
[09/23/2018 11:56:17 AM] [5448341] -512 (0.07)-> [3384409] -65 (0.04)-> [4389976] -65 (0.05)-> [3886197] -65 (0.21)-> [1882304]

[09/23/2018 11:56:17 AM]  
[09/23/2018 11:56:17 AM] SPO: [ 5448341 578 1882304], Score: 0.195977131421, Path (4):
[09/23/2018 11:56:17 AM] [5448341] -512 (0.07)-> [3384409] -65 (0.04)-> [4389976] -394 (0.04)-> [5287545] -65 (0.05)-> [1882304]

[09/23/2018 11:56:58 AM]  
[09/23/2018 11:56:58 AM] SPO: [ 1028826 578 2134565], Score: 0.182822889927, Path (1):
[09/23/2018 11:56:58 AM] [1028826] -468 (0.18)-> [2134565]

[09/23/2018 11:56:58 AM]  
[09/23/2018 11:56:58 AM] SPO: [ 1028826 578 2134565], Score: 0.428975451692, Path (2):
[09/23/2018 11:56:58 AM] [1028826] -111 (0.15)-> [2699244] -111 (0.28)-> [2134565]

[09/23/2018 11:56:58 AM]  
[09/23/2018 11:56:58 AM] SPO: [ 1028826 578 2134565], Score: 0.303982435114, Path (2):
[09/23/2018 11:56:58 AM] [1028826] -468 (0.1)-> [1068550] -465 (0.21)-> [2134565]

[09/23/2018 11:56:58 AM]  
[09/23/2018 11:56:58 AM] SPO: [ 1028826 578 2134565], Score: 0.249799063338, Path (4):
[09/23/2018 11:56:58 AM] [1028826] -468 (0.1)-> [1068550] -65 (0.04)-> [3886197] -65 (0.05)-> [1882304] -465 (0.06)-> [2134565]

[09/23/2018 11:56:58 AM]  
[09/23/2018 11:56:58 AM] SPO: [ 1028826 578 2134565], Score: 0.181144761613, Path (3):
[09/23/2018 11:56:58 AM] [1028826] -468 (0.1)-> [1068550] -65 (0.04)-> [5287545] -65 (0.05)-> [2134565]

[09/23/2018 11:58:29 AM]  
[09/23/2018 11:58:29 AM] SPO: [ 2306951 578 3221941], Score: 0.623368349173, Path (2):
[09/23/2018 11:58:29 AM] [2306951] -111 (0.18)-> [479803] -111 (0.44)-> [3221941]

[09/23/2018 11:58:29 AM]  
[09/23/2018 11:58:29 AM] SPO: [ 2306951 578 3221941], Score: 0.180136805652, Path (1):
[09/23/2018 11:58:29 AM] [2306951] -468 (0.18)-> [3221941]

[09/23/2018 11:58:29 AM]  
[09/23/2018 11:58:29 AM] SPO: [ 2306951 578 3221941], Score: 0.310091104709, Path (5):
[09/23/2018 11:58:29 AM] [2306951] -111 (0.18)-> [479803] -660 (0.03)-> [502] -660 (0.03)-> [2699244] -111 (0.03)-> [2134565] -465 (0.04)-> [3221941]

[09/23/2018 11:58:29 AM]  
[09/23/2018 11:58:29 AM] SPO: [ 2306951 578 3221941], Score: 0.368936779754, Path (6):
[09/23/2018 11:58:29 AM] [2306951] -111 (0.18)-> [479803] -660 (0.03)-> [502] -660 (0.03)-> [2699244] -111 (0.03)-> [2134565] -441 (0.04)-> [4334898] -441 (0.06)-> [3221941]

[09/23/2018 11:58:29 AM]  
[09/23/2018 11:58:29 AM] SPO: [ 2306951 578 3221941], Score: 0.458706269012, Path (6):
[09/23/2018 11:58:29 AM] [2306951] -111 (0.18)-> [479803] -660 (0.03)-> [502] -660 (0.03)-> [2699244] -65 (0.05)-> [3849050] -167 (0.07)-> [2134565] -465 (0.11)-> [3221941]

[09/23/2018 11:59:09 AM]  
[09/23/2018 11:59:09 AM] SPO: [ 1932374 578 1665478], Score: 0.149459833234, Path (1):
[09/23/2018 11:59:09 AM] [1932374] -468 (0.15)-> [1665478]

[09/23/2018 11:59:09 AM]  
[09/23/2018 11:59:09 AM] SPO: [ 1932374 578 1665478], Score: 0.472385986271, Path (2):
[09/23/2018 11:59:09 AM] [1932374] -111 (0.14)-> [577678] -111 (0.33)-> [1665478]

[09/23/2018 11:59:09 AM]  
[09/23/2018 11:59:09 AM] SPO: [ 1932374 578 1665478], Score: 0.401346056343, Path (2):
[09/23/2018 11:59:09 AM] [1932374] -111 (0.13)-> [2691153] -111 (0.27)-> [1665478]

[09/23/2018 11:59:09 AM]  
[09/23/2018 11:59:09 AM] SPO: [ 1932374 578 1665478], Score: 0.511818095313, Path (3):
[09/23/2018 11:59:09 AM] [1932374] -111 (0.13)-> [2691153] -506 (0.13)-> [576537] -111 (0.26)-> [1665478]

[09/23/2018 11:59:09 AM]  
[09/23/2018 11:59:09 AM] SPO: [ 1932374 578 1665478], Score: 0.391408827174, Path (4):
[09/23/2018 11:59:09 AM] [1932374] -111 (0.13)-> [2691153] -65 (0.05)-> [2388881] -167 (0.08)-> [3215039] -311 (0.13)-> [1665478]

[09/23/2018 11:59:56 AM]  
[09/23/2018 11:59:56 AM] SPO: [ 2254632 578 828702], Score: 0.185760811174, Path (1):
[09/23/2018 11:59:56 AM] [2254632] -468 (0.19)-> [828702]

[09/23/2018 11:59:56 AM]  
[09/23/2018 11:59:56 AM] SPO: [ 2254632 578 828702], Score: 0.411461708767, Path (2):
[09/23/2018 11:59:56 AM] [2254632] -111 (0.15)-> [3366595] -111 (0.27)-> [828702]

[09/23/2018 11:59:56 AM]  
[09/23/2018 11:59:56 AM] SPO: [ 2254632 578 828702], Score: 0.3903305288, Path (2):
[09/23/2018 11:59:56 AM] [2254632] -506 (0.14)-> [1232931] -506 (0.25)-> [828702]

[09/23/2018 11:59:56 AM]  
[09/23/2018 11:59:56 AM] SPO: [ 2254632 578 828702], Score: 0.832313317312, Path (4):
[09/23/2018 11:59:56 AM] [2254632] -506 (0.14)-> [1232931] -111 (0.12)-> [1233086] -111 (0.19)-> [3366595] -111 (0.39)-> [828702]

[09/23/2018 11:59:56 AM]  
[09/23/2018 11:59:56 AM] SPO: [ 2254632 578 828702], Score: 0.222599686448, Path (3):
[09/23/2018 11:59:56 AM] [2254632] -506 (0.14)-> [1232931] -65 (0.04)-> [5287545] -65 (0.05)-> [828702]

[09/23/2018 12:00:44 PM]  
[09/23/2018 12:00:44 PM] SPO: [ 1596457 578 3324601], Score: 0.175386911157, Path (1):
[09/23/2018 12:00:44 PM] [1596457] -468 (0.18)-> [3324601]

[09/23/2018 12:00:44 PM]  
[09/23/2018 12:00:44 PM] SPO: [ 1596457 578 3324601], Score: 0.415184350691, Path (2):
[09/23/2018 12:00:44 PM] [1596457] -111 (0.14)-> [1564219] -111 (0.27)-> [3324601]

[09/23/2018 12:00:44 PM]  
[09/23/2018 12:00:44 PM] SPO: [ 1596457 578 3324601], Score: 0.293702332568, Path (4):
[09/23/2018 12:00:44 PM] [1596457] -111 (0.14)-> [1564219] -167 (0.04)-> [3428818] -167 (0.05)-> [2703835] -111 (0.06)-> [3324601]

[09/23/2018 12:00:44 PM]  
[09/23/2018 12:00:44 PM] SPO: [ 1596457 578 3324601], Score: 0.226033396202, Path (3):
[09/23/2018 12:00:44 PM] [1596457] -111 (0.14)-> [1564219] -65 (0.04)-> [5287545] -65 (0.05)-> [3324601]

[09/23/2018 12:00:44 PM]  
[09/23/2018 12:00:44 PM] SPO: [ 1596457 578 3324601], Score: 0.401483767305, Path (2):
[09/23/2018 12:00:44 PM] [1596457] -506 (0.14)-> [3426522] -506 (0.26)-> [3324601]

[09/23/2018 12:01:21 PM]  
[09/23/2018 12:01:21 PM] SPO: [ 2704714 578 2535021], Score: 0.153840964907, Path (1):
[09/23/2018 12:01:21 PM] [2704714] -468 (0.15)-> [2535021]

[09/23/2018 12:01:21 PM]  
[09/23/2018 12:01:21 PM] SPO: [ 2704714 578 2535021], Score: 0.4381945203, Path (2):
[09/23/2018 12:01:21 PM] [2704714] -111 (0.14)-> [4017705] -111 (0.3)-> [2535021]

[09/23/2018 12:01:21 PM]  
[09/23/2018 12:01:21 PM] SPO: [ 2704714 578 2535021], Score: 0.403222258149, Path (2):
[09/23/2018 12:01:21 PM] [2704714] -580 (0.13)-> [297609] -580 (0.28)-> [2535021]

[09/23/2018 12:01:21 PM]  
[09/23/2018 12:01:21 PM] SPO: [ 2704714 578 2535021], Score: 0.49856832454, Path (3):
[09/23/2018 12:01:21 PM] [2704714] -111 (0.14)-> [4017705] -111 (0.12)-> [5145159] -111 (0.24)-> [2535021]

[09/23/2018 12:01:21 PM]  
[09/23/2018 12:01:21 PM] SPO: [ 2704714 578 2535021], Score: 0.464321024437, Path (6):
[09/23/2018 12:01:21 PM] [2704714] -111 (0.14)-> [4017705] -65 (0.03)-> [921354] -167 (0.03)-> [2121892] -65 (0.04)-> [3436140] -167 (0.09)-> [2704751] -111 (0.13)-> [2535021]

[09/23/2018 12:01:55 PM]  
[09/23/2018 12:01:55 PM] SPO: [ 3269303 578 3049283], Score: 0.17327117158, Path (1):
[09/23/2018 12:01:55 PM] [3269303] -468 (0.17)-> [3049283]

[09/23/2018 12:01:55 PM]  
[09/23/2018 12:01:55 PM] SPO: [ 3269303 578 3049283], Score: 0.405448002248, Path (2):
[09/23/2018 12:01:55 PM] [3269303] -111 (0.14)-> [3269103] -111 (0.27)-> [3049283]

[09/23/2018 12:01:55 PM]  
[09/23/2018 12:01:55 PM] SPO: [ 3269303 578 3049283], Score: 0.410085913604, Path (2):
[09/23/2018 12:01:55 PM] [3269303] -506 (0.14)-> [4552772] -506 (0.27)-> [3049283]

[09/23/2018 12:01:55 PM]  
[09/23/2018 12:01:55 PM] SPO: [ 3269303 578 3049283], Score: 0.533575080689, Path (3):
[09/23/2018 12:01:55 PM] [3269303] -506 (0.14)-> [4552772] -506 (0.14)-> [3269103] -111 (0.26)-> [3049283]

[09/23/2018 12:01:55 PM]  
[09/23/2018 12:01:55 PM] SPO: [ 3269303 578 3049283], Score: 0.530930618271, Path (3):
[09/23/2018 12:01:55 PM] [3269303] -506 (0.14)-> [4552772] -506 (0.14)-> [4562472] -506 (0.26)-> [3049283]

[09/23/2018 12:02:23 PM]  
[09/23/2018 12:02:23 PM] SPO: [ 4362186 578 4012613], Score: 0.160465232617, Path (1):
[09/23/2018 12:02:23 PM] [4362186] -468 (0.16)-> [4012613]

[09/23/2018 12:02:23 PM]  
[09/23/2018 12:02:23 PM] SPO: [ 4362186 578 4012613], Score: 0.388815902165, Path (2):
[09/23/2018 12:02:23 PM] [4362186] -111 (0.13)-> [2230084] -506 (0.26)-> [4012613]

[09/23/2018 12:02:23 PM]  
[09/23/2018 12:02:23 PM] SPO: [ 4362186 578 4012613], Score: 0.368414690866, Path (2):
[09/23/2018 12:02:23 PM] [4362186] -111 (0.13)-> [5220073] -111 (0.24)-> [4012613]

[09/23/2018 12:02:23 PM]  
[09/23/2018 12:02:23 PM] SPO: [ 4362186 578 4012613], Score: 0.505703113336, Path (3):
[09/23/2018 12:02:23 PM] [4362186] -111 (0.13)-> [5220073] -506 (0.13)-> [2230084] -506 (0.25)-> [4012613]

[09/23/2018 12:02:23 PM]  
[09/23/2018 12:02:23 PM] SPO: [ 4362186 578 4012613], Score: 0.499259242284, Path (3):
[09/23/2018 12:02:23 PM] [4362186] -111 (0.13)-> [5220073] -506 (0.13)-> [1553838] -506 (0.25)-> [4012613]

[09/23/2018 12:03:08 PM]  
[09/23/2018 12:03:08 PM] SPO: [ 2053187 578 832363], Score: 0.164580378817, Path (1):
[09/23/2018 12:03:08 PM] [2053187] -468 (0.16)-> [832363]

[09/23/2018 12:03:08 PM]  
[09/23/2018 12:03:08 PM] SPO: [ 2053187 578 832363], Score: 0.393528069277, Path (2):
[09/23/2018 12:03:08 PM] [2053187] -111 (0.13)-> [2707371] -111 (0.26)-> [832363]

[09/23/2018 12:03:08 PM]  
[09/23/2018 12:03:08 PM] SPO: [ 2053187 578 832363], Score: 0.398360295136, Path (2):
[09/23/2018 12:03:08 PM] [2053187] -111 (0.13)-> [1561397] -506 (0.27)-> [832363]

[09/23/2018 12:03:08 PM]  
[09/23/2018 12:03:08 PM] SPO: [ 2053187 578 832363], Score: 0.516092829122, Path (3):
[09/23/2018 12:03:08 PM] [2053187] -111 (0.13)-> [1561397] -506 (0.13)-> [2707371] -111 (0.25)-> [832363]

[09/23/2018 12:03:08 PM]  
[09/23/2018 12:03:08 PM] SPO: [ 2053187 578 832363], Score: 0.509552726921, Path (3):
[09/23/2018 12:03:08 PM] [2053187] -111 (0.13)-> [1561397] -506 (0.13)-> [3523524] -111 (0.25)-> [832363]

[09/23/2018 12:03:35 PM]  
[09/23/2018 12:03:35 PM] SPO: [ 2656334 578 4456257], Score: 0.175386911157, Path (1):
[09/23/2018 12:03:36 PM] [2656334] -468 (0.18)-> [4456257]

[09/23/2018 12:03:36 PM]  
[09/23/2018 12:03:36 PM] SPO: [ 2656334 578 4456257], Score: 0.449778739103, Path (2):
[09/23/2018 12:03:36 PM] [2656334] -580 (0.14)-> [3325798] -580 (0.31)-> [4456257]

[09/23/2018 12:03:36 PM]  
[09/23/2018 12:03:36 PM] SPO: [ 2656334 578 4456257], Score: 0.37315266058, Path (2):
[09/23/2018 12:03:36 PM] [2656334] -506 (0.13)-> [2374540] -506 (0.24)-> [4456257]

[09/23/2018 12:03:36 PM]  
[09/23/2018 12:03:36 PM] SPO: [ 2656334 578 4456257], Score: 0.484282057727, Path (3):
[09/23/2018 12:03:36 PM] [2656334] -506 (0.13)-> [2374540] -506 (0.13)-> [2521968] -111 (0.22)-> [4456257]

[09/23/2018 12:03:36 PM]  
[09/23/2018 12:03:36 PM] SPO: [ 2656334 578 4456257], Score: 0.480684248118, Path (3):
[09/23/2018 12:03:36 PM] [2656334] -506 (0.13)-> [2374540] -506 (0.13)-> [517066] -111 (0.22)-> [4456257]

[09/23/2018 12:04:06 PM]  
[09/23/2018 12:04:06 PM] SPO: [ 4450187 578 3724593], Score: 0.161765018162, Path (1):
[09/23/2018 12:04:06 PM] [4450187] -468 (0.16)-> [3724593]

[09/23/2018 12:04:06 PM]  
[09/23/2018 12:04:06 PM] SPO: [ 4450187 578 3724593], Score: 0.39960259111, Path (2):
[09/23/2018 12:04:06 PM] [4450187] -111 (0.13)-> [4024214] -111 (0.27)-> [3724593]

[09/23/2018 12:04:06 PM]  
[09/23/2018 12:04:06 PM] SPO: [ 4450187 578 3724593], Score: 0.356412502688, Path (2):
[09/23/2018 12:04:06 PM] [4450187] -111 (0.12)-> [4447853] -111 (0.23)-> [3724593]

[09/23/2018 12:04:06 PM]  
[09/23/2018 12:04:06 PM] SPO: [ 4450187 578 3724593], Score: 0.470568105147, Path (3):
[09/23/2018 12:04:06 PM] [4450187] -111 (0.13)-> [4024214] -505 (0.12)-> [4447853] -111 (0.22)-> [3724593]

[09/23/2018 12:04:06 PM]  
[09/23/2018 12:04:06 PM] SPO: [ 4450187 578 3724593], Score: 0.37723110227, Path (4):
[09/23/2018 12:04:06 PM] [4450187] -111 (0.13)-> [4024214] -394 (0.05)-> [1213741] -394 (0.08)-> [2103089] -465 (0.11)-> [3724593]

[09/23/2018 12:04:51 PM]  
[09/23/2018 12:04:51 PM] SPO: [ 2034183 578 753707], Score: 0.166110397736, Path (1):
[09/23/2018 12:04:51 PM] [2034183] -468 (0.17)-> [753707]

[09/23/2018 12:04:51 PM]  
[09/23/2018 12:04:51 PM] SPO: [ 2034183 578 753707], Score: 0.43177381908, Path (2):
[09/23/2018 12:04:51 PM] [2034183] -111 (0.14)-> [3423273] -111 (0.29)-> [753707]

[09/23/2018 12:04:51 PM]  
[09/23/2018 12:04:51 PM] SPO: [ 2034183 578 753707], Score: 0.387569840701, Path (2):
[09/23/2018 12:04:51 PM] [2034183] -111 (0.13)-> [3757505] -111 (0.25)-> [753707]

[09/23/2018 12:04:51 PM]  
[09/23/2018 12:04:51 PM] SPO: [ 2034183 578 753707], Score: 0.504838487515, Path (3):
[09/23/2018 12:04:51 PM] [2034183] -111 (0.13)-> [3757505] -506 (0.13)-> [1561464] -111 (0.24)-> [753707]

[09/23/2018 12:04:51 PM]  
[09/23/2018 12:04:51 PM] SPO: [ 2034183 578 753707], Score: 0.513919040945, Path (3):
[09/23/2018 12:04:51 PM] [2034183] -111 (0.14)-> [3423273] -506 (0.13)-> [1561464] -111 (0.24)-> [753707]

[09/23/2018 12:05:41 PM]  
[09/23/2018 12:05:41 PM] SPO: [ 847325 578 2327072], Score: 0.442250521143, Path (2):
[09/23/2018 12:05:41 PM] [847325] -111 (0.13)-> [2618700] -506 (0.31)-> [2327072]

[09/23/2018 12:05:41 PM]  
[09/23/2018 12:05:41 PM] SPO: [ 847325 578 2327072], Score: 0.426303555656, Path (2):
[09/23/2018 12:05:41 PM] [847325] -111 (0.13)-> [4427454] -506 (0.3)-> [2327072]

[09/23/2018 12:05:41 PM]  
[09/23/2018 12:05:41 PM] SPO: [ 847325 578 2327072], Score: 0.442828654667, Path (3):
[09/23/2018 12:05:41 PM] [847325] -111 (0.13)-> [4427454] -506 (0.11)-> [1145438] -111 (0.21)-> [2327072]

[09/23/2018 12:05:41 PM]  
[09/23/2018 12:05:41 PM] SPO: [ 847325 578 2327072], Score: 0.445161395593, Path (3):
[09/23/2018 12:05:41 PM] [847325] -111 (0.13)-> [2618700] -506 (0.11)-> [1145438] -111 (0.21)-> [2327072]

[09/23/2018 12:05:41 PM]  
[09/23/2018 12:05:41 PM] SPO: [ 847325 578 2327072], Score: 0.513876011788, Path (4):
[09/23/2018 12:05:41 PM] [847325] -111 (0.13)-> [2618700] -506 (0.11)-> [1145438] -309 (0.09)-> [1234126] -309 (0.19)-> [2327072]

[09/23/2018 12:06:14 PM]  
[09/23/2018 12:06:14 PM] SPO: [ 2044778 578 3078814], Score: 0.169459586854, Path (1):
[09/23/2018 12:06:14 PM] [2044778] -468 (0.17)-> [3078814]

[09/23/2018 12:06:14 PM]  
[09/23/2018 12:06:14 PM] SPO: [ 2044778 578 3078814], Score: 0.372598214331, Path (2):
[09/23/2018 12:06:14 PM] [2044778] -111 (0.13)-> [754735] -111 (0.24)-> [3078814]

[09/23/2018 12:06:14 PM]  
[09/23/2018 12:06:14 PM] SPO: [ 2044778 578 3078814], Score: 0.331661157609, Path (2):
[09/23/2018 12:06:14 PM] [2044778] -111 (0.12)-> [2625519] -111 (0.21)-> [3078814]

[09/23/2018 12:06:14 PM]  
[09/23/2018 12:06:14 PM] SPO: [ 2044778 578 3078814], Score: 0.444166984842, Path (3):
[09/23/2018 12:06:14 PM] [2044778] -111 (0.13)-> [754735] -505 (0.12)-> [2625519] -111 (0.2)-> [3078814]

[09/23/2018 12:06:14 PM]  
[09/23/2018 12:06:14 PM] SPO: [ 2044778 578 3078814], Score: 0.473139258755, Path (3):
[09/23/2018 12:06:14 PM] [2044778] -111 (0.12)-> [2625519] -505 (0.13)-> [754735] -111 (0.23)-> [3078814]

[09/23/2018 12:07:00 PM]  
[09/23/2018 12:07:00 PM] SPO: [ 752593 578 3542399], Score: 0.175386911157, Path (1):
[09/23/2018 12:07:00 PM] [752593] -468 (0.18)-> [3542399]

[09/23/2018 12:07:00 PM]  
[09/23/2018 12:07:00 PM] SPO: [ 752593 578 3542399], Score: 0.425556093011, Path (2):
[09/23/2018 12:07:00 PM] [752593] -505 (0.15)-> [3372574] -111 (0.28)-> [3542399]

[09/23/2018 12:07:00 PM]  
[09/23/2018 12:07:00 PM] SPO: [ 752593 578 3542399], Score: 0.471588708017, Path (3):
[09/23/2018 12:07:00 PM] [752593] -505 (0.15)-> [3372574] -505 (0.09)-> [1829783] -661 (0.23)-> [3542399]

[09/23/2018 12:07:00 PM]  
[09/23/2018 12:07:00 PM] SPO: [ 752593 578 3542399], Score: 0.56253243764, Path (5):
[09/23/2018 12:07:00 PM] [752593] -505 (0.15)-> [3372574] -505 (0.09)-> [1829783] -661 (0.06)-> [1304777] -65 (0.1)-> [1028451] -65 (0.16)-> [3542399]

[09/23/2018 12:07:00 PM]  
[09/23/2018 12:07:00 PM] SPO: [ 752593 578 3542399], Score: 0.38384185859, Path (5):
[09/23/2018 12:07:00 PM] [752593] -505 (0.15)-> [3372574] -505 (0.09)-> [1829783] -661 (0.06)-> [1304777] -394 (0.04)-> [5287545] -65 (0.05)-> [3542399]

[09/23/2018 12:50:25 PM] Filename: /home/galois/Documents/streamminer/streamminer2.py


[09/23/2018 12:50:25 PM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 12:50:25 PM] ================================================

[09/23/2018 12:50:25 PM]    234   2027.6 MiB   2027.6 MiB   @profile

[09/23/2018 12:50:25 PM]    235                             def extract_paths_sm(Gv, Gr, triples, y, features=None):

[09/23/2018 12:50:25 PM]    236   2027.6 MiB      0.0 MiB       return_features = False

[09/23/2018 12:50:25 PM]    237   2027.6 MiB      0.0 MiB       if features is None:

[09/23/2018 12:50:25 PM]    238   2027.6 MiB      0.0 MiB           return_features = True

[09/23/2018 12:50:25 PM]    239   2027.6 MiB      0.0 MiB           features, pos_features, neg_features = set(), set(), set()

[09/23/2018 12:50:25 PM]    240   2027.6 MiB      0.0 MiB       measurements = []

[09/23/2018 12:50:25 PM]    241                             

[09/23/2018 12:50:25 PM]    242  11345.1 MiB      0.2 MiB       for idx, triple in enumerate(tqdm(triples)):

[09/23/2018 12:50:25 PM]    243  11321.8 MiB      0.0 MiB           sid, pid, oid = triple['sid'], triple['pid'], triple['oid']

[09/23/2018 12:50:25 PM]    244  11321.8 MiB      0.0 MiB           label = y[idx]

[09/23/2018 12:50:25 PM]    245  11321.8 MiB      0.0 MiB           triple_feature = dict()

[09/23/2018 12:50:25 PM]    246  11344.9 MiB   9317.2 MiB           discovered_paths = yenKSP(Gv, Gr, sid, pid, oid, K = 5)

[09/23/2018 12:50:25 PM]    247  11344.9 MiB      0.0 MiB           for path in discovered_paths:

[09/23/2018 12:50:25 PM]    248   5841.6 MiB      0.0 MiB               log.info("{}\n".format(path))

[09/23/2018 12:50:25 PM]    249   5841.6 MiB      0.0 MiB               ff = tuple(path.relational_path)

[09/23/2018 12:50:25 PM]    250   5841.6 MiB      0.0 MiB               if ff not in features:

[09/23/2018 12:50:25 PM]    251   5841.6 MiB      0.0 MiB                   features.add(ff)

[09/23/2018 12:50:25 PM]    252   5841.6 MiB      0.0 MiB                   if label == 1:

[09/23/2018 12:50:25 PM]    253   5841.6 MiB      0.0 MiB                       pos_features.add(ff)

[09/23/2018 12:50:25 PM]    254                                             elif label == 0:

[09/23/2018 12:50:25 PM]    255                                                 neg_features.add(ff)

[09/23/2018 12:50:25 PM]    256                                             else:

[09/23/2018 12:50:25 PM]    257                                                 raise Exception("Unknown class label: {}".format(label))

[09/23/2018 12:50:25 PM]    258   5841.6 MiB      0.0 MiB               triple_feature[ff] = triple_feature.get(ff, 0) + 1

[09/23/2018 12:50:25 PM]    259  11344.9 MiB      0.0 MiB           measurements.append(triple_feature)

[09/23/2018 12:50:25 PM]    260  11344.9 MiB      0.0 MiB           gc.collect()

[09/23/2018 12:50:25 PM]    261  11345.1 MiB      0.0 MiB       if return_features:

[09/23/2018 12:50:25 PM]    262  11345.1 MiB      0.0 MiB           return features, pos_features, neg_features, measurements

[09/23/2018 12:50:25 PM]    263                                 return measurements

[09/23/2018 12:50:25 PM] 


[09/23/2018 12:50:25 PM] P: +:32, -:0, unique tot:32
[09/23/2018 12:50:25 PM] Time taken: 3291.55s


[09/23/2018 12:50:25 PM] => Path selection..
[09/23/2018 12:50:25 PM] D: +:32, -:0, tot:32
[09/23/2018 12:50:25 PM] Time taken: 0.16s

[09/23/2018 12:50:25 PM] => Model building..
[09/23/2018 12:50:27 PM] #Features: 32, best-AUROC: 1.00000
[09/23/2018 12:50:27 PM] Time taken: 2.02s

[09/23/2018 12:50:27 PM] Filename: /home/galois/Documents/streamminer/streamminer2.py


[09/23/2018 12:50:27 PM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 12:50:27 PM] ================================================

[09/23/2018 12:50:27 PM]     81    935.4 MiB    935.4 MiB   @profile

[09/23/2018 12:50:27 PM]     82                             def train_model_sm(G, triples, relsim, use_interpretable_features=False, cv=10):

[09/23/2018 12:50:27 PM]     83                                 """

[09/23/2018 12:50:27 PM]     84                                 Entry point for building a fact-checking classifier.

[09/23/2018 12:50:27 PM]     85                                 Performs three steps:

[09/23/2018 12:50:27 PM]     86                                 1. Path extraction (features)

[09/23/2018 12:50:27 PM]     87                                 2a. Path selection using information gain

[09/23/2018 12:50:27 PM]     88                                 2b. Filtering most informative discriminative predicate paths

[09/23/2018 12:50:27 PM]     89                                 3. Building logistic regression model

[09/23/2018 12:50:27 PM]     90                             

[09/23/2018 12:50:27 PM]     91                                 Parameters:

[09/23/2018 12:50:27 PM]     92                                 -----------

[09/23/2018 12:50:27 PM]     93                                 G: rgraph

[09/23/2018 12:50:27 PM]     94                                     Knowledge graph.

[09/23/2018 12:50:27 PM]     95                                 triples: dataframe

[09/23/2018 12:50:27 PM]     96                                     A data frame consisting of at least four columns, including

[09/23/2018 12:50:27 PM]     97                                     sid, pid, oid, class.

[09/23/2018 12:50:27 PM]     98                                 use_interpretable_features: bool

[09/23/2018 12:50:27 PM]     99                                     Whether or not to perform 2b.

[09/23/2018 12:50:27 PM]    100                                 cv: int

[09/23/2018 12:50:27 PM]    101                                     Number of cross-validation folds.

[09/23/2018 12:50:27 PM]    102                             

[09/23/2018 12:50:27 PM]    103                                 Returns:

[09/23/2018 12:50:27 PM]    104                                 --------

[09/23/2018 12:50:27 PM]    105                                 vec: DictVectorizer

[09/23/2018 12:50:27 PM]    106                                     Useful for preprocessing future triples.

[09/23/2018 12:50:27 PM]    107                                 model: dict

[09/23/2018 12:50:27 PM]    108                                     A dictionary containing 'clf' as the built model,

[09/23/2018 12:50:27 PM]    109                                     and two other key-value pairs, including best parameter

[09/23/2018 12:50:27 PM]    110                                     and best AUROC score.

[09/23/2018 12:50:27 PM]    111                                 """

[09/23/2018 12:50:27 PM]    112    935.5 MiB      0.1 MiB       y = triples['class'] # ground truth

[09/23/2018 12:50:27 PM]    113    935.5 MiB      0.0 MiB       triples = triples[['sid', 'pid', 'oid']].to_dict(orient='records')

[09/23/2018 12:50:27 PM]    114                             

[09/23/2018 12:50:27 PM]    115    935.6 MiB      0.1 MiB       pid = triples[0]['pid']

[09/23/2018 12:50:27 PM]    116    935.6 MiB      0.0 MiB       log.info('PID is: {}, with type: {}'.format(pid, pid.dtype))

[09/23/2018 12:50:27 PM]    117                             

[09/23/2018 12:50:27 PM]    118    935.6 MiB      0.0 MiB       if np.DataSource().exists(join(HOME, "sm", "G_fil_val_{}.npz".format(int(pid)) ))\

[09/23/2018 12:50:27 PM]    119    935.6 MiB      0.0 MiB          and np.DataSource().exists(join(HOME, "sm", "G_fil_rel_{}.npz".format(int(pid)) )):

[09/23/2018 12:50:27 PM]    120   1482.5 MiB    546.9 MiB           Gr = load_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid)) ))

[09/23/2018 12:50:27 PM]    121   2027.6 MiB    545.2 MiB           Gv = load_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid)) ))

[09/23/2018 12:50:27 PM]    122                                 else:

[09/23/2018 12:50:27 PM]    123                                     # set weights

[09/23/2018 12:50:27 PM]    124                                     indegsim = weighted_degree(G.indeg_vec, weight=WTFN).reshape((1, G.N))

[09/23/2018 12:50:27 PM]    125                                     indegsim = indegsim.ravel()

[09/23/2018 12:50:27 PM]    126                                     targets = G.csr.indices % G.N

[09/23/2018 12:50:27 PM]    127                                     relations = (G.csr.indices - targets) / G.N

[09/23/2018 12:50:27 PM]    128                                     relsimvec = np.array(relsim[int(pid), :]) # specific to predicate p

[09/23/2018 12:50:27 PM]    129                                     relsim_wt = relsimvec[relations] # with the size of relations as the number of relations

[09/23/2018 12:50:27 PM]    130                                     ######################################################

[09/23/2018 12:50:27 PM]    131                                     specificity_wt = indegsim[targets] # specificity

[09/23/2018 12:50:27 PM]    132                             

[09/23/2018 12:50:27 PM]    133                                     ## Removing all the edges with the predicte p in between any nodes.

[09/23/2018 12:50:27 PM]    134                                     log.info('=> Removing predicate {} from KG.\n\n'.format(pid))

[09/23/2018 12:50:27 PM]    135                                     eraseedges_mask = ((G.csr.indices - (G.csr.indices % G.N)) / G.N) == pid

[09/23/2018 12:50:27 PM]    136                                     specificity_wt[eraseedges_mask] = 0

[09/23/2018 12:50:27 PM]    137                                     relsim_wt[eraseedges_mask] = 0

[09/23/2018 12:50:27 PM]    138                                     G.csr.data = specificity_wt.copy()

[09/23/2018 12:50:27 PM]    139                             

[09/23/2018 12:50:27 PM]    140                                     G.csr.data = np.multiply(relsim_wt, G.csr.data)

[09/23/2018 12:50:27 PM]    141                                     log.info("Constructing adjacency matrix for: {}".format(pid))

[09/23/2018 12:50:27 PM]    142                                     adj_list_data = []

[09/23/2018 12:50:27 PM]    143                                     adj_list_s = []

[09/23/2018 12:50:27 PM]    144                                     adj_list_p = []

[09/23/2018 12:50:27 PM]    145                                     adj_list_o = []

[09/23/2018 12:50:27 PM]    146                                     sel_data = np.array([])

[09/23/2018 12:50:27 PM]    147                                     sel_relations = np.array([])

[09/23/2018 12:50:27 PM]    148                                     dicti = {}

[09/23/2018 12:50:27 PM]    149                                     num_nodes = len(G.csr.indptr)-1

[09/23/2018 12:50:27 PM]    150                                     for node in tqdm(xrange(num_nodes)):

[09/23/2018 12:50:27 PM]    151                                         dicti = {}

[09/23/2018 12:50:27 PM]    152                                         start = G.csr.indptr[node]

[09/23/2018 12:50:27 PM]    153                                         end = G.csr.indptr[node+1]

[09/23/2018 12:50:27 PM]    154                             

[09/23/2018 12:50:27 PM]    155                                         sel_data = G.csr.data[start:end]

[09/23/2018 12:50:27 PM]    156                                         sel_relations = relations[start:end]

[09/23/2018 12:50:27 PM]    157                                         for i, sel_tar in enumerate(targets[start:end]):

[09/23/2018 12:50:27 PM]    158                                             if sel_tar in dicti:

[09/23/2018 12:50:27 PM]    159                                                 if dicti[sel_tar][0] < sel_data[i]:

[09/23/2018 12:50:27 PM]    160                                                     dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 12:50:27 PM]    161                                             else:

[09/23/2018 12:50:27 PM]    162                                                 dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 12:50:27 PM]    163                                         for key, value in dicti.iteritems():

[09/23/2018 12:50:27 PM]    164                                             if value[0] != 0:

[09/23/2018 12:50:27 PM]    165                                                 adj_list_data.append(value[0])

[09/23/2018 12:50:27 PM]    166                                                 adj_list_s.append(node)

[09/23/2018 12:50:27 PM]    167                                                 adj_list_p.append(value[1])

[09/23/2018 12:50:27 PM]    168                                                 adj_list_o.append(key)

[09/23/2018 12:50:27 PM]    169                                     Gr = csr_matrix((adj_list_p, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 12:50:27 PM]    170                                     Gv = csr_matrix((adj_list_data, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 12:50:27 PM]    171                                     save_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid))), Gr)

[09/23/2018 12:50:27 PM]    172                                     save_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid))), Gv)

[09/23/2018 12:50:27 PM]    173                             

[09/23/2018 12:50:27 PM]    174                                 ############# Path extraction ###################

[09/23/2018 12:50:27 PM]    175   2027.6 MiB      0.0 MiB       log.info('=> Path extraction..(this can take a while)')

[09/23/2018 12:50:27 PM]    176   2027.6 MiB      0.0 MiB       t1 = time()

[09/23/2018 12:50:27 PM]    177  11345.1 MiB   9317.5 MiB       features, pos_features, neg_features, measurements = extract_paths_sm(Gv, Gr, triples, y)

[09/23/2018 12:50:27 PM]    178  11345.1 MiB      0.0 MiB       log.info('P: +:{}, -:{}, unique tot:{}'.format(len(pos_features), len(neg_features), len(features)))

[09/23/2018 12:50:27 PM]    179  11345.1 MiB      0.0 MiB       vec = DictVectorizer()

[09/23/2018 12:50:27 PM]    180  11346.7 MiB      1.6 MiB       X = vec.fit_transform(measurements)

[09/23/2018 12:50:27 PM]    181  11346.7 MiB      0.0 MiB       n, m = X.shape

[09/23/2018 12:50:27 PM]    182  11346.7 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n\n'.format(time() - t1))

[09/23/2018 12:50:27 PM]    183                             

[09/23/2018 12:50:27 PM]    184                                 ########### Path selection ###############

[09/23/2018 12:50:27 PM]    185  11346.7 MiB      0.0 MiB       log.info('=> Path selection..')

[09/23/2018 12:50:27 PM]    186  11346.7 MiB      0.0 MiB       t1 = time()

[09/23/2018 12:50:27 PM]    187  11346.7 MiB      0.0 MiB       pathselect = SelectKBest(mutual_info_classif, k=min(100, m))

[09/23/2018 12:50:27 PM]    188  11348.0 MiB      1.2 MiB       X_select = pathselect.fit_transform(X, y)

[09/23/2018 12:50:27 PM]    189  11348.0 MiB      0.0 MiB       selectidx = pathselect.get_support(indices=True) # selected feature indices

[09/23/2018 12:50:27 PM]    190  11348.0 MiB      0.0 MiB       vec = vec.restrict(selectidx, indices=True)

[09/23/2018 12:50:27 PM]    191  11348.0 MiB      0.0 MiB       select_pos_features, select_neg_features = set(), set()

[09/23/2018 12:50:27 PM]    192  11348.0 MiB      0.0 MiB       for feature in vec.get_feature_names():

[09/23/2018 12:50:27 PM]    193  11348.0 MiB      0.0 MiB           if feature in pos_features:

[09/23/2018 12:50:27 PM]    194  11348.0 MiB      0.0 MiB               select_pos_features.add(feature)

[09/23/2018 12:50:27 PM]    195  11348.0 MiB      0.0 MiB           if feature in neg_features:

[09/23/2018 12:50:27 PM]    196                                         select_neg_features.add(feature)

[09/23/2018 12:50:27 PM]    197  11348.0 MiB      0.0 MiB       log.info('D: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 12:50:27 PM]    198  11348.0 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 12:50:27 PM]    199                             

[09/23/2018 12:50:27 PM]    200                                 # Fact interpretation

[09/23/2018 12:50:27 PM]    201  11348.0 MiB      0.0 MiB       if use_interpretable_features and len(select_neg_features) > 0:

[09/23/2018 12:50:27 PM]    202                                     log.info('=> Fact interpretation..')

[09/23/2018 12:50:27 PM]    203                                     t1 = time()

[09/23/2018 12:50:27 PM]    204                                     theta = 10

[09/23/2018 12:50:27 PM]    205                                     select_neg_idx = [i for i, f in enumerate(vec.get_feature_names()) if f in select_neg_features]

[09/23/2018 12:50:27 PM]    206                                     removemask = np.where(np.sum(X_select[:, select_neg_idx], axis=0) >= theta)[0]

[09/23/2018 12:50:27 PM]    207                                     restrictidx = select_neg_idx[removemask]

[09/23/2018 12:50:27 PM]    208                                     keepidx = []

[09/23/2018 12:50:27 PM]    209                                     for i, f in enumerate(vec.get_feature_names()):

[09/23/2018 12:50:27 PM]    210                                         if i not in restrictidx:

[09/23/2018 12:50:27 PM]    211                                             keepidx.append(i)

[09/23/2018 12:50:27 PM]    212                                         else:

[09/23/2018 12:50:27 PM]    213                                             select_neg_features.remove(f)

[09/23/2018 12:50:27 PM]    214                                     vec = vec.restrictidx(keepidx, indices=True)

[09/23/2018 12:50:27 PM]    215                                     X_select = X_select[:, keepidx]

[09/23/2018 12:50:27 PM]    216                                     log.info('D*: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 12:50:27 PM]    217                                     log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 12:50:27 PM]    218                             

[09/23/2018 12:50:27 PM]    219                                 # Model creation

[09/23/2018 12:50:27 PM]    220  11348.0 MiB      0.0 MiB       log.info('=> Model building..')

[09/23/2018 12:50:27 PM]    221  11348.0 MiB      0.0 MiB       t1 = time()

[09/23/2018 12:50:27 PM]    222  11349.4 MiB      1.5 MiB       model = find_best_model(X_select, y, cv=cv)

[09/23/2018 12:50:27 PM]    223  11349.4 MiB      0.0 MiB       log.info('#Features: {}, best-AUROC: {:.5f}'.format(X_select.shape[1], model['best_score']))

[09/23/2018 12:50:27 PM]    224  11349.4 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 12:50:27 PM]    225                             

[09/23/2018 12:50:27 PM]    226  11349.4 MiB      0.0 MiB       return vec, model

[09/23/2018 12:50:27 PM] 


[09/23/2018 12:50:27 PM] Time taken: 3301.18s

[09/23/2018 12:50:27 PM] Saved: /home/galois/Documents/streamminer/output/out_streamminer_cross_US_Presidents_vs_First_Lady_2018-09-23_11:55:23.pkl
[09/23/2018 12:50:27 PM] 
Done!

[09/23/2018 12:50:28 PM] 


[09/23/2018 10:04:53 AM] Launching sm..
[09/23/2018 10:04:53 AM] Dataset: sub_sample.csv
[09/23/2018 10:04:53 AM] Output dir: /home/galois/Documents/streamminer/output
[09/23/2018 10:04:53 AM] Read data: (39, 7) sub_sample.csv
[09/23/2018 10:04:53 AM] Note: Found non-NA records: (39, 7)
[09/23/2018 10:04:53 AM] Reconstructing graph from /home/galois/Documents/streamminer/data/kg/_undir
[09/23/2018 10:04:53 AM] 

[09/23/2018 10:04:53 AM] => Loaded: undir_data.npy
[09/23/2018 10:04:53 AM] 

[09/23/2018 10:04:53 AM] => Loaded: undir_indptr.npy
[09/23/2018 10:04:53 AM] 

[09/23/2018 10:04:54 AM] => Loaded: undir_indices.npy
[09/23/2018 10:04:54 AM] 

[09/23/2018 10:04:54 AM] => Loaded: undir_indeg_vec.npy
[09/23/2018 10:04:54 AM] 

[09/23/2018 10:04:54 AM] => Graph loaded: 0.60 secs.

[09/23/2018 10:04:54 AM] 

[09/23/2018 10:04:54 AM] PID is: 599.0, with type: float64
[09/23/2018 10:05:00 AM] => Path extraction..(this can take a while)
[09/23/2018 10:06:13 AM] SPO: [ 392035 599 2115741], Score: 0.0677970562743, Path (1):
[09/23/2018 10:06:13 AM] [392035] -189 (0.07)-> [2115741]

[09/23/2018 10:06:13 AM]  
[09/23/2018 10:06:13 AM] SPO: [ 392035 599 2115741], Score: 0.129642864833, Path (3):
[09/23/2018 10:06:13 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.06)-> [2115741]

[09/23/2018 10:06:13 AM]  
[09/23/2018 10:06:13 AM] SPO: [ 392035 599 2115741], Score: 0.227870891895, Path (3):
[09/23/2018 10:06:13 AM] [392035] -660 (0.03)-> [78] -660 (0.06)-> [532169] -236 (0.14)-> [2115741]

[09/23/2018 10:06:13 AM]  
[09/23/2018 10:06:13 AM] SPO: [ 392035 599 2115741], Score: 0.32246592914, Path (5):
[09/23/2018 10:06:13 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [3040313] -236 (0.08)-> [532169] -236 (0.13)-> [2115741]

[09/23/2018 10:06:13 AM]  
[09/23/2018 10:06:13 AM] SPO: [ 392035 599 2115741], Score: 0.2921631898, Path (5):
[09/23/2018 10:06:13 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [1006463] -236 (0.07)-> [532169] -236 (0.11)-> [2115741]

[09/23/2018 10:08:21 AM]  
[09/23/2018 10:08:21 AM] SPO: [ 482030 599 2364618], Score: 0.0709806674345, Path (1):
[09/23/2018 10:08:21 AM] [482030] -189 (0.07)-> [2364618]

[09/23/2018 10:08:21 AM]  
[09/23/2018 10:08:21 AM] SPO: [ 482030 599 2364618], Score: 0.189150057923, Path (3):
[09/23/2018 10:08:21 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -189 (0.08)-> [2364618]

[09/23/2018 10:08:21 AM]  
[09/23/2018 10:08:21 AM] SPO: [ 482030 599 2364618], Score: 0.300590160143, Path (5):
[09/23/2018 10:08:21 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -123 (0.03)-> [3229261] -123 (0.06)-> [3641685] -189 (0.1)-> [2364618]

[09/23/2018 10:08:21 AM]  
[09/23/2018 10:08:21 AM] SPO: [ 482030 599 2364618], Score: 0.307470839662, Path (7):
[09/23/2018 10:08:21 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -601 (0.04)-> [3741813] -601 (0.05)-> [679305] -601 (0.06)-> [2364618]

[09/23/2018 10:08:21 AM]  
[09/23/2018 10:08:21 AM] SPO: [ 482030 599 2364618], Score: 0.298667188758, Path (7):
[09/23/2018 10:08:21 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -660 (0.03)-> [662] -660 (0.05)-> [2287973] -601 (0.06)-> [2364618]

[09/23/2018 10:09:48 AM]  
[09/23/2018 10:09:48 AM] SPO: [ 494082 599 4119746], Score: 0.0709806674345, Path (1):
[09/23/2018 10:09:48 AM] [494082] -189 (0.07)-> [4119746]

[09/23/2018 10:09:48 AM]  
[09/23/2018 10:09:48 AM] SPO: [ 494082 599 4119746], Score: 0.185839285232, Path (3):
[09/23/2018 10:09:48 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -189 (0.08)-> [4119746]

[09/23/2018 10:09:48 AM]  
[09/23/2018 10:09:48 AM] SPO: [ 494082 599 4119746], Score: 0.185223180919, Path (3):
[09/23/2018 10:09:48 AM] [494082] -462 (0.04)-> [1095182] -462 (0.07)-> [4421062] -189 (0.08)-> [4119746]

[09/23/2018 10:09:48 AM]  
[09/23/2018 10:09:48 AM] SPO: [ 494082 599 4119746], Score: 0.236441046223, Path (5):
[09/23/2018 10:09:48 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -65 (0.03)-> [3516497] -65 (0.04)-> [4370446] -189 (0.06)-> [4119746]

[09/23/2018 10:09:48 AM]  
[09/23/2018 10:09:48 AM] SPO: [ 494082 599 4119746], Score: 0.318141167082, Path (3):
[09/23/2018 10:09:48 AM] [494082] -462 (0.04)-> [4182344] -462 (0.06)-> [3400649] -189 (0.23)-> [4119746]

[09/23/2018 10:11:41 AM]  
[09/23/2018 10:11:41 AM] SPO: [ 846737 599 3782014], Score: 0.286517316618, Path (3):
[09/23/2018 10:11:41 AM] [846737] -65 (0.04)-> [1321700] -65 (0.09)-> [846745] -189 (0.15)-> [3782014]

[09/23/2018 10:11:41 AM]  
[09/23/2018 10:11:41 AM] SPO: [ 846737 599 3782014], Score: 0.114141656281, Path (3):
[09/23/2018 10:11:41 AM] [846737] -480 (0.03)-> [769522] -480 (0.04)-> [5528006] -189 (0.05)-> [3782014]

[09/23/2018 10:11:41 AM]  
[09/23/2018 10:11:41 AM] SPO: [ 846737 599 3782014], Score: 0.221127137519, Path (3):
[09/23/2018 10:11:41 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -189 (0.15)-> [3782014]

[09/23/2018 10:11:41 AM]  
[09/23/2018 10:11:41 AM] SPO: [ 846737 599 3782014], Score: 0.293878884718, Path (5):
[09/23/2018 10:11:41 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -329 (0.04)-> [743463] -329 (0.07)-> [4327133] -189 (0.11)-> [3782014]

[09/23/2018 10:11:41 AM]  
[09/23/2018 10:11:41 AM] SPO: [ 846737 599 3782014], Score: 0.262451694096, Path (5):
[09/23/2018 10:11:41 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -462 (0.04)-> [769614] -462 (0.07)-> [2927811] -189 (0.08)-> [3782014]

[09/23/2018 10:13:40 AM]  
[09/23/2018 10:13:40 AM] SPO: [ 851870 599 917821], Score: 0.223007000151, Path (3):
[09/23/2018 10:13:40 AM] [851870] -123 (0.04)-> [4568464] -123 (0.07)-> [2016524] -189 (0.11)-> [917821]

[09/23/2018 10:13:40 AM]  
[09/23/2018 10:13:40 AM] SPO: [ 851870 599 917821], Score: 0.127755595684, Path (3):
[09/23/2018 10:13:40 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.07)-> [917821]

[09/23/2018 10:13:40 AM]  
[09/23/2018 10:13:40 AM] SPO: [ 851870 599 917821], Score: 0.264946302339, Path (3):
[09/23/2018 10:13:40 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -189 (0.18)-> [917821]

[09/23/2018 10:13:40 AM]  
[09/23/2018 10:13:40 AM] SPO: [ 851870 599 917821], Score: 0.215151373218, Path (5):
[09/23/2018 10:13:40 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -65 (0.03)-> [5450691] -65 (0.04)-> [4448484] -189 (0.05)-> [917821]

[09/23/2018 10:13:40 AM]  
[09/23/2018 10:13:40 AM] SPO: [ 851870 599 917821], Score: 0.289964307411, Path (5):
[09/23/2018 10:13:40 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.04)-> [2932568] -121 (0.08)-> [1928825] -189 (0.11)-> [917821]

[09/23/2018 10:15:56 AM]  
[09/23/2018 10:15:56 AM] SPO: [ 890343 599 685564], Score: 0.0670245276544, Path (1):
[09/23/2018 10:15:56 AM] [890343] -189 (0.07)-> [685564]

[09/23/2018 10:15:56 AM]  
[09/23/2018 10:15:56 AM] SPO: [ 890343 599 685564], Score: 0.208336131551, Path (3):
[09/23/2018 10:15:56 AM] [890343] -123 (0.04)-> [3038271] -123 (0.07)-> [4479600] -189 (0.1)-> [685564]

[09/23/2018 10:15:56 AM]  
[09/23/2018 10:15:56 AM] SPO: [ 890343 599 685564], Score: 0.225169354063, Path (5):
[09/23/2018 10:15:56 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -601 (0.04)-> [3038271] -123 (0.06)-> [4479600] -189 (0.07)-> [685564]

[09/23/2018 10:15:56 AM]  
[09/23/2018 10:15:56 AM] SPO: [ 890343 599 685564], Score: 0.200927292463, Path (5):
[09/23/2018 10:15:56 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -660 (0.03)-> [662] -660 (0.05)-> [2229114] -601 (0.06)-> [685564]

[09/23/2018 10:15:56 AM]  
[09/23/2018 10:15:56 AM] SPO: [ 890343 599 685564], Score: 0.253899643492, Path (3):
[09/23/2018 10:15:56 AM] [890343] -123 (0.04)-> [3038271] -123 (0.05)-> [1499330] -189 (0.17)-> [685564]

[09/23/2018 10:17:52 AM]  
[09/23/2018 10:17:52 AM] SPO: [ 1029025 599 2364618], Score: 0.0709806674345, Path (1):
[09/23/2018 10:17:52 AM] [1029025] -189 (0.07)-> [2364618]

[09/23/2018 10:17:52 AM]  
[09/23/2018 10:17:52 AM] SPO: [ 1029025 599 2364618], Score: 0.324233084967, Path (5):
[09/23/2018 10:17:52 AM] [1029025] -123 (0.03)-> [3789441] -123 (0.04)-> [2678431] -462 (0.04)-> [4755814] -462 (0.08)-> [2249904] -189 (0.13)-> [2364618]

[09/23/2018 10:17:52 AM]  
[09/23/2018 10:17:52 AM] SPO: [ 1029025 599 2364618], Score: 0.0859695116702, Path (3):
[09/23/2018 10:17:52 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [2364618]

[09/23/2018 10:17:52 AM]  
[09/23/2018 10:17:52 AM] SPO: [ 1029025 599 2364618], Score: 0.224579024521, Path (5):
[09/23/2018 10:17:52 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -601 (0.06)-> [2287973] -601 (0.08)-> [2364618]

[09/23/2018 10:17:52 AM]  
[09/23/2018 10:17:52 AM] SPO: [ 1029025 599 2364618], Score: 0.199346583418, Path (5):
[09/23/2018 10:17:52 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -660 (0.04)-> [79] -660 (0.07)-> [2364618]

[09/23/2018 10:19:22 AM]  
[09/23/2018 10:19:22 AM] SPO: [ 1397869 599 5305646], Score: 0.0732918175248, Path (1):
[09/23/2018 10:19:22 AM] [1397869] -189 (0.07)-> [5305646]

[09/23/2018 10:19:22 AM]  
[09/23/2018 10:19:22 AM] SPO: [ 1397869 599 5305646], Score: 0.302960177346, Path (5):
[09/23/2018 10:19:22 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -189 (0.18)-> [5305646]

[09/23/2018 10:19:22 AM]  
[09/23/2018 10:19:22 AM] SPO: [ 1397869 599 5305646], Score: 0.302236904099, Path (7):
[09/23/2018 10:19:22 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -189 (0.09)-> [5305646]

[09/23/2018 10:19:22 AM]  
[09/23/2018 10:19:22 AM] SPO: [ 1397869 599 5305646], Score: 0.402103069783, Path (9):
[09/23/2018 10:19:22 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -462 (0.04)-> [4704367] -462 (0.07)-> [2619928] -189 (0.08)-> [5305646]

[09/23/2018 10:19:22 AM]  
[09/23/2018 10:19:22 AM] SPO: [ 1397869 599 5305646], Score: 0.398263975535, Path (9):
[09/23/2018 10:19:22 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -329 (0.04)-> [3740468] -329 (0.06)-> [4243536] -121 (0.08)-> [5305646]

[09/23/2018 10:22:28 AM]  
[09/23/2018 10:22:28 AM] SPO: [ 1431155 599 4567127], Score: 0.3767466941, Path (5):
[09/23/2018 10:22:28 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -329 (0.05)-> [3148940] -329 (0.09)-> [5651172] -189 (0.18)-> [4567127]

[09/23/2018 10:22:28 AM]  
[09/23/2018 10:22:28 AM] SPO: [ 1431155 599 4567127], Score: 0.235878581379, Path (5):
[09/23/2018 10:22:28 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.04)-> [3640344] -65 (0.06)-> [5492355] -189 (0.09)-> [4567127]

[09/23/2018 10:22:28 AM]  
[09/23/2018 10:22:28 AM] SPO: [ 1431155 599 4567127], Score: 0.192672051272, Path (5):
[09/23/2018 10:22:28 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -189 (0.06)-> [4567127]

[09/23/2018 10:22:28 AM]  
[09/23/2018 10:22:28 AM] SPO: [ 1431155 599 4567127], Score: 0.258765654105, Path (7):
[09/23/2018 10:22:28 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -65 (0.03)-> [917573] -65 (0.05)-> [1059235] -189 (0.06)-> [4567127]

[09/23/2018 10:22:28 AM]  
[09/23/2018 10:22:28 AM] SPO: [ 1431155 599 4567127], Score: 0.289525100991, Path (7):
[09/23/2018 10:22:28 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -65 (0.02)-> [1354392] -65 (0.03)-> [678457] -189 (0.04)-> [4567129] -601 (0.06)-> [290262] -601 (0.08)-> [4567127]

[09/23/2018 10:24:17 AM]  
[09/23/2018 10:24:17 AM] SPO: [ 1522148 599 1357357], Score: 0.17915544258, Path (3):
[09/23/2018 10:24:17 AM] [1522148] -329 (0.04)-> [3740468] -329 (0.06)-> [4368651] -121 (0.08)-> [1357357]

[09/23/2018 10:24:17 AM]  
[09/23/2018 10:24:17 AM] SPO: [ 1522148 599 1357357], Score: 0.15147173385, Path (3):
[09/23/2018 10:24:17 AM] [1522148] -189 (0.03)-> [3584723] -121 (0.05)-> [2594378] -189 (0.07)-> [1357357]

[09/23/2018 10:24:17 AM]  
[09/23/2018 10:24:17 AM] SPO: [ 1522148 599 1357357], Score: 0.14092926234, Path (3):
[09/23/2018 10:24:17 AM] [1522148] -189 (0.03)-> [3584723] -660 (0.04)-> [79] -660 (0.07)-> [1357357]

[09/23/2018 10:24:17 AM]  
[09/23/2018 10:24:17 AM] SPO: [ 1522148 599 1357357], Score: 0.282334153748, Path (3):
[09/23/2018 10:24:17 AM] [1522148] -329 (0.04)-> [3740468] -329 (0.06)-> [2834442] -189 (0.19)-> [1357357]

[09/23/2018 10:24:17 AM]  
[09/23/2018 10:24:17 AM] SPO: [ 1522148 599 1357357], Score: 0.298489117086, Path (5):
[09/23/2018 10:24:17 AM] [1522148] -189 (0.03)-> [3584723] -121 (0.05)-> [2594378] -462 (0.04)-> [2269316] -462 (0.07)-> [4368651] -121 (0.1)-> [1357357]

[09/23/2018 10:24:40 AM] Filename: /home/galois/Documents/streamminer/streamminer2.py


[09/23/2018 10:24:40 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 10:24:40 AM] ================================================

[09/23/2018 10:24:40 AM]    234   1943.5 MiB   1943.5 MiB   @profile

[09/23/2018 10:24:40 AM]    235                             def extract_paths_sm(Gv, Gr, triples, y, features=None):

[09/23/2018 10:24:40 AM]    236   1943.5 MiB      0.0 MiB       return_features = False

[09/23/2018 10:24:40 AM]    237   1943.5 MiB      0.0 MiB       if features is None:

[09/23/2018 10:24:40 AM]    238   1943.5 MiB      0.0 MiB           return_features = True

[09/23/2018 10:24:40 AM]    239   1943.5 MiB      0.0 MiB           features, pos_features, neg_features = set(), set(), set()

[09/23/2018 10:24:40 AM]    240   1943.5 MiB      0.0 MiB       measurements = []

[09/23/2018 10:24:40 AM]    241                             

[09/23/2018 10:24:40 AM]    242   6445.9 MiB      0.0 MiB       for idx, triple in enumerate(tqdm(triples)):

[09/23/2018 10:24:40 AM]    243   6422.8 MiB      0.0 MiB           sid, pid, oid = triple['sid'], triple['pid'], triple['oid']

[09/23/2018 10:24:40 AM]    244   6422.8 MiB      0.1 MiB           label = y[idx]

[09/23/2018 10:24:40 AM]    245   6422.8 MiB      0.0 MiB           triple_feature = dict()

[09/23/2018 10:24:40 AM]    246   6445.9 MiB   4495.4 MiB           discovered_paths = yenKSP(Gv, Gr, sid, pid, oid, K = 5)

[09/23/2018 10:24:40 AM]    247   6445.9 MiB      0.4 MiB           for path in discovered_paths:

[09/23/2018 10:24:40 AM]    248   6396.6 MiB      1.0 MiB               log.info("{}\n".format(path))

[09/23/2018 10:24:40 AM]    249   6396.6 MiB      0.0 MiB               ff = tuple(path.relational_path)

[09/23/2018 10:24:40 AM]    250   6396.6 MiB      0.0 MiB               if ff not in features:

[09/23/2018 10:24:41 AM]    251   6396.6 MiB      0.0 MiB                   features.add(ff)

[09/23/2018 10:24:41 AM]    252   6396.6 MiB      0.0 MiB                   if label == 1:

[09/23/2018 10:24:41 AM]    253   6396.6 MiB      0.0 MiB                       pos_features.add(ff)

[09/23/2018 10:24:41 AM]    254                                             elif label == 0:

[09/23/2018 10:24:41 AM]    255                                                 neg_features.add(ff)

[09/23/2018 10:24:41 AM]    256                                             else:

[09/23/2018 10:24:41 AM]    257                                                 raise Exception("Unknown class label: {}".format(label))

[09/23/2018 10:24:41 AM]    258   6396.6 MiB      0.0 MiB               triple_feature[ff] = triple_feature.get(ff, 0) + 1

[09/23/2018 10:24:41 AM]    259   6445.9 MiB      0.0 MiB           measurements.append(triple_feature)

[09/23/2018 10:24:41 AM]    260   6445.9 MiB      5.5 MiB           gc.collect()

[09/23/2018 10:24:41 AM]    261   6445.9 MiB      0.0 MiB       if return_features:

[09/23/2018 10:24:41 AM]    262   6445.9 MiB      0.0 MiB           return features, pos_features, neg_features, measurements

[09/23/2018 10:24:41 AM]    263                                 return measurements

[09/23/2018 10:24:41 AM] 


[09/23/2018 10:24:41 AM] P: +:34, -:0, unique tot:34
[09/23/2018 10:24:41 AM] Time taken: 1180.76s


[09/23/2018 10:24:41 AM] => Path selection..
[09/23/2018 10:24:41 AM] D: +:34, -:0, tot:34
[09/23/2018 10:24:41 AM] Time taken: 0.16s

[09/23/2018 10:24:41 AM] => Model building..
[09/23/2018 10:24:43 AM] #Features: 34, best-AUROC: 0.89744
[09/23/2018 10:24:43 AM] Time taken: 1.94s

[09/23/2018 10:24:43 AM] Filename: /home/galois/Documents/streamminer/streamminer2.py


[09/23/2018 10:24:43 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 10:24:43 AM] ================================================

[09/23/2018 10:24:43 AM]     81    935.7 MiB    935.7 MiB   @profile

[09/23/2018 10:24:43 AM]     82                             def train_model_sm(G, triples, relsim, use_interpretable_features=False, cv=10):

[09/23/2018 10:24:43 AM]     83                                 """

[09/23/2018 10:24:43 AM]     84                                 Entry point for building a fact-checking classifier.

[09/23/2018 10:24:43 AM]     85                                 Performs three steps:

[09/23/2018 10:24:43 AM]     86                                 1. Path extraction (features)

[09/23/2018 10:24:43 AM]     87                                 2a. Path selection using information gain

[09/23/2018 10:24:43 AM]     88                                 2b. Filtering most informative discriminative predicate paths

[09/23/2018 10:24:43 AM]     89                                 3. Building logistic regression model

[09/23/2018 10:24:43 AM]     90                             

[09/23/2018 10:24:43 AM]     91                                 Parameters:

[09/23/2018 10:24:43 AM]     92                                 -----------

[09/23/2018 10:24:43 AM]     93                                 G: rgraph

[09/23/2018 10:24:43 AM]     94                                     Knowledge graph.

[09/23/2018 10:24:43 AM]     95                                 triples: dataframe

[09/23/2018 10:24:43 AM]     96                                     A data frame consisting of at least four columns, including

[09/23/2018 10:24:43 AM]     97                                     sid, pid, oid, class.

[09/23/2018 10:24:43 AM]     98                                 use_interpretable_features: bool

[09/23/2018 10:24:43 AM]     99                                     Whether or not to perform 2b.

[09/23/2018 10:24:43 AM]    100                                 cv: int

[09/23/2018 10:24:43 AM]    101                                     Number of cross-validation folds.

[09/23/2018 10:24:43 AM]    102                             

[09/23/2018 10:24:43 AM]    103                                 Returns:

[09/23/2018 10:24:43 AM]    104                                 --------

[09/23/2018 10:24:43 AM]    105                                 vec: DictVectorizer

[09/23/2018 10:24:43 AM]    106                                     Useful for preprocessing future triples.

[09/23/2018 10:24:43 AM]    107                                 model: dict

[09/23/2018 10:24:43 AM]    108                                     A dictionary containing 'clf' as the built model,

[09/23/2018 10:24:43 AM]    109                                     and two other key-value pairs, including best parameter

[09/23/2018 10:24:43 AM]    110                                     and best AUROC score.

[09/23/2018 10:24:43 AM]    111                                 """

[09/23/2018 10:24:43 AM]    112    935.7 MiB      0.1 MiB       y = triples['class'] # ground truth

[09/23/2018 10:24:43 AM]    113    935.7 MiB      0.0 MiB       triples = triples[['sid', 'pid', 'oid']].to_dict(orient='records')

[09/23/2018 10:24:43 AM]    114                             

[09/23/2018 10:24:43 AM]    115    935.7 MiB      0.0 MiB       pid = triples[0]['pid']

[09/23/2018 10:24:43 AM]    116    935.8 MiB      0.0 MiB       log.info('PID is: {}, with type: {}'.format(pid, pid.dtype))

[09/23/2018 10:24:43 AM]    117                             

[09/23/2018 10:24:43 AM]    118    935.8 MiB      0.0 MiB       if np.DataSource().exists(join(HOME, "sm", "G_fil_val_{}.npz".format(int(pid)) ))\

[09/23/2018 10:24:43 AM]    119    935.8 MiB      0.0 MiB          and np.DataSource().exists(join(HOME, "sm", "G_fil_rel_{}.npz".format(int(pid)) )):

[09/23/2018 10:24:43 AM]    120   1440.2 MiB    504.4 MiB           Gr = load_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid)) ))

[09/23/2018 10:24:43 AM]    121   1943.5 MiB    503.3 MiB           Gv = load_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid)) ))

[09/23/2018 10:24:43 AM]    122                                 else:

[09/23/2018 10:24:43 AM]    123                                     # set weights

[09/23/2018 10:24:43 AM]    124                                     indegsim = weighted_degree(G.indeg_vec, weight=WTFN).reshape((1, G.N))

[09/23/2018 10:24:43 AM]    125                                     indegsim = indegsim.ravel()

[09/23/2018 10:24:43 AM]    126                                     targets = G.csr.indices % G.N

[09/23/2018 10:24:43 AM]    127                                     relations = (G.csr.indices - targets) / G.N

[09/23/2018 10:24:43 AM]    128                                     relsimvec = np.array(relsim[int(pid), :]) # specific to predicate p

[09/23/2018 10:24:43 AM]    129                                     relsim_wt = relsimvec[relations] # with the size of relations as the number of relations

[09/23/2018 10:24:43 AM]    130                                     ######################################################

[09/23/2018 10:24:43 AM]    131                                     specificity_wt = indegsim[targets] # specificity

[09/23/2018 10:24:43 AM]    132                             

[09/23/2018 10:24:43 AM]    133                                     ## Removing all the edges with the predicte p in between any nodes.

[09/23/2018 10:24:43 AM]    134                                     log.info('=> Removing predicate {} from KG.\n\n'.format(pid))

[09/23/2018 10:24:43 AM]    135                                     eraseedges_mask = ((G.csr.indices - (G.csr.indices % G.N)) / G.N) == pid

[09/23/2018 10:24:43 AM]    136                                     specificity_wt[eraseedges_mask] = 0

[09/23/2018 10:24:43 AM]    137                                     relsim_wt[eraseedges_mask] = 0

[09/23/2018 10:24:43 AM]    138                                     G.csr.data = specificity_wt.copy()

[09/23/2018 10:24:43 AM]    139                             

[09/23/2018 10:24:43 AM]    140                                     G.csr.data = np.multiply(relsim_wt, G.csr.data)

[09/23/2018 10:24:43 AM]    141                                     log.info("Constructing adjacency matrix for: {}".format(pid))

[09/23/2018 10:24:43 AM]    142                                     adj_list_data = []

[09/23/2018 10:24:43 AM]    143                                     adj_list_s = []

[09/23/2018 10:24:43 AM]    144                                     adj_list_p = []

[09/23/2018 10:24:43 AM]    145                                     adj_list_o = []

[09/23/2018 10:24:43 AM]    146                                     sel_data = np.array([])

[09/23/2018 10:24:43 AM]    147                                     sel_relations = np.array([])

[09/23/2018 10:24:43 AM]    148                                     dicti = {}

[09/23/2018 10:24:43 AM]    149                                     num_nodes = len(G.csr.indptr)-1

[09/23/2018 10:24:43 AM]    150                                     for node in tqdm(xrange(num_nodes)):

[09/23/2018 10:24:43 AM]    151                                         dicti = {}

[09/23/2018 10:24:43 AM]    152                                         start = G.csr.indptr[node]

[09/23/2018 10:24:43 AM]    153                                         end = G.csr.indptr[node+1]

[09/23/2018 10:24:43 AM]    154                             

[09/23/2018 10:24:43 AM]    155                                         sel_data = G.csr.data[start:end]

[09/23/2018 10:24:43 AM]    156                                         sel_relations = relations[start:end]

[09/23/2018 10:24:43 AM]    157                                         for i, sel_tar in enumerate(targets[start:end]):

[09/23/2018 10:24:43 AM]    158                                             if sel_tar in dicti:

[09/23/2018 10:24:43 AM]    159                                                 if dicti[sel_tar][0] < sel_data[i]:

[09/23/2018 10:24:43 AM]    160                                                     dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 10:24:43 AM]    161                                             else:

[09/23/2018 10:24:43 AM]    162                                                 dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 10:24:43 AM]    163                                         for key, value in dicti.iteritems():

[09/23/2018 10:24:43 AM]    164                                             if value[0] != 0:

[09/23/2018 10:24:43 AM]    165                                                 adj_list_data.append(value[0])

[09/23/2018 10:24:43 AM]    166                                                 adj_list_s.append(node)

[09/23/2018 10:24:43 AM]    167                                                 adj_list_p.append(value[1])

[09/23/2018 10:24:43 AM]    168                                                 adj_list_o.append(key)

[09/23/2018 10:24:43 AM]    169                                     Gr = csr_matrix((adj_list_p, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 10:24:43 AM]    170                                     Gv = csr_matrix((adj_list_data, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 10:24:43 AM]    171                                     save_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid))), Gr)

[09/23/2018 10:24:43 AM]    172                                     save_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid))), Gv)

[09/23/2018 10:24:43 AM]    173                             

[09/23/2018 10:24:43 AM]    174                                 ############# Path extraction ###################

[09/23/2018 10:24:43 AM]    175   1943.5 MiB      0.0 MiB       log.info('=> Path extraction..(this can take a while)')

[09/23/2018 10:24:43 AM]    176   1943.5 MiB      0.0 MiB       t1 = time()

[09/23/2018 10:24:43 AM]    177   6446.1 MiB   4502.5 MiB       features, pos_features, neg_features, measurements = extract_paths_sm(Gv, Gr, triples, y)

[09/23/2018 10:24:43 AM]    178   6446.1 MiB      0.0 MiB       log.info('P: +:{}, -:{}, unique tot:{}'.format(len(pos_features), len(neg_features), len(features)))

[09/23/2018 10:24:43 AM]    179   6446.1 MiB      0.0 MiB       vec = DictVectorizer()

[09/23/2018 10:24:43 AM]    180   6446.7 MiB      0.6 MiB       X = vec.fit_transform(measurements)

[09/23/2018 10:24:43 AM]    181   6446.7 MiB      0.0 MiB       n, m = X.shape

[09/23/2018 10:24:43 AM]    182   6446.7 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n\n'.format(time() - t1))

[09/23/2018 10:24:43 AM]    183                             

[09/23/2018 10:24:43 AM]    184                                 ########### Path selection ###############

[09/23/2018 10:24:43 AM]    185   6446.7 MiB      0.0 MiB       log.info('=> Path selection..')

[09/23/2018 10:24:43 AM]    186   6446.7 MiB      0.0 MiB       t1 = time()

[09/23/2018 10:24:43 AM]    187   6446.7 MiB      0.0 MiB       pathselect = SelectKBest(mutual_info_classif, k=min(100, m))

[09/23/2018 10:24:43 AM]    188   6447.7 MiB      1.0 MiB       X_select = pathselect.fit_transform(X, y)

[09/23/2018 10:24:43 AM]    189   6447.7 MiB      0.0 MiB       selectidx = pathselect.get_support(indices=True) # selected feature indices

[09/23/2018 10:24:43 AM]    190   6447.7 MiB      0.0 MiB       vec = vec.restrict(selectidx, indices=True)

[09/23/2018 10:24:43 AM]    191   6447.7 MiB      0.0 MiB       select_pos_features, select_neg_features = set(), set()

[09/23/2018 10:24:43 AM]    192   6447.7 MiB      0.0 MiB       for feature in vec.get_feature_names():

[09/23/2018 10:24:43 AM]    193   6447.7 MiB      0.0 MiB           if feature in pos_features:

[09/23/2018 10:24:43 AM]    194   6447.7 MiB      0.0 MiB               select_pos_features.add(feature)

[09/23/2018 10:24:43 AM]    195   6447.7 MiB      0.0 MiB           if feature in neg_features:

[09/23/2018 10:24:43 AM]    196                                         select_neg_features.add(feature)

[09/23/2018 10:24:43 AM]    197   6447.7 MiB      0.0 MiB       log.info('D: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 10:24:43 AM]    198   6447.7 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 10:24:43 AM]    199                             

[09/23/2018 10:24:43 AM]    200                                 # Fact interpretation

[09/23/2018 10:24:43 AM]    201   6447.7 MiB      0.0 MiB       if use_interpretable_features and len(select_neg_features) > 0:

[09/23/2018 10:24:43 AM]    202                                     log.info('=> Fact interpretation..')

[09/23/2018 10:24:43 AM]    203                                     t1 = time()

[09/23/2018 10:24:43 AM]    204                                     theta = 10

[09/23/2018 10:24:43 AM]    205                                     select_neg_idx = [i for i, f in enumerate(vec.get_feature_names()) if f in select_neg_features]

[09/23/2018 10:24:43 AM]    206                                     removemask = np.where(np.sum(X_select[:, select_neg_idx], axis=0) >= theta)[0]

[09/23/2018 10:24:43 AM]    207                                     restrictidx = select_neg_idx[removemask]

[09/23/2018 10:24:43 AM]    208                                     keepidx = []

[09/23/2018 10:24:43 AM]    209                                     for i, f in enumerate(vec.get_feature_names()):

[09/23/2018 10:24:43 AM]    210                                         if i not in restrictidx:

[09/23/2018 10:24:43 AM]    211                                             keepidx.append(i)

[09/23/2018 10:24:43 AM]    212                                         else:

[09/23/2018 10:24:43 AM]    213                                             select_neg_features.remove(f)

[09/23/2018 10:24:43 AM]    214                                     vec = vec.restrictidx(keepidx, indices=True)

[09/23/2018 10:24:43 AM]    215                                     X_select = X_select[:, keepidx]

[09/23/2018 10:24:43 AM]    216                                     log.info('D*: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 10:24:43 AM]    217                                     log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 10:24:43 AM]    218                             

[09/23/2018 10:24:43 AM]    219                                 # Model creation

[09/23/2018 10:24:43 AM]    220   6447.7 MiB      0.0 MiB       log.info('=> Model building..')

[09/23/2018 10:24:43 AM]    221   6447.7 MiB      0.0 MiB       t1 = time()

[09/23/2018 10:24:43 AM]    222   6449.1 MiB      1.4 MiB       model = find_best_model(X_select, y, cv=cv)

[09/23/2018 10:24:43 AM]    223   6449.1 MiB      0.0 MiB       log.info('#Features: {}, best-AUROC: {:.5f}'.format(X_select.shape[1], model['best_score']))

[09/23/2018 10:24:43 AM]    224   6449.1 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 10:24:43 AM]    225                             

[09/23/2018 10:24:43 AM]    226   6449.1 MiB      0.0 MiB       return vec, model

[09/23/2018 10:24:43 AM] 


[09/23/2018 10:24:43 AM] Time taken: 1188.73s

[09/23/2018 10:24:43 AM] Saved: /home/galois/Documents/streamminer/output/out_streamminer_sub_sample_2018-09-23_10:04:53.pkl
[09/23/2018 10:24:43 AM] 
Done!

[09/23/2018 10:24:43 AM] 


[09/23/2018 07:22:08 AM] Launching sm..
[09/23/2018 07:22:08 AM] Dataset: sub_sample.csv
[09/23/2018 07:22:08 AM] Output dir: /home/alex/Documents/streamminer/output
[09/23/2018 07:22:08 AM] Read data: (39, 7) sub_sample.csv
[09/23/2018 07:22:08 AM] Note: Found non-NA records: (39, 7)
[09/23/2018 07:22:08 AM] Reconstructing graph from /home/alex/Documents/streamminer/data/kg/_undir
[09/23/2018 07:22:08 AM] 

[09/23/2018 07:22:08 AM] => Loaded: undir_data.npy
[09/23/2018 07:22:08 AM] 

[09/23/2018 07:22:08 AM] => Loaded: undir_indptr.npy
[09/23/2018 07:22:08 AM] 

[09/23/2018 07:22:09 AM] => Loaded: undir_indices.npy
[09/23/2018 07:22:09 AM] 

[09/23/2018 07:22:09 AM] => Loaded: undir_indeg_vec.npy
[09/23/2018 07:22:09 AM] 

[09/23/2018 07:22:09 AM] => Graph loaded: 1.75 secs.

[09/23/2018 07:22:09 AM] 

[09/23/2018 07:22:10 AM] PID is: 599.0, with type: float64
[09/23/2018 07:22:18 AM] => Path extraction..(this can take a while)
[09/23/2018 07:23:33 AM] Filename: streamminer2.py


[09/23/2018 07:23:33 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:23:33 AM] ================================================

[09/23/2018 07:23:33 AM]    368   1910.6 MiB   1910.6 MiB   @profile

[09/23/2018 07:23:33 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:23:33 AM]    370   1910.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:23:33 AM]    371   1931.4 MiB     20.8 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:23:33 AM]    372   1931.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:23:33 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:23:33 AM]    374                                     return discovered_paths

[09/23/2018 07:23:33 AM]    375   1931.4 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:23:33 AM]    376   1931.4 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:23:33 AM]    377   1931.4 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:23:33 AM]    378   1931.4 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:23:33 AM]    379   1931.4 MiB      0.0 MiB       B = []

[09/23/2018 07:23:33 AM]    380   1931.4 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:23:33 AM]    381   1931.4 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:23:33 AM]    382   2278.6 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:23:33 AM]    383   2278.6 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:23:33 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:23:33 AM]    385   2255.4 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:23:33 AM]    386   2255.4 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:23:33 AM]    387   2255.4 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:23:33 AM]    388   2255.4 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:23:33 AM]    389   2255.4 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:23:33 AM]    390   2255.4 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:23:33 AM]    391   2255.4 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:23:33 AM]    392   2255.4 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:23:33 AM]    393   2255.4 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:23:33 AM]    394   2255.4 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:23:33 AM]    395   2255.4 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:23:33 AM]    396   2278.6 MiB    347.2 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:23:33 AM]    397   2278.6 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:23:33 AM]    398   2278.6 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:23:33 AM]    399   2278.6 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:23:33 AM]    400   2278.6 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:23:33 AM]    401   2278.6 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:23:33 AM]    402   2278.6 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:23:33 AM]    403   2278.6 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:23:33 AM]    404   2278.6 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:23:33 AM]    405   2278.6 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:23:33 AM]    406   2278.6 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:23:33 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:23:33 AM]    408   2278.6 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:23:33 AM]    409   2278.6 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:23:33 AM]    410   2278.6 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:23:33 AM]    411   2278.6 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:23:33 AM]    412   2278.6 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:23:33 AM]    413   2278.6 MiB      0.0 MiB           if len(B):

[09/23/2018 07:23:33 AM]    414   2278.6 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 07:23:33 AM]    415   2278.6 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:23:33 AM]    416   2278.6 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:23:33 AM]    417                                     else:

[09/23/2018 07:23:33 AM]    418                                         break

[09/23/2018 07:23:33 AM]    419   2278.6 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:23:33 AM]    420   2278.6 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:23:33 AM]    421   2278.6 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:23:33 AM] 


[09/23/2018 07:23:33 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.0677970562743, Path (1):
[09/23/2018 07:23:33 AM] [392035] -189 (0.07)-> [2115741]

[09/23/2018 07:23:33 AM]  
[09/23/2018 07:23:33 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.129642864833, Path (3):
[09/23/2018 07:23:33 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.06)-> [2115741]

[09/23/2018 07:23:33 AM]  
[09/23/2018 07:23:33 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.227870891895, Path (3):
[09/23/2018 07:23:33 AM] [392035] -660 (0.03)-> [78] -660 (0.06)-> [532169] -236 (0.14)-> [2115741]

[09/23/2018 07:23:33 AM]  
[09/23/2018 07:23:33 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.32246592914, Path (5):
[09/23/2018 07:23:33 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [3040313] -236 (0.08)-> [532169] -236 (0.13)-> [2115741]

[09/23/2018 07:23:33 AM]  
[09/23/2018 07:23:33 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.292163189332, Path (5):
[09/23/2018 07:23:33 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [1006463] -236 (0.07)-> [532169] -236 (0.11)-> [2115741]

[09/23/2018 07:23:40 AM] Filename: streamminer2.py


[09/23/2018 07:23:40 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:23:40 AM] ================================================

[09/23/2018 07:23:40 AM]    368   2278.6 MiB   2278.6 MiB   @profile

[09/23/2018 07:23:40 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:23:40 AM]    370   2278.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:23:40 AM]    371   2303.1 MiB     24.5 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:23:40 AM]    372   2303.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:23:40 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:23:40 AM]    374   2303.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:23:40 AM]    375                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:23:40 AM]    376                                     'path': path_stack,

[09/23/2018 07:23:40 AM]    377                                     'path_rel': rel_stack,

[09/23/2018 07:23:40 AM]    378                                     'path_weights': weight_stack}]

[09/23/2018 07:23:40 AM]    379                                 B = []

[09/23/2018 07:23:40 AM]    380                                 removed_edges = []

[09/23/2018 07:23:40 AM]    381                                 removed_nodes = []

[09/23/2018 07:23:40 AM]    382                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:23:40 AM]    383                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:23:40 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:23:40 AM]    385                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:23:40 AM]    386                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:23:40 AM]    387                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:23:40 AM]    388                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:23:40 AM]    389                                         removed_edges[:] = []

[09/23/2018 07:23:40 AM]    390                                         removed_nodes[:] = []

[09/23/2018 07:23:40 AM]    391                                         for path_dict in A:

[09/23/2018 07:23:40 AM]    392                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:23:40 AM]    393                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:23:40 AM]    394                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:23:40 AM]    395                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:23:40 AM]    396                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:23:40 AM]    397                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:23:40 AM]    398                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:23:40 AM]    399                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:23:40 AM]    400                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:23:40 AM]    401                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:23:40 AM]    402                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:23:40 AM]    403                                                             'path': totalPath,

[09/23/2018 07:23:40 AM]    404                                                             'path_rel': totalPathRel,

[09/23/2018 07:23:40 AM]    405                                                             'path_weights': totalWeights}

[09/23/2018 07:23:40 AM]    406                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:23:40 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:23:40 AM]    408                                                 B.append(potential_k)

[09/23/2018 07:23:40 AM]    409                                         removed_nodes.reverse()

[09/23/2018 07:23:40 AM]    410                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:23:40 AM]    411                                         removed_edges.reverse()

[09/23/2018 07:23:40 AM]    412                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:23:40 AM]    413                                     if len(B):

[09/23/2018 07:23:40 AM]    414                                         mergeSort(B,0,len(B)-1)

[09/23/2018 07:23:40 AM]    415                                         A.append(B[0])

[09/23/2018 07:23:40 AM]    416                                         B.pop(0)

[09/23/2018 07:23:40 AM]    417                                     else:

[09/23/2018 07:23:40 AM]    418                                         break

[09/23/2018 07:23:40 AM]    419                                 for path_dict in A:

[09/23/2018 07:23:40 AM]    420                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:23:40 AM]    421                                 return discovered_paths

[09/23/2018 07:23:40 AM] 


[09/23/2018 07:23:54 AM] Filename: streamminer2.py


[09/23/2018 07:23:54 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:23:54 AM] ================================================

[09/23/2018 07:23:54 AM]    368   2303.1 MiB   2303.1 MiB   @profile

[09/23/2018 07:23:54 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:23:54 AM]    370   2303.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:23:54 AM]    371   2326.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:23:54 AM]    372   2326.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:23:54 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:23:54 AM]    374   2326.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:23:54 AM]    375                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:23:54 AM]    376                                     'path': path_stack,

[09/23/2018 07:23:54 AM]    377                                     'path_rel': rel_stack,

[09/23/2018 07:23:54 AM]    378                                     'path_weights': weight_stack}]

[09/23/2018 07:23:54 AM]    379                                 B = []

[09/23/2018 07:23:54 AM]    380                                 removed_edges = []

[09/23/2018 07:23:54 AM]    381                                 removed_nodes = []

[09/23/2018 07:23:54 AM]    382                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:23:54 AM]    383                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:23:54 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:23:54 AM]    385                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:23:54 AM]    386                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:23:54 AM]    387                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:23:54 AM]    388                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:23:54 AM]    389                                         removed_edges[:] = []

[09/23/2018 07:23:54 AM]    390                                         removed_nodes[:] = []

[09/23/2018 07:23:54 AM]    391                                         for path_dict in A:

[09/23/2018 07:23:54 AM]    392                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:23:54 AM]    393                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:23:54 AM]    394                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:23:54 AM]    395                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:23:54 AM]    396                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:23:54 AM]    397                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:23:54 AM]    398                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:23:54 AM]    399                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:23:54 AM]    400                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:23:54 AM]    401                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:23:54 AM]    402                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:23:54 AM]    403                                                             'path': totalPath,

[09/23/2018 07:23:54 AM]    404                                                             'path_rel': totalPathRel,

[09/23/2018 07:23:54 AM]    405                                                             'path_weights': totalWeights}

[09/23/2018 07:23:54 AM]    406                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:23:54 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:23:54 AM]    408                                                 B.append(potential_k)

[09/23/2018 07:23:54 AM]    409                                         removed_nodes.reverse()

[09/23/2018 07:23:54 AM]    410                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:23:54 AM]    411                                         removed_edges.reverse()

[09/23/2018 07:23:54 AM]    412                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:23:54 AM]    413                                     if len(B):

[09/23/2018 07:23:54 AM]    414                                         mergeSort(B,0,len(B)-1)

[09/23/2018 07:23:54 AM]    415                                         A.append(B[0])

[09/23/2018 07:23:54 AM]    416                                         B.pop(0)

[09/23/2018 07:23:54 AM]    417                                     else:

[09/23/2018 07:23:54 AM]    418                                         break

[09/23/2018 07:23:54 AM]    419                                 for path_dict in A:

[09/23/2018 07:23:54 AM]    420                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:23:54 AM]    421                                 return discovered_paths

[09/23/2018 07:23:54 AM] 


[09/23/2018 07:24:01 AM] Filename: streamminer2.py


[09/23/2018 07:24:01 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:24:01 AM] ================================================

[09/23/2018 07:24:01 AM]    368   2326.2 MiB   2326.2 MiB   @profile

[09/23/2018 07:24:01 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:24:01 AM]    370   2326.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:24:01 AM]    371   2349.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:24:01 AM]    372   2349.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:24:01 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:24:01 AM]    374   2349.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:24:01 AM]    375                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:24:01 AM]    376                                     'path': path_stack,

[09/23/2018 07:24:01 AM]    377                                     'path_rel': rel_stack,

[09/23/2018 07:24:01 AM]    378                                     'path_weights': weight_stack}]

[09/23/2018 07:24:01 AM]    379                                 B = []

[09/23/2018 07:24:01 AM]    380                                 removed_edges = []

[09/23/2018 07:24:01 AM]    381                                 removed_nodes = []

[09/23/2018 07:24:01 AM]    382                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:24:01 AM]    383                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:24:01 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:24:01 AM]    385                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:24:01 AM]    386                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:24:01 AM]    387                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:24:01 AM]    388                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:24:01 AM]    389                                         removed_edges[:] = []

[09/23/2018 07:24:01 AM]    390                                         removed_nodes[:] = []

[09/23/2018 07:24:01 AM]    391                                         for path_dict in A:

[09/23/2018 07:24:01 AM]    392                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:24:01 AM]    393                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:24:01 AM]    394                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:24:01 AM]    395                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:24:01 AM]    396                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:24:01 AM]    397                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:24:01 AM]    398                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:24:01 AM]    399                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:24:01 AM]    400                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:24:01 AM]    401                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:24:01 AM]    402                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:24:01 AM]    403                                                             'path': totalPath,

[09/23/2018 07:24:01 AM]    404                                                             'path_rel': totalPathRel,

[09/23/2018 07:24:01 AM]    405                                                             'path_weights': totalWeights}

[09/23/2018 07:24:01 AM]    406                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:24:01 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:24:01 AM]    408                                                 B.append(potential_k)

[09/23/2018 07:24:01 AM]    409                                         removed_nodes.reverse()

[09/23/2018 07:24:01 AM]    410                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:24:01 AM]    411                                         removed_edges.reverse()

[09/23/2018 07:24:01 AM]    412                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:24:01 AM]    413                                     if len(B):

[09/23/2018 07:24:01 AM]    414                                         mergeSort(B,0,len(B)-1)

[09/23/2018 07:24:01 AM]    415                                         A.append(B[0])

[09/23/2018 07:24:01 AM]    416                                         B.pop(0)

[09/23/2018 07:24:01 AM]    417                                     else:

[09/23/2018 07:24:01 AM]    418                                         break

[09/23/2018 07:24:01 AM]    419                                 for path_dict in A:

[09/23/2018 07:24:01 AM]    420                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:24:01 AM]    421                                 return discovered_paths

[09/23/2018 07:24:01 AM] 


[09/23/2018 07:25:38 AM] Filename: streamminer2.py


[09/23/2018 07:25:38 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:25:38 AM] ================================================

[09/23/2018 07:25:38 AM]    368   2349.3 MiB   2349.3 MiB   @profile

[09/23/2018 07:25:38 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:25:38 AM]    370   2349.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:25:38 AM]    371   2372.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:25:38 AM]    372   2372.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:25:38 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:25:38 AM]    374                                     return discovered_paths

[09/23/2018 07:25:38 AM]    375   2372.4 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:25:38 AM]    376   2372.4 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 07:25:38 AM]    377   2372.4 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 07:25:38 AM]    378   2372.4 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 07:25:38 AM]    379   2372.4 MiB      0.0 MiB       B = []

[09/23/2018 07:25:38 AM]    380   2372.4 MiB      0.0 MiB       removed_edges = []

[09/23/2018 07:25:38 AM]    381   2372.4 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 07:25:38 AM]    382   2742.4 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:25:38 AM]    383   2742.4 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:25:38 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:25:38 AM]    385   2719.3 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 07:25:38 AM]    386   2719.3 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:25:38 AM]    387   2719.3 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:25:38 AM]    388   2719.3 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:25:38 AM]    389   2719.3 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 07:25:38 AM]    390   2719.3 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 07:25:38 AM]    391   2719.3 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 07:25:38 AM]    392   2719.3 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:25:38 AM]    393   2719.3 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:25:38 AM]    394   2719.3 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 07:25:38 AM]    395   2719.3 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:25:38 AM]    396   2742.4 MiB    369.9 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:25:38 AM]    397   2742.4 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 07:25:38 AM]    398   2742.4 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:25:38 AM]    399   2742.4 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:25:38 AM]    400   2742.4 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:25:38 AM]    401   2742.4 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:25:38 AM]    402   2742.4 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:25:38 AM]    403   2742.4 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 07:25:38 AM]    404   2742.4 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 07:25:38 AM]    405   2742.4 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 07:25:38 AM]    406   2742.4 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 07:25:38 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:25:38 AM]    408   2742.4 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 07:25:38 AM]    409   2742.4 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 07:25:38 AM]    410   2742.4 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:25:38 AM]    411   2742.4 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 07:25:38 AM]    412   2742.4 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:25:38 AM]    413   2742.4 MiB      0.0 MiB           if len(B):

[09/23/2018 07:25:38 AM]    414   2742.4 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 07:25:38 AM]    415   2742.4 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 07:25:38 AM]    416   2742.4 MiB      0.0 MiB               B.pop(0)

[09/23/2018 07:25:38 AM]    417                                     else:

[09/23/2018 07:25:38 AM]    418                                         break

[09/23/2018 07:25:38 AM]    419   2742.4 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 07:25:38 AM]    420   2742.4 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:25:38 AM]    421   2742.4 MiB      0.0 MiB       return discovered_paths

[09/23/2018 07:25:38 AM] 


[09/23/2018 07:25:38 AM]  
[09/23/2018 07:25:38 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.0709806674345, Path (1):
[09/23/2018 07:25:38 AM] [482030] -189 (0.07)-> [2364618]

[09/23/2018 07:25:38 AM]  
[09/23/2018 07:25:38 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.189150057923, Path (3):
[09/23/2018 07:25:38 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -189 (0.08)-> [2364618]

[09/23/2018 07:25:38 AM]  
[09/23/2018 07:25:38 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.300590160143, Path (5):
[09/23/2018 07:25:38 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -123 (0.03)-> [3229261] -123 (0.06)-> [3641685] -189 (0.1)-> [2364618]

[09/23/2018 07:25:38 AM]  
[09/23/2018 07:25:38 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.307470839662, Path (7):
[09/23/2018 07:25:38 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -601 (0.04)-> [3741813] -601 (0.05)-> [679305] -601 (0.06)-> [2364618]

[09/23/2018 07:25:38 AM]  
[09/23/2018 07:25:38 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.298667188758, Path (7):
[09/23/2018 07:25:38 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -660 (0.03)-> [662] -660 (0.05)-> [2287973] -601 (0.06)-> [2364618]

[09/23/2018 07:25:49 AM] Filename: streamminer2.py


[09/23/2018 07:25:49 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:25:49 AM] ================================================

[09/23/2018 07:25:49 AM]    368   2742.4 MiB   2742.4 MiB   @profile

[09/23/2018 07:25:49 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:25:49 AM]    370   2742.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:25:49 AM]    371   2765.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:25:49 AM]    372   2765.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:25:49 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:25:49 AM]    374   2765.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:25:49 AM]    375                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:25:49 AM]    376                                     'path': path_stack,

[09/23/2018 07:25:49 AM]    377                                     'path_rel': rel_stack,

[09/23/2018 07:25:49 AM]    378                                     'path_weights': weight_stack}]

[09/23/2018 07:25:49 AM]    379                                 B = []

[09/23/2018 07:25:49 AM]    380                                 removed_edges = []

[09/23/2018 07:25:49 AM]    381                                 removed_nodes = []

[09/23/2018 07:25:49 AM]    382                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:25:49 AM]    383                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:25:49 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:25:49 AM]    385                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:25:49 AM]    386                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:25:49 AM]    387                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:25:49 AM]    388                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:25:49 AM]    389                                         removed_edges[:] = []

[09/23/2018 07:25:49 AM]    390                                         removed_nodes[:] = []

[09/23/2018 07:25:49 AM]    391                                         for path_dict in A:

[09/23/2018 07:25:49 AM]    392                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:25:49 AM]    393                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:25:49 AM]    394                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:25:49 AM]    395                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:25:49 AM]    396                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:25:49 AM]    397                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:25:49 AM]    398                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:25:49 AM]    399                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:25:49 AM]    400                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:25:49 AM]    401                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:25:49 AM]    402                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:25:49 AM]    403                                                             'path': totalPath,

[09/23/2018 07:25:49 AM]    404                                                             'path_rel': totalPathRel,

[09/23/2018 07:25:49 AM]    405                                                             'path_weights': totalWeights}

[09/23/2018 07:25:49 AM]    406                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:25:49 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:25:49 AM]    408                                                 B.append(potential_k)

[09/23/2018 07:25:49 AM]    409                                         removed_nodes.reverse()

[09/23/2018 07:25:49 AM]    410                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:25:49 AM]    411                                         removed_edges.reverse()

[09/23/2018 07:25:49 AM]    412                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:25:49 AM]    413                                     if len(B):

[09/23/2018 07:25:49 AM]    414                                         mergeSort(B,0,len(B)-1)

[09/23/2018 07:25:49 AM]    415                                         A.append(B[0])

[09/23/2018 07:25:49 AM]    416                                         B.pop(0)

[09/23/2018 07:25:49 AM]    417                                     else:

[09/23/2018 07:25:49 AM]    418                                         break

[09/23/2018 07:25:49 AM]    419                                 for path_dict in A:

[09/23/2018 07:25:49 AM]    420                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:25:49 AM]    421                                 return discovered_paths

[09/23/2018 07:25:49 AM] 


[09/23/2018 07:26:03 AM] Filename: streamminer2.py


[09/23/2018 07:26:03 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:26:03 AM] ================================================

[09/23/2018 07:26:03 AM]    368   2765.5 MiB   2765.5 MiB   @profile

[09/23/2018 07:26:03 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:26:03 AM]    370   2765.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:26:03 AM]    371   2788.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:26:03 AM]    372   2788.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:26:03 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:26:03 AM]    374   2788.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:26:03 AM]    375                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:26:03 AM]    376                                     'path': path_stack,

[09/23/2018 07:26:03 AM]    377                                     'path_rel': rel_stack,

[09/23/2018 07:26:03 AM]    378                                     'path_weights': weight_stack}]

[09/23/2018 07:26:03 AM]    379                                 B = []

[09/23/2018 07:26:03 AM]    380                                 removed_edges = []

[09/23/2018 07:26:03 AM]    381                                 removed_nodes = []

[09/23/2018 07:26:03 AM]    382                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:26:03 AM]    383                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:26:03 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:26:03 AM]    385                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:26:03 AM]    386                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:26:03 AM]    387                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:26:03 AM]    388                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:26:03 AM]    389                                         removed_edges[:] = []

[09/23/2018 07:26:03 AM]    390                                         removed_nodes[:] = []

[09/23/2018 07:26:03 AM]    391                                         for path_dict in A:

[09/23/2018 07:26:03 AM]    392                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:26:03 AM]    393                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:26:03 AM]    394                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:26:03 AM]    395                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:26:03 AM]    396                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:26:03 AM]    397                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:26:03 AM]    398                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:26:03 AM]    399                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:26:03 AM]    400                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:26:03 AM]    401                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:26:03 AM]    402                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:26:03 AM]    403                                                             'path': totalPath,

[09/23/2018 07:26:03 AM]    404                                                             'path_rel': totalPathRel,

[09/23/2018 07:26:03 AM]    405                                                             'path_weights': totalWeights}

[09/23/2018 07:26:03 AM]    406                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:26:03 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:26:03 AM]    408                                                 B.append(potential_k)

[09/23/2018 07:26:03 AM]    409                                         removed_nodes.reverse()

[09/23/2018 07:26:03 AM]    410                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:26:03 AM]    411                                         removed_edges.reverse()

[09/23/2018 07:26:03 AM]    412                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:26:03 AM]    413                                     if len(B):

[09/23/2018 07:26:03 AM]    414                                         mergeSort(B,0,len(B)-1)

[09/23/2018 07:26:03 AM]    415                                         A.append(B[0])

[09/23/2018 07:26:03 AM]    416                                         B.pop(0)

[09/23/2018 07:26:03 AM]    417                                     else:

[09/23/2018 07:26:03 AM]    418                                         break

[09/23/2018 07:26:03 AM]    419                                 for path_dict in A:

[09/23/2018 07:26:03 AM]    420                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:26:03 AM]    421                                 return discovered_paths

[09/23/2018 07:26:03 AM] 


[09/23/2018 07:26:11 AM] Filename: streamminer2.py


[09/23/2018 07:26:11 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 07:26:11 AM] ================================================

[09/23/2018 07:26:11 AM]    368   2788.6 MiB   2788.6 MiB   @profile

[09/23/2018 07:26:11 AM]    369                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 07:26:11 AM]    370   2788.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 07:26:11 AM]    371   2811.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:26:11 AM]    372   2811.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 07:26:11 AM]    373                                     ## if the first shortest path is empty, retuen empty discoverd_paths

[09/23/2018 07:26:11 AM]    374   2811.7 MiB      0.0 MiB           return discovered_paths

[09/23/2018 07:26:11 AM]    375                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 07:26:11 AM]    376                                     'path': path_stack,

[09/23/2018 07:26:11 AM]    377                                     'path_rel': rel_stack,

[09/23/2018 07:26:11 AM]    378                                     'path_weights': weight_stack}]

[09/23/2018 07:26:11 AM]    379                                 B = []

[09/23/2018 07:26:11 AM]    380                                 removed_edges = []

[09/23/2018 07:26:11 AM]    381                                 removed_nodes = []

[09/23/2018 07:26:11 AM]    382                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 07:26:11 AM]    383                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 07:26:11 AM]    384                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 07:26:11 AM]    385                                         spurNode = A[-1]['path'][i]

[09/23/2018 07:26:11 AM]    386                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 07:26:11 AM]    387                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 07:26:11 AM]    388                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 07:26:11 AM]    389                                         removed_edges[:] = []

[09/23/2018 07:26:11 AM]    390                                         removed_nodes[:] = []

[09/23/2018 07:26:11 AM]    391                                         for path_dict in A:

[09/23/2018 07:26:11 AM]    392                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 07:26:11 AM]    393                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 07:26:11 AM]    394                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 07:26:11 AM]    395                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 07:26:11 AM]    396                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 07:26:11 AM]    397                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 07:26:11 AM]    398                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 07:26:11 AM]    399                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 07:26:11 AM]    400                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 07:26:11 AM]    401                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 07:26:11 AM]    402                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 07:26:11 AM]    403                                                             'path': totalPath,

[09/23/2018 07:26:11 AM]    404                                                             'path_rel': totalPathRel,

[09/23/2018 07:26:11 AM]    405                                                             'path_weights': totalWeights}

[09/23/2018 07:26:11 AM]    406                                             if not (potential_k in B or potential_k in A):

[09/23/2018 07:26:11 AM]    407                                                 # removes repititive paths in A & B

[09/23/2018 07:26:11 AM]    408                                                 B.append(potential_k)

[09/23/2018 07:26:11 AM]    409                                         removed_nodes.reverse()

[09/23/2018 07:26:11 AM]    410                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 07:26:11 AM]    411                                         removed_edges.reverse()

[09/23/2018 07:26:11 AM]    412                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 07:26:11 AM]    413                                     if len(B):

[09/23/2018 07:26:11 AM]    414                                         mergeSort(B,0,len(B)-1)

[09/23/2018 07:26:11 AM]    415                                         A.append(B[0])

[09/23/2018 07:26:11 AM]    416                                         B.pop(0)

[09/23/2018 07:26:11 AM]    417                                     else:

[09/23/2018 07:26:11 AM]    418                                         break

[09/23/2018 07:26:11 AM]    419                                 for path_dict in A:

[09/23/2018 07:26:11 AM]    420                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 07:26:11 AM]    421                                 return discovered_paths

[09/23/2018 07:26:11 AM] 



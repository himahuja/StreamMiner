[09/23/2018 08:16:27 AM] Launching sm..
[09/23/2018 08:16:27 AM] Dataset: sub_sample.csv
[09/23/2018 08:16:27 AM] Output dir: /home/galois/Documents/streamminer/output
[09/23/2018 08:16:27 AM] Read data: (39, 7) sub_sample.csv
[09/23/2018 08:16:27 AM] Note: Found non-NA records: (39, 7)
[09/23/2018 08:16:27 AM] Reconstructing graph from /home/galois/Documents/streamminer/data/kg/_undir
[09/23/2018 08:16:27 AM] 

[09/23/2018 08:16:27 AM] => Loaded: undir_data.npy
[09/23/2018 08:16:27 AM] 

[09/23/2018 08:16:27 AM] => Loaded: undir_indptr.npy
[09/23/2018 08:16:27 AM] 

[09/23/2018 08:16:27 AM] => Loaded: undir_indices.npy
[09/23/2018 08:16:27 AM] 

[09/23/2018 08:16:27 AM] => Loaded: undir_indeg_vec.npy
[09/23/2018 08:16:27 AM] 

[09/23/2018 08:16:27 AM] => Graph loaded: 0.51 secs.

[09/23/2018 08:16:27 AM] 

[09/23/2018 08:16:28 AM] PID is: 599.0, with type: float64
[09/23/2018 08:16:33 AM] => Path extraction..(this can take a while)
[09/23/2018 08:17:44 AM] Filename: streamminer2.py


[09/23/2018 08:17:44 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:17:44 AM] ================================================

[09/23/2018 08:17:44 AM]    365   1944.3 MiB   1944.3 MiB   @profile

[09/23/2018 08:17:44 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:17:44 AM]    367   1944.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:17:44 AM]    368   1967.4 MiB     23.2 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:17:44 AM]    369   1967.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:17:44 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:17:44 AM]    371                                     return discovered_paths

[09/23/2018 08:17:44 AM]    372   1967.4 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:17:44 AM]    373   1967.4 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:17:44 AM]    374   1967.4 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:17:44 AM]    375   1967.4 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:17:44 AM]    376   1967.4 MiB      0.0 MiB       B = []

[09/23/2018 08:17:44 AM]    377   1967.4 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:17:44 AM]    378   1967.4 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:17:44 AM]    379   2313.3 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:17:44 AM]    380   2313.3 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:17:44 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:17:44 AM]    382   2290.1 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:17:44 AM]    383   2290.1 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:17:44 AM]    384   2290.1 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:17:44 AM]    385   2290.1 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:17:44 AM]    386   2290.1 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:17:44 AM]    387   2290.1 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:17:44 AM]    388   2290.1 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:17:44 AM]    389   2290.1 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:17:44 AM]    390   2290.1 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:17:44 AM]    391   2290.1 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:17:44 AM]    392   2290.1 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:17:44 AM]    393   2313.3 MiB    345.8 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:17:44 AM]    394   2313.3 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:17:44 AM]    395   2313.3 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:17:44 AM]    396   2313.3 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:17:44 AM]    397   2313.3 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:17:44 AM]    398   2313.3 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:17:44 AM]    399   2313.3 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:17:44 AM]    400   2313.3 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:17:44 AM]    401   2313.3 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:17:44 AM]    402   2313.3 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:17:44 AM]    403   2313.3 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:17:44 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:17:44 AM]    405   2313.3 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:17:44 AM]    406   2313.3 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:17:44 AM]    407   2313.3 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:17:44 AM]    408   2313.3 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:17:44 AM]    409   2313.3 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:17:44 AM]    410   2313.3 MiB      0.0 MiB           if len(B):

[09/23/2018 08:17:44 AM]    411   2313.3 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:17:44 AM]    412   2313.3 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:17:44 AM]    413   2313.3 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:17:44 AM]    414                                     else:

[09/23/2018 08:17:44 AM]    415                                         break

[09/23/2018 08:17:44 AM]    416   2313.3 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:17:44 AM]    417   2313.3 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:17:44 AM]    418   2313.3 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:17:44 AM] 


[09/23/2018 08:17:44 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.0677970562743, Path (1):
[09/23/2018 08:17:44 AM] [392035] -189 (0.07)-> [2115741]

[09/23/2018 08:17:44 AM]  
[09/23/2018 08:17:44 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.129642864833, Path (3):
[09/23/2018 08:17:44 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.06)-> [2115741]

[09/23/2018 08:17:44 AM]  
[09/23/2018 08:17:44 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.227870891895, Path (3):
[09/23/2018 08:17:44 AM] [392035] -660 (0.03)-> [78] -660 (0.06)-> [532169] -236 (0.14)-> [2115741]

[09/23/2018 08:17:44 AM]  
[09/23/2018 08:17:44 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.32246592914, Path (5):
[09/23/2018 08:17:44 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [3040313] -236 (0.08)-> [532169] -236 (0.13)-> [2115741]

[09/23/2018 08:17:44 AM]  
[09/23/2018 08:17:44 AM] SPO: [ 392035.0 599.0 2115741.0], Score: 0.292163189332, Path (5):
[09/23/2018 08:17:44 AM] [392035] -660 (0.03)-> [78] -660 (0.04)-> [4475218] -236 (0.04)-> [1006463] -236 (0.07)-> [532169] -236 (0.11)-> [2115741]

[09/23/2018 08:17:51 AM] Filename: streamminer2.py


[09/23/2018 08:17:51 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:17:51 AM] ================================================

[09/23/2018 08:17:51 AM]    365   2313.3 MiB   2313.3 MiB   @profile

[09/23/2018 08:17:51 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:17:51 AM]    367   2313.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:17:51 AM]    368   2336.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:17:51 AM]    369   2336.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:17:51 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:17:51 AM]    371   2336.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:17:51 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:17:51 AM]    373                                     'path': path_stack,

[09/23/2018 08:17:51 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:17:51 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:17:51 AM]    376                                 B = []

[09/23/2018 08:17:51 AM]    377                                 removed_edges = []

[09/23/2018 08:17:51 AM]    378                                 removed_nodes = []

[09/23/2018 08:17:51 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:17:51 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:17:51 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:17:51 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:17:51 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:17:51 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:17:51 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:17:51 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:17:51 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:17:51 AM]    388                                         for path_dict in A:

[09/23/2018 08:17:51 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:17:51 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:17:51 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:17:51 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:17:51 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:17:51 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:17:51 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:17:51 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:17:51 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:17:51 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:17:51 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:17:51 AM]    400                                                             'path': totalPath,

[09/23/2018 08:17:51 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:17:51 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:17:51 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:17:51 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:17:51 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:17:51 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:17:51 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:17:51 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:17:51 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:17:51 AM]    410                                     if len(B):

[09/23/2018 08:17:51 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:17:51 AM]    412                                         A.append(B[0])

[09/23/2018 08:17:51 AM]    413                                         B.pop(0)

[09/23/2018 08:17:51 AM]    414                                     else:

[09/23/2018 08:17:51 AM]    415                                         break

[09/23/2018 08:17:51 AM]    416                                 for path_dict in A:

[09/23/2018 08:17:51 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:17:51 AM]    418                                 return discovered_paths

[09/23/2018 08:17:51 AM] 


[09/23/2018 08:18:05 AM] Filename: streamminer2.py


[09/23/2018 08:18:05 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:18:05 AM] ================================================

[09/23/2018 08:18:05 AM]    365   2336.4 MiB   2336.4 MiB   @profile

[09/23/2018 08:18:05 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:18:05 AM]    367   2336.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:18:05 AM]    368   2359.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:18:05 AM]    369   2359.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:18:05 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:18:05 AM]    371   2359.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:18:05 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:18:05 AM]    373                                     'path': path_stack,

[09/23/2018 08:18:05 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:18:05 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:18:05 AM]    376                                 B = []

[09/23/2018 08:18:05 AM]    377                                 removed_edges = []

[09/23/2018 08:18:05 AM]    378                                 removed_nodes = []

[09/23/2018 08:18:05 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:18:05 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:18:05 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:18:05 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:18:05 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:18:05 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:18:05 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:18:05 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:18:05 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:18:05 AM]    388                                         for path_dict in A:

[09/23/2018 08:18:05 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:18:05 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:18:05 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:18:05 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:18:05 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:18:05 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:18:05 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:18:05 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:18:05 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:18:05 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:18:05 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:18:05 AM]    400                                                             'path': totalPath,

[09/23/2018 08:18:05 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:18:05 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:18:05 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:18:05 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:18:05 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:18:05 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:18:05 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:18:05 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:18:05 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:18:05 AM]    410                                     if len(B):

[09/23/2018 08:18:05 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:18:05 AM]    412                                         A.append(B[0])

[09/23/2018 08:18:05 AM]    413                                         B.pop(0)

[09/23/2018 08:18:05 AM]    414                                     else:

[09/23/2018 08:18:05 AM]    415                                         break

[09/23/2018 08:18:05 AM]    416                                 for path_dict in A:

[09/23/2018 08:18:05 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:18:05 AM]    418                                 return discovered_paths

[09/23/2018 08:18:05 AM] 


[09/23/2018 08:18:14 AM] Filename: streamminer2.py


[09/23/2018 08:18:14 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:18:14 AM] ================================================

[09/23/2018 08:18:14 AM]    365   2359.5 MiB   2359.5 MiB   @profile

[09/23/2018 08:18:14 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:18:14 AM]    367   2359.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:18:14 AM]    368   2382.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:18:14 AM]    369   2382.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:18:14 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:18:14 AM]    371   2382.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:18:14 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:18:14 AM]    373                                     'path': path_stack,

[09/23/2018 08:18:14 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:18:14 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:18:14 AM]    376                                 B = []

[09/23/2018 08:18:14 AM]    377                                 removed_edges = []

[09/23/2018 08:18:14 AM]    378                                 removed_nodes = []

[09/23/2018 08:18:14 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:18:14 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:18:14 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:18:14 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:18:14 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:18:14 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:18:14 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:18:14 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:18:14 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:18:14 AM]    388                                         for path_dict in A:

[09/23/2018 08:18:14 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:18:14 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:18:14 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:18:14 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:18:14 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:18:14 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:18:14 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:18:14 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:18:14 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:18:14 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:18:14 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:18:14 AM]    400                                                             'path': totalPath,

[09/23/2018 08:18:14 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:18:14 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:18:14 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:18:14 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:18:14 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:18:14 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:18:14 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:18:14 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:18:14 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:18:14 AM]    410                                     if len(B):

[09/23/2018 08:18:14 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:18:14 AM]    412                                         A.append(B[0])

[09/23/2018 08:18:14 AM]    413                                         B.pop(0)

[09/23/2018 08:18:14 AM]    414                                     else:

[09/23/2018 08:18:14 AM]    415                                         break

[09/23/2018 08:18:14 AM]    416                                 for path_dict in A:

[09/23/2018 08:18:14 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:18:14 AM]    418                                 return discovered_paths

[09/23/2018 08:18:14 AM] 


[09/23/2018 08:19:58 AM] Filename: streamminer2.py


[09/23/2018 08:19:58 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:19:58 AM] ================================================

[09/23/2018 08:19:58 AM]    365   2382.6 MiB   2382.6 MiB   @profile

[09/23/2018 08:19:58 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:19:58 AM]    367   2382.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:19:58 AM]    368   2405.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:19:58 AM]    369   2405.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:19:58 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:19:58 AM]    371                                     return discovered_paths

[09/23/2018 08:19:58 AM]    372   2405.8 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:19:58 AM]    373   2405.8 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:19:58 AM]    374   2405.8 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:19:58 AM]    375   2405.8 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:19:58 AM]    376   2405.8 MiB      0.0 MiB       B = []

[09/23/2018 08:19:58 AM]    377   2405.8 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:19:58 AM]    378   2405.8 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:19:58 AM]    379   2775.7 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:19:58 AM]    380   2775.7 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:19:58 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:19:58 AM]    382   2752.6 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:19:58 AM]    383   2752.6 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:19:58 AM]    384   2752.6 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:19:58 AM]    385   2752.6 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:19:58 AM]    386   2752.6 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:19:58 AM]    387   2752.6 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:19:58 AM]    388   2752.6 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:19:58 AM]    389   2752.6 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:19:58 AM]    390   2752.6 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:19:58 AM]    391   2752.6 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:19:58 AM]    392   2752.6 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:19:58 AM]    393   2775.7 MiB    369.9 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:19:58 AM]    394   2775.7 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:19:58 AM]    395   2775.7 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:19:58 AM]    396   2775.7 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:19:58 AM]    397   2775.7 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:19:58 AM]    398   2775.7 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:19:58 AM]    399   2775.7 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:19:58 AM]    400   2775.7 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:19:58 AM]    401   2775.7 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:19:58 AM]    402   2775.7 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:19:58 AM]    403   2775.7 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:19:58 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:19:58 AM]    405   2775.7 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:19:58 AM]    406   2775.7 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:19:58 AM]    407   2775.7 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:19:58 AM]    408   2775.7 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:19:58 AM]    409   2775.7 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:19:58 AM]    410   2775.7 MiB      0.0 MiB           if len(B):

[09/23/2018 08:19:58 AM]    411   2775.7 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:19:58 AM]    412   2775.7 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:19:58 AM]    413   2775.7 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:19:58 AM]    414                                     else:

[09/23/2018 08:19:58 AM]    415                                         break

[09/23/2018 08:19:58 AM]    416   2775.7 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:19:58 AM]    417   2775.7 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:19:58 AM]    418   2775.7 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:19:58 AM] 


[09/23/2018 08:19:58 AM]  
[09/23/2018 08:19:58 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.0709806674345, Path (1):
[09/23/2018 08:19:58 AM] [482030] -189 (0.07)-> [2364618]

[09/23/2018 08:19:58 AM]  
[09/23/2018 08:19:58 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.189150057923, Path (3):
[09/23/2018 08:19:58 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -189 (0.08)-> [2364618]

[09/23/2018 08:19:58 AM]  
[09/23/2018 08:19:58 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.300590160143, Path (5):
[09/23/2018 08:19:58 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -123 (0.03)-> [3229261] -123 (0.06)-> [3641685] -189 (0.1)-> [2364618]

[09/23/2018 08:19:58 AM]  
[09/23/2018 08:19:58 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.307470839662, Path (7):
[09/23/2018 08:19:58 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -601 (0.04)-> [3741813] -601 (0.05)-> [679305] -601 (0.06)-> [2364618]

[09/23/2018 08:19:58 AM]  
[09/23/2018 08:19:58 AM] SPO: [ 482030.0 599.0 2364618.0], Score: 0.298667188758, Path (7):
[09/23/2018 08:19:58 AM] [482030] -462 (0.04)-> [4160079] -462 (0.07)-> [4107784] -65 (0.02)-> [3229234] -339 (0.03)-> [1619701] -660 (0.03)-> [662] -660 (0.05)-> [2287973] -601 (0.06)-> [2364618]

[09/23/2018 08:20:11 AM] Filename: streamminer2.py


[09/23/2018 08:20:11 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:20:11 AM] ================================================

[09/23/2018 08:20:11 AM]    365   2775.7 MiB   2775.7 MiB   @profile

[09/23/2018 08:20:11 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:20:11 AM]    367   2775.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:20:11 AM]    368   2798.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:20:11 AM]    369   2798.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:20:11 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:20:11 AM]    371   2798.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:20:11 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:20:11 AM]    373                                     'path': path_stack,

[09/23/2018 08:20:11 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:20:11 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:20:11 AM]    376                                 B = []

[09/23/2018 08:20:11 AM]    377                                 removed_edges = []

[09/23/2018 08:20:11 AM]    378                                 removed_nodes = []

[09/23/2018 08:20:11 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:20:11 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:20:11 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:20:11 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:20:11 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:20:11 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:20:11 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:20:11 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:20:11 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:20:11 AM]    388                                         for path_dict in A:

[09/23/2018 08:20:11 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:20:11 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:20:11 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:20:11 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:20:11 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:20:11 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:20:11 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:20:11 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:20:11 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:20:11 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:20:11 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:20:11 AM]    400                                                             'path': totalPath,

[09/23/2018 08:20:11 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:20:11 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:20:11 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:20:11 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:20:11 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:20:11 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:20:11 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:20:11 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:20:11 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:20:11 AM]    410                                     if len(B):

[09/23/2018 08:20:11 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:20:11 AM]    412                                         A.append(B[0])

[09/23/2018 08:20:11 AM]    413                                         B.pop(0)

[09/23/2018 08:20:11 AM]    414                                     else:

[09/23/2018 08:20:11 AM]    415                                         break

[09/23/2018 08:20:11 AM]    416                                 for path_dict in A:

[09/23/2018 08:20:11 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:20:11 AM]    418                                 return discovered_paths

[09/23/2018 08:20:11 AM] 


[09/23/2018 08:20:25 AM] Filename: streamminer2.py


[09/23/2018 08:20:25 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:20:25 AM] ================================================

[09/23/2018 08:20:25 AM]    365   2798.8 MiB   2798.8 MiB   @profile

[09/23/2018 08:20:25 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:20:25 AM]    367   2798.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:20:25 AM]    368   2821.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:20:25 AM]    369   2821.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:20:25 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:20:25 AM]    371   2821.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:20:25 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:20:25 AM]    373                                     'path': path_stack,

[09/23/2018 08:20:25 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:20:25 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:20:25 AM]    376                                 B = []

[09/23/2018 08:20:25 AM]    377                                 removed_edges = []

[09/23/2018 08:20:25 AM]    378                                 removed_nodes = []

[09/23/2018 08:20:25 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:20:25 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:20:25 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:20:25 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:20:25 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:20:25 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:20:25 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:20:25 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:20:25 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:20:25 AM]    388                                         for path_dict in A:

[09/23/2018 08:20:25 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:20:25 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:20:25 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:20:25 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:20:25 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:20:25 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:20:25 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:20:25 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:20:25 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:20:25 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:20:25 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:20:25 AM]    400                                                             'path': totalPath,

[09/23/2018 08:20:25 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:20:25 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:20:25 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:20:25 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:20:25 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:20:25 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:20:25 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:20:25 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:20:25 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:20:25 AM]    410                                     if len(B):

[09/23/2018 08:20:25 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:20:25 AM]    412                                         A.append(B[0])

[09/23/2018 08:20:25 AM]    413                                         B.pop(0)

[09/23/2018 08:20:25 AM]    414                                     else:

[09/23/2018 08:20:25 AM]    415                                         break

[09/23/2018 08:20:25 AM]    416                                 for path_dict in A:

[09/23/2018 08:20:25 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:20:25 AM]    418                                 return discovered_paths

[09/23/2018 08:20:25 AM] 


[09/23/2018 08:20:33 AM] Filename: streamminer2.py


[09/23/2018 08:20:33 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:20:33 AM] ================================================

[09/23/2018 08:20:33 AM]    365   2821.9 MiB   2821.9 MiB   @profile

[09/23/2018 08:20:33 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:20:33 AM]    367   2821.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:20:33 AM]    368   2845.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:20:33 AM]    369   2845.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:20:33 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:20:33 AM]    371   2845.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:20:33 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:20:33 AM]    373                                     'path': path_stack,

[09/23/2018 08:20:33 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:20:33 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:20:33 AM]    376                                 B = []

[09/23/2018 08:20:33 AM]    377                                 removed_edges = []

[09/23/2018 08:20:33 AM]    378                                 removed_nodes = []

[09/23/2018 08:20:33 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:20:33 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:20:33 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:20:33 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:20:33 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:20:33 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:20:33 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:20:33 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:20:33 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:20:33 AM]    388                                         for path_dict in A:

[09/23/2018 08:20:33 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:20:33 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:20:33 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:20:33 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:20:33 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:20:33 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:20:33 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:20:33 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:20:33 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:20:33 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:20:33 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:20:33 AM]    400                                                             'path': totalPath,

[09/23/2018 08:20:33 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:20:33 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:20:33 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:20:33 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:20:33 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:20:33 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:20:33 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:20:33 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:20:33 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:20:33 AM]    410                                     if len(B):

[09/23/2018 08:20:33 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:20:33 AM]    412                                         A.append(B[0])

[09/23/2018 08:20:33 AM]    413                                         B.pop(0)

[09/23/2018 08:20:33 AM]    414                                     else:

[09/23/2018 08:20:33 AM]    415                                         break

[09/23/2018 08:20:33 AM]    416                                 for path_dict in A:

[09/23/2018 08:20:33 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:20:33 AM]    418                                 return discovered_paths

[09/23/2018 08:20:33 AM] 


[09/23/2018 08:21:28 AM] Filename: streamminer2.py


[09/23/2018 08:21:28 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:21:28 AM] ================================================

[09/23/2018 08:21:28 AM]    365   2845.1 MiB   2845.1 MiB   @profile

[09/23/2018 08:21:28 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:21:28 AM]    367   2845.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:21:28 AM]    368   2868.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:21:28 AM]    369   2868.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:21:28 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:21:28 AM]    371                                     return discovered_paths

[09/23/2018 08:21:28 AM]    372   2868.2 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:21:28 AM]    373   2868.2 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:21:28 AM]    374   2868.2 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:21:28 AM]    375   2868.2 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:21:28 AM]    376   2868.2 MiB      0.0 MiB       B = []

[09/23/2018 08:21:28 AM]    377   2868.2 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:21:28 AM]    378   2868.2 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:21:28 AM]    379   3145.6 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:21:28 AM]    380   3145.6 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:21:28 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:21:28 AM]    382   3122.5 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:21:28 AM]    383   3122.5 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:21:28 AM]    384   3122.5 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:21:28 AM]    385   3122.5 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:21:28 AM]    386   3122.5 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:21:28 AM]    387   3122.5 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:21:28 AM]    388   3122.5 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:21:28 AM]    389   3122.5 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:21:28 AM]    390   3122.5 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:21:28 AM]    391   3122.5 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:21:28 AM]    392   3122.5 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:21:28 AM]    393   3145.6 MiB    277.4 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:21:28 AM]    394   3145.6 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:21:28 AM]    395   3145.6 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:21:28 AM]    396   3145.6 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:21:28 AM]    397   3145.6 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:21:28 AM]    398   3145.6 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:21:28 AM]    399   3145.6 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:21:28 AM]    400   3145.6 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:21:28 AM]    401   3145.6 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:21:28 AM]    402   3145.6 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:21:28 AM]    403   3145.6 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:21:28 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:21:28 AM]    405   3145.6 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:21:28 AM]    406   3145.6 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:21:28 AM]    407   3145.6 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:21:28 AM]    408   3145.6 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:21:28 AM]    409   3145.6 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:21:28 AM]    410   3145.6 MiB      0.0 MiB           if len(B):

[09/23/2018 08:21:28 AM]    411   3145.6 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:21:28 AM]    412   3145.6 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:21:28 AM]    413   3145.6 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:21:28 AM]    414                                     else:

[09/23/2018 08:21:28 AM]    415                                         break

[09/23/2018 08:21:28 AM]    416   3145.6 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:21:28 AM]    417   3145.6 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:21:28 AM]    418   3145.6 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:21:28 AM] 


[09/23/2018 08:21:28 AM]  
[09/23/2018 08:21:28 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.0709806674345, Path (1):
[09/23/2018 08:21:28 AM] [494082] -189 (0.07)-> [4119746]

[09/23/2018 08:21:28 AM]  
[09/23/2018 08:21:28 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.185839285232, Path (3):
[09/23/2018 08:21:28 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -189 (0.08)-> [4119746]

[09/23/2018 08:21:28 AM]  
[09/23/2018 08:21:28 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.185223180919, Path (3):
[09/23/2018 08:21:28 AM] [494082] -462 (0.04)-> [1095182] -462 (0.07)-> [4421062] -189 (0.08)-> [4119746]

[09/23/2018 08:21:28 AM]  
[09/23/2018 08:21:28 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.236441046223, Path (5):
[09/23/2018 08:21:28 AM] [494082] -462 (0.04)-> [4182344] -462 (0.07)-> [1596079] -65 (0.03)-> [3516497] -65 (0.04)-> [4370446] -189 (0.06)-> [4119746]

[09/23/2018 08:21:28 AM]  
[09/23/2018 08:21:28 AM] SPO: [ 494082.0 599.0 4119746.0], Score: 0.318141167082, Path (3):
[09/23/2018 08:21:28 AM] [494082] -462 (0.04)-> [4182344] -462 (0.06)-> [3400649] -189 (0.23)-> [4119746]

[09/23/2018 08:21:39 AM] Filename: streamminer2.py


[09/23/2018 08:21:39 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:21:39 AM] ================================================

[09/23/2018 08:21:39 AM]    365   3145.6 MiB   3145.6 MiB   @profile

[09/23/2018 08:21:39 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:21:39 AM]    367   3145.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:21:39 AM]    368   3168.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:21:39 AM]    369   3168.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:21:39 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:21:39 AM]    371   3168.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:21:39 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:21:39 AM]    373                                     'path': path_stack,

[09/23/2018 08:21:39 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:21:39 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:21:39 AM]    376                                 B = []

[09/23/2018 08:21:39 AM]    377                                 removed_edges = []

[09/23/2018 08:21:39 AM]    378                                 removed_nodes = []

[09/23/2018 08:21:39 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:21:39 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:21:39 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:21:39 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:21:39 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:21:39 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:21:39 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:21:39 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:21:39 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:21:39 AM]    388                                         for path_dict in A:

[09/23/2018 08:21:39 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:21:39 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:21:39 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:21:39 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:21:39 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:21:39 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:21:39 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:21:39 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:21:39 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:21:39 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:21:39 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:21:39 AM]    400                                                             'path': totalPath,

[09/23/2018 08:21:39 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:21:39 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:21:39 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:21:39 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:21:39 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:21:39 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:21:39 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:21:39 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:21:39 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:21:39 AM]    410                                     if len(B):

[09/23/2018 08:21:39 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:21:39 AM]    412                                         A.append(B[0])

[09/23/2018 08:21:39 AM]    413                                         B.pop(0)

[09/23/2018 08:21:39 AM]    414                                     else:

[09/23/2018 08:21:39 AM]    415                                         break

[09/23/2018 08:21:39 AM]    416                                 for path_dict in A:

[09/23/2018 08:21:39 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:21:39 AM]    418                                 return discovered_paths

[09/23/2018 08:21:39 AM] 


[09/23/2018 08:21:53 AM] Filename: streamminer2.py


[09/23/2018 08:21:53 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:21:53 AM] ================================================

[09/23/2018 08:21:53 AM]    365   3168.8 MiB   3168.8 MiB   @profile

[09/23/2018 08:21:53 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:21:53 AM]    367   3168.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:21:53 AM]    368   3191.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:21:53 AM]    369   3191.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:21:53 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:21:53 AM]    371   3191.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:21:53 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:21:53 AM]    373                                     'path': path_stack,

[09/23/2018 08:21:53 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:21:53 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:21:53 AM]    376                                 B = []

[09/23/2018 08:21:53 AM]    377                                 removed_edges = []

[09/23/2018 08:21:53 AM]    378                                 removed_nodes = []

[09/23/2018 08:21:53 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:21:53 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:21:53 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:21:53 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:21:53 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:21:53 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:21:53 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:21:53 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:21:53 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:21:53 AM]    388                                         for path_dict in A:

[09/23/2018 08:21:53 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:21:53 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:21:53 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:21:53 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:21:53 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:21:53 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:21:53 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:21:53 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:21:53 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:21:53 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:21:53 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:21:53 AM]    400                                                             'path': totalPath,

[09/23/2018 08:21:53 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:21:53 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:21:53 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:21:53 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:21:53 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:21:53 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:21:53 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:21:53 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:21:53 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:21:53 AM]    410                                     if len(B):

[09/23/2018 08:21:53 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:21:53 AM]    412                                         A.append(B[0])

[09/23/2018 08:21:53 AM]    413                                         B.pop(0)

[09/23/2018 08:21:53 AM]    414                                     else:

[09/23/2018 08:21:53 AM]    415                                         break

[09/23/2018 08:21:53 AM]    416                                 for path_dict in A:

[09/23/2018 08:21:53 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:21:53 AM]    418                                 return discovered_paths

[09/23/2018 08:21:53 AM] 


[09/23/2018 08:22:01 AM] Filename: streamminer2.py


[09/23/2018 08:22:01 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:22:01 AM] ================================================

[09/23/2018 08:22:01 AM]    365   3191.9 MiB   3191.9 MiB   @profile

[09/23/2018 08:22:01 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:22:01 AM]    367   3191.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:22:01 AM]    368   3215.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:22:01 AM]    369   3215.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:22:01 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:22:01 AM]    371   3215.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:22:01 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:22:01 AM]    373                                     'path': path_stack,

[09/23/2018 08:22:01 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:22:01 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:22:01 AM]    376                                 B = []

[09/23/2018 08:22:01 AM]    377                                 removed_edges = []

[09/23/2018 08:22:01 AM]    378                                 removed_nodes = []

[09/23/2018 08:22:01 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:22:01 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:22:01 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:22:01 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:22:01 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:22:01 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:22:01 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:22:01 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:22:01 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:22:01 AM]    388                                         for path_dict in A:

[09/23/2018 08:22:01 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:22:01 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:22:01 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:22:01 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:22:01 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:22:01 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:22:01 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:22:01 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:22:01 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:22:01 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:22:01 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:22:01 AM]    400                                                             'path': totalPath,

[09/23/2018 08:22:01 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:22:01 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:22:01 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:22:01 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:22:01 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:22:01 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:22:01 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:22:01 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:22:01 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:22:01 AM]    410                                     if len(B):

[09/23/2018 08:22:01 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:22:01 AM]    412                                         A.append(B[0])

[09/23/2018 08:22:01 AM]    413                                         B.pop(0)

[09/23/2018 08:22:01 AM]    414                                     else:

[09/23/2018 08:22:01 AM]    415                                         break

[09/23/2018 08:22:01 AM]    416                                 for path_dict in A:

[09/23/2018 08:22:01 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:22:01 AM]    418                                 return discovered_paths

[09/23/2018 08:22:01 AM] 


[09/23/2018 08:23:27 AM] Filename: streamminer2.py


[09/23/2018 08:23:27 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:23:27 AM] ================================================

[09/23/2018 08:23:27 AM]    365   3215.0 MiB   3215.0 MiB   @profile

[09/23/2018 08:23:27 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:23:27 AM]    367   3215.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:23:27 AM]    368   3238.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:27 AM]    369   3238.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:23:27 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:23:27 AM]    371                                     return discovered_paths

[09/23/2018 08:23:27 AM]    372   3238.1 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:23:27 AM]    373   3238.1 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:23:27 AM]    374   3238.1 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:23:27 AM]    375   3238.1 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:23:27 AM]    376   3238.1 MiB      0.0 MiB       B = []

[09/23/2018 08:23:27 AM]    377   3238.1 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:23:27 AM]    378   3238.1 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:23:27 AM]    379   3561.8 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:23:27 AM]    380   3561.8 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:23:27 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:23:27 AM]    382   3538.7 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:23:27 AM]    383   3538.7 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:23:27 AM]    384   3538.7 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:23:27 AM]    385   3538.7 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:23:27 AM]    386   3538.7 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:23:27 AM]    387   3538.7 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:23:27 AM]    388   3538.7 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:23:27 AM]    389   3538.7 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:23:27 AM]    390   3538.7 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:23:27 AM]    391   3538.7 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:23:27 AM]    392   3538.7 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:23:27 AM]    393   3561.8 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:27 AM]    394   3561.8 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:23:27 AM]    395   3561.8 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:23:27 AM]    396   3561.8 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:23:27 AM]    397   3561.8 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:23:27 AM]    398   3561.8 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:23:27 AM]    399   3561.8 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:23:27 AM]    400   3561.8 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:23:27 AM]    401   3561.8 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:23:27 AM]    402   3561.8 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:23:27 AM]    403   3561.8 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:23:27 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:23:27 AM]    405   3561.8 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:23:27 AM]    406   3561.8 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:23:27 AM]    407   3561.8 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:23:27 AM]    408   3561.8 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:23:27 AM]    409   3561.8 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:23:27 AM]    410   3561.8 MiB      0.0 MiB           if len(B):

[09/23/2018 08:23:27 AM]    411   3561.8 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:23:27 AM]    412   3561.8 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:23:27 AM]    413   3561.8 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:23:27 AM]    414                                     else:

[09/23/2018 08:23:27 AM]    415                                         break

[09/23/2018 08:23:27 AM]    416   3561.8 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:23:27 AM]    417   3561.8 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:23:27 AM]    418   3561.8 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:23:27 AM] 


[09/23/2018 08:23:27 AM]  
[09/23/2018 08:23:27 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.286517316618, Path (3):
[09/23/2018 08:23:27 AM] [846737] -65 (0.04)-> [1321700] -65 (0.09)-> [846745] -189 (0.15)-> [3782014]

[09/23/2018 08:23:27 AM]  
[09/23/2018 08:23:27 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.114141656281, Path (3):
[09/23/2018 08:23:27 AM] [846737] -480 (0.03)-> [769522] -480 (0.04)-> [5528006] -189 (0.05)-> [3782014]

[09/23/2018 08:23:27 AM]  
[09/23/2018 08:23:27 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.221127137519, Path (3):
[09/23/2018 08:23:27 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -189 (0.15)-> [3782014]

[09/23/2018 08:23:27 AM]  
[09/23/2018 08:23:27 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.293878884718, Path (5):
[09/23/2018 08:23:27 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -329 (0.04)-> [743463] -329 (0.07)-> [4327133] -189 (0.11)-> [3782014]

[09/23/2018 08:23:27 AM]  
[09/23/2018 08:23:27 AM] SPO: [ 846737.0 599.0 3782014.0], Score: 0.262451694096, Path (5):
[09/23/2018 08:23:27 AM] [846737] -480 (0.03)-> [769522] -480 (0.05)-> [2633746] -462 (0.04)-> [769614] -462 (0.07)-> [2927811] -189 (0.08)-> [3782014]

[09/23/2018 08:23:32 AM] Filename: streamminer2.py


[09/23/2018 08:23:32 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:23:32 AM] ================================================

[09/23/2018 08:23:32 AM]    365   3561.8 MiB   3561.8 MiB   @profile

[09/23/2018 08:23:32 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:23:32 AM]    367   3561.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:23:32 AM]    368   3584.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:32 AM]    369   3584.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:23:32 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:23:32 AM]    371   3584.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:23:32 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:23:32 AM]    373                                     'path': path_stack,

[09/23/2018 08:23:32 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:23:32 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:23:32 AM]    376                                 B = []

[09/23/2018 08:23:32 AM]    377                                 removed_edges = []

[09/23/2018 08:23:32 AM]    378                                 removed_nodes = []

[09/23/2018 08:23:32 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:23:32 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:23:32 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:23:32 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:23:32 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:23:32 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:23:32 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:23:32 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:23:32 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:23:32 AM]    388                                         for path_dict in A:

[09/23/2018 08:23:32 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:23:32 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:23:32 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:23:32 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:23:32 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:32 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:23:32 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:23:32 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:23:32 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:23:32 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:23:32 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:23:32 AM]    400                                                             'path': totalPath,

[09/23/2018 08:23:32 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:23:32 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:23:32 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:23:32 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:23:32 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:23:32 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:23:32 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:23:32 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:23:32 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:23:32 AM]    410                                     if len(B):

[09/23/2018 08:23:32 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:23:32 AM]    412                                         A.append(B[0])

[09/23/2018 08:23:32 AM]    413                                         B.pop(0)

[09/23/2018 08:23:32 AM]    414                                     else:

[09/23/2018 08:23:32 AM]    415                                         break

[09/23/2018 08:23:32 AM]    416                                 for path_dict in A:

[09/23/2018 08:23:32 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:23:32 AM]    418                                 return discovered_paths

[09/23/2018 08:23:32 AM] 


[09/23/2018 08:23:38 AM] Filename: streamminer2.py


[09/23/2018 08:23:38 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:23:38 AM] ================================================

[09/23/2018 08:23:38 AM]    365   3584.9 MiB   3584.9 MiB   @profile

[09/23/2018 08:23:38 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:23:38 AM]    367   3584.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:23:38 AM]    368   3608.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:38 AM]    369   3608.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:23:38 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:23:38 AM]    371   3608.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:23:38 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:23:38 AM]    373                                     'path': path_stack,

[09/23/2018 08:23:38 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:23:38 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:23:38 AM]    376                                 B = []

[09/23/2018 08:23:38 AM]    377                                 removed_edges = []

[09/23/2018 08:23:38 AM]    378                                 removed_nodes = []

[09/23/2018 08:23:38 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:23:38 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:23:38 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:23:38 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:23:38 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:23:38 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:23:38 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:23:38 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:23:38 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:23:38 AM]    388                                         for path_dict in A:

[09/23/2018 08:23:38 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:23:38 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:23:38 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:23:38 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:23:38 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:38 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:23:38 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:23:38 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:23:38 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:23:38 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:23:38 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:23:38 AM]    400                                                             'path': totalPath,

[09/23/2018 08:23:38 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:23:38 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:23:38 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:23:38 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:23:38 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:23:38 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:23:38 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:23:38 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:23:38 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:23:38 AM]    410                                     if len(B):

[09/23/2018 08:23:38 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:23:38 AM]    412                                         A.append(B[0])

[09/23/2018 08:23:38 AM]    413                                         B.pop(0)

[09/23/2018 08:23:38 AM]    414                                     else:

[09/23/2018 08:23:38 AM]    415                                         break

[09/23/2018 08:23:38 AM]    416                                 for path_dict in A:

[09/23/2018 08:23:38 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:23:38 AM]    418                                 return discovered_paths

[09/23/2018 08:23:38 AM] 


[09/23/2018 08:23:43 AM] Filename: streamminer2.py


[09/23/2018 08:23:43 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:23:43 AM] ================================================

[09/23/2018 08:23:43 AM]    365   3608.1 MiB   3608.1 MiB   @profile

[09/23/2018 08:23:43 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:23:43 AM]    367   3608.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:23:43 AM]    368   3631.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:43 AM]    369   3631.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:23:43 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:23:43 AM]    371   3631.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:23:43 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:23:43 AM]    373                                     'path': path_stack,

[09/23/2018 08:23:43 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:23:43 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:23:44 AM]    376                                 B = []

[09/23/2018 08:23:44 AM]    377                                 removed_edges = []

[09/23/2018 08:23:44 AM]    378                                 removed_nodes = []

[09/23/2018 08:23:44 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:23:44 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:23:44 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:23:44 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:23:44 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:23:44 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:23:44 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:23:44 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:23:44 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:23:44 AM]    388                                         for path_dict in A:

[09/23/2018 08:23:44 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:23:44 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:23:44 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:23:44 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:23:44 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:23:44 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:23:44 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:23:44 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:23:44 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:23:44 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:23:44 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:23:44 AM]    400                                                             'path': totalPath,

[09/23/2018 08:23:44 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:23:44 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:23:44 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:23:44 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:23:44 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:23:44 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:23:44 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:23:44 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:23:44 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:23:44 AM]    410                                     if len(B):

[09/23/2018 08:23:44 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:23:44 AM]    412                                         A.append(B[0])

[09/23/2018 08:23:44 AM]    413                                         B.pop(0)

[09/23/2018 08:23:44 AM]    414                                     else:

[09/23/2018 08:23:44 AM]    415                                         break

[09/23/2018 08:23:44 AM]    416                                 for path_dict in A:

[09/23/2018 08:23:44 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:23:44 AM]    418                                 return discovered_paths

[09/23/2018 08:23:44 AM] 


[09/23/2018 08:25:32 AM] Filename: streamminer2.py


[09/23/2018 08:25:32 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:25:32 AM] ================================================

[09/23/2018 08:25:32 AM]    365   3631.2 MiB   3631.2 MiB   @profile

[09/23/2018 08:25:32 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:25:32 AM]    367   3631.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:25:32 AM]    368   3654.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:32 AM]    369   3654.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:25:32 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:25:32 AM]    371                                     return discovered_paths

[09/23/2018 08:25:32 AM]    372   3654.3 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:25:32 AM]    373   3654.3 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:25:32 AM]    374   3654.3 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:25:32 AM]    375   3654.3 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:25:32 AM]    376   3654.3 MiB      0.0 MiB       B = []

[09/23/2018 08:25:32 AM]    377   3654.3 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:25:32 AM]    378   3654.3 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:25:32 AM]    379   3978.0 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:25:32 AM]    380   3978.0 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:25:32 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:25:32 AM]    382   3954.9 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:25:32 AM]    383   3954.9 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:25:32 AM]    384   3954.9 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:25:32 AM]    385   3954.9 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:25:32 AM]    386   3954.9 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:25:32 AM]    387   3954.9 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:25:32 AM]    388   3954.9 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:25:32 AM]    389   3954.9 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:25:32 AM]    390   3954.9 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:25:32 AM]    391   3954.9 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:25:32 AM]    392   3954.9 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:25:32 AM]    393   3978.0 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:32 AM]    394   3978.0 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:25:32 AM]    395   3978.0 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:25:32 AM]    396   3978.0 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:25:32 AM]    397   3978.0 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:25:32 AM]    398   3978.0 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:25:32 AM]    399   3978.0 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:25:32 AM]    400   3978.0 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:25:32 AM]    401   3978.0 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:25:32 AM]    402   3978.0 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:25:32 AM]    403   3978.0 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:25:32 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:25:32 AM]    405   3978.0 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:25:32 AM]    406   3978.0 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:25:32 AM]    407   3978.0 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:25:32 AM]    408   3978.0 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:25:32 AM]    409   3978.0 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:25:32 AM]    410   3978.0 MiB      0.0 MiB           if len(B):

[09/23/2018 08:25:32 AM]    411   3978.0 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:25:32 AM]    412   3978.0 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:25:32 AM]    413   3978.0 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:25:32 AM]    414                                     else:

[09/23/2018 08:25:32 AM]    415                                         break

[09/23/2018 08:25:32 AM]    416   3978.0 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:25:32 AM]    417   3978.0 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:25:32 AM]    418   3978.0 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:25:32 AM] 


[09/23/2018 08:25:32 AM]  
[09/23/2018 08:25:32 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.223007000151, Path (3):
[09/23/2018 08:25:32 AM] [851870] -123 (0.04)-> [4568464] -123 (0.07)-> [2016524] -189 (0.11)-> [917821]

[09/23/2018 08:25:32 AM]  
[09/23/2018 08:25:32 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.127755595684, Path (3):
[09/23/2018 08:25:32 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.07)-> [917821]

[09/23/2018 08:25:32 AM]  
[09/23/2018 08:25:32 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.264946302339, Path (3):
[09/23/2018 08:25:32 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -189 (0.18)-> [917821]

[09/23/2018 08:25:32 AM]  
[09/23/2018 08:25:32 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.215151373218, Path (5):
[09/23/2018 08:25:32 AM] [851870] -123 (0.04)-> [4568464] -123 (0.05)-> [3906860] -65 (0.03)-> [5450691] -65 (0.04)-> [4448484] -189 (0.05)-> [917821]

[09/23/2018 08:25:32 AM]  
[09/23/2018 08:25:32 AM] SPO: [ 851870.0 599.0 917821.0], Score: 0.289964307411, Path (5):
[09/23/2018 08:25:32 AM] [851870] -189 (0.03)-> [685564] -660 (0.04)-> [79] -660 (0.04)-> [2932568] -121 (0.08)-> [1928825] -189 (0.11)-> [917821]

[09/23/2018 08:25:37 AM] Filename: streamminer2.py


[09/23/2018 08:25:37 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:25:37 AM] ================================================

[09/23/2018 08:25:37 AM]    365   3978.0 MiB   3978.0 MiB   @profile

[09/23/2018 08:25:37 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:25:37 AM]    367   3978.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:25:37 AM]    368   4001.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:37 AM]    369   4001.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:25:37 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:25:37 AM]    371   4001.1 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:25:37 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:25:37 AM]    373                                     'path': path_stack,

[09/23/2018 08:25:37 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:25:37 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:25:37 AM]    376                                 B = []

[09/23/2018 08:25:37 AM]    377                                 removed_edges = []

[09/23/2018 08:25:37 AM]    378                                 removed_nodes = []

[09/23/2018 08:25:37 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:25:37 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:25:37 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:25:37 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:25:37 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:25:37 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:25:37 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:25:37 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:25:37 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:25:37 AM]    388                                         for path_dict in A:

[09/23/2018 08:25:37 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:25:37 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:25:37 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:25:37 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:25:37 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:37 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:25:37 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:25:37 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:25:37 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:25:37 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:25:37 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:25:37 AM]    400                                                             'path': totalPath,

[09/23/2018 08:25:37 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:25:37 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:25:37 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:25:37 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:25:37 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:25:37 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:25:37 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:25:37 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:25:37 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:25:37 AM]    410                                     if len(B):

[09/23/2018 08:25:37 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:25:37 AM]    412                                         A.append(B[0])

[09/23/2018 08:25:37 AM]    413                                         B.pop(0)

[09/23/2018 08:25:37 AM]    414                                     else:

[09/23/2018 08:25:37 AM]    415                                         break

[09/23/2018 08:25:37 AM]    416                                 for path_dict in A:

[09/23/2018 08:25:37 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:25:37 AM]    418                                 return discovered_paths

[09/23/2018 08:25:37 AM] 


[09/23/2018 08:25:44 AM] Filename: streamminer2.py


[09/23/2018 08:25:44 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:25:44 AM] ================================================

[09/23/2018 08:25:44 AM]    365   4001.1 MiB   4001.1 MiB   @profile

[09/23/2018 08:25:44 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:25:44 AM]    367   4001.1 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:25:44 AM]    368   4024.2 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:44 AM]    369   4024.2 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:25:44 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:25:44 AM]    371   4024.2 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:25:44 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:25:44 AM]    373                                     'path': path_stack,

[09/23/2018 08:25:44 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:25:44 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:25:44 AM]    376                                 B = []

[09/23/2018 08:25:44 AM]    377                                 removed_edges = []

[09/23/2018 08:25:44 AM]    378                                 removed_nodes = []

[09/23/2018 08:25:44 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:25:44 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:25:44 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:25:44 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:25:44 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:25:44 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:25:44 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:25:44 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:25:44 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:25:44 AM]    388                                         for path_dict in A:

[09/23/2018 08:25:44 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:25:44 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:25:44 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:25:44 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:25:44 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:44 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:25:44 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:25:44 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:25:44 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:25:44 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:25:44 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:25:44 AM]    400                                                             'path': totalPath,

[09/23/2018 08:25:44 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:25:44 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:25:44 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:25:44 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:25:44 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:25:44 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:25:44 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:25:44 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:25:44 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:25:44 AM]    410                                     if len(B):

[09/23/2018 08:25:44 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:25:44 AM]    412                                         A.append(B[0])

[09/23/2018 08:25:44 AM]    413                                         B.pop(0)

[09/23/2018 08:25:44 AM]    414                                     else:

[09/23/2018 08:25:44 AM]    415                                         break

[09/23/2018 08:25:44 AM]    416                                 for path_dict in A:

[09/23/2018 08:25:44 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:25:44 AM]    418                                 return discovered_paths

[09/23/2018 08:25:44 AM] 


[09/23/2018 08:25:55 AM] Filename: streamminer2.py


[09/23/2018 08:25:55 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:25:55 AM] ================================================

[09/23/2018 08:25:55 AM]    365   4024.2 MiB   4024.2 MiB   @profile

[09/23/2018 08:25:55 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:25:55 AM]    367   4024.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:25:55 AM]    368   4047.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:55 AM]    369   4047.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:25:55 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:25:55 AM]    371   4047.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:25:55 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:25:55 AM]    373                                     'path': path_stack,

[09/23/2018 08:25:55 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:25:55 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:25:55 AM]    376                                 B = []

[09/23/2018 08:25:55 AM]    377                                 removed_edges = []

[09/23/2018 08:25:55 AM]    378                                 removed_nodes = []

[09/23/2018 08:25:55 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:25:55 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:25:55 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:25:55 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:25:55 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:25:55 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:25:55 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:25:55 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:25:55 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:25:55 AM]    388                                         for path_dict in A:

[09/23/2018 08:25:55 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:25:55 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:25:55 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:25:55 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:25:55 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:25:55 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:25:55 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:25:55 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:25:55 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:25:55 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:25:55 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:25:55 AM]    400                                                             'path': totalPath,

[09/23/2018 08:25:55 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:25:55 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:25:55 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:25:55 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:25:55 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:25:55 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:25:55 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:25:55 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:25:55 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:25:55 AM]    410                                     if len(B):

[09/23/2018 08:25:55 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:25:55 AM]    412                                         A.append(B[0])

[09/23/2018 08:25:55 AM]    413                                         B.pop(0)

[09/23/2018 08:25:55 AM]    414                                     else:

[09/23/2018 08:25:55 AM]    415                                         break

[09/23/2018 08:25:55 AM]    416                                 for path_dict in A:

[09/23/2018 08:25:55 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:25:55 AM]    418                                 return discovered_paths

[09/23/2018 08:25:55 AM] 


[09/23/2018 08:27:52 AM] Filename: streamminer2.py


[09/23/2018 08:27:52 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:27:52 AM] ================================================

[09/23/2018 08:27:52 AM]    365   4047.4 MiB   4047.4 MiB   @profile

[09/23/2018 08:27:52 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:27:52 AM]    367   4047.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:27:52 AM]    368   4070.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:27:52 AM]    369   4070.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:27:52 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:27:52 AM]    371                                     return discovered_paths

[09/23/2018 08:27:52 AM]    372   4070.5 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:27:52 AM]    373   4070.5 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:27:52 AM]    374   4070.5 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:27:52 AM]    375   4070.5 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:27:52 AM]    376   4070.5 MiB      0.0 MiB       B = []

[09/23/2018 08:27:52 AM]    377   4070.5 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:27:52 AM]    378   4070.5 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:27:52 AM]    379   4394.2 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:27:52 AM]    380   4394.2 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:27:52 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:27:52 AM]    382   4371.1 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:27:52 AM]    383   4371.1 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:27:52 AM]    384   4371.1 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:27:52 AM]    385   4371.1 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:27:52 AM]    386   4371.1 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:27:52 AM]    387   4371.1 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:27:52 AM]    388   4371.1 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:27:52 AM]    389   4371.1 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:27:52 AM]    390   4371.1 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:27:52 AM]    391   4371.1 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:27:52 AM]    392   4371.1 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:27:52 AM]    393   4394.2 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:27:52 AM]    394   4394.2 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:27:52 AM]    395   4394.2 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:27:52 AM]    396   4394.2 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:27:52 AM]    397   4394.2 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:27:52 AM]    398   4394.2 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:27:52 AM]    399   4394.2 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:27:52 AM]    400   4394.2 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:27:52 AM]    401   4394.2 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:27:52 AM]    402   4394.2 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:27:52 AM]    403   4394.2 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:27:52 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:27:52 AM]    405   4394.2 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:27:52 AM]    406   4394.2 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:27:52 AM]    407   4394.2 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:27:52 AM]    408   4394.2 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:27:52 AM]    409   4394.2 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:27:52 AM]    410   4394.2 MiB      0.0 MiB           if len(B):

[09/23/2018 08:27:52 AM]    411   4394.2 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:27:52 AM]    412   4394.2 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:27:52 AM]    413   4394.2 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:27:52 AM]    414                                     else:

[09/23/2018 08:27:52 AM]    415                                         break

[09/23/2018 08:27:52 AM]    416   4394.2 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:27:52 AM]    417   4394.2 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:27:52 AM]    418   4394.2 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:27:52 AM] 


[09/23/2018 08:27:52 AM]  
[09/23/2018 08:27:52 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.0670245276544, Path (1):
[09/23/2018 08:27:52 AM] [890343] -189 (0.07)-> [685564]

[09/23/2018 08:27:52 AM]  
[09/23/2018 08:27:52 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.208336131551, Path (3):
[09/23/2018 08:27:52 AM] [890343] -123 (0.04)-> [3038271] -123 (0.07)-> [4479600] -189 (0.1)-> [685564]

[09/23/2018 08:27:52 AM]  
[09/23/2018 08:27:52 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.225169354063, Path (5):
[09/23/2018 08:27:52 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -601 (0.04)-> [3038271] -123 (0.06)-> [4479600] -189 (0.07)-> [685564]

[09/23/2018 08:27:52 AM]  
[09/23/2018 08:27:52 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.200927292463, Path (5):
[09/23/2018 08:27:52 AM] [890343] -65 (0.02)-> [772673] -339 (0.03)-> [3038250] -660 (0.03)-> [662] -660 (0.05)-> [2229114] -601 (0.06)-> [685564]

[09/23/2018 08:27:52 AM]  
[09/23/2018 08:27:52 AM] SPO: [ 890343.0 599.0 685564.0], Score: 0.253899643492, Path (3):
[09/23/2018 08:27:52 AM] [890343] -123 (0.04)-> [3038271] -123 (0.05)-> [1499330] -189 (0.17)-> [685564]

[09/23/2018 08:27:58 AM] Filename: streamminer2.py


[09/23/2018 08:27:58 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:27:58 AM] ================================================

[09/23/2018 08:27:58 AM]    365   4394.2 MiB   4394.2 MiB   @profile

[09/23/2018 08:27:58 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:27:58 AM]    367   4394.2 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:27:58 AM]    368   4417.3 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:27:58 AM]    369   4417.3 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:27:58 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:27:58 AM]    371   4417.3 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:27:58 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:27:58 AM]    373                                     'path': path_stack,

[09/23/2018 08:27:58 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:27:58 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:27:58 AM]    376                                 B = []

[09/23/2018 08:27:58 AM]    377                                 removed_edges = []

[09/23/2018 08:27:58 AM]    378                                 removed_nodes = []

[09/23/2018 08:27:58 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:27:58 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:27:58 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:27:58 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:27:58 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:27:58 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:27:58 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:27:58 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:27:58 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:27:58 AM]    388                                         for path_dict in A:

[09/23/2018 08:27:58 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:27:58 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:27:58 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:27:58 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:27:58 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:27:58 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:27:58 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:27:58 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:27:58 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:27:58 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:27:58 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:27:58 AM]    400                                                             'path': totalPath,

[09/23/2018 08:27:58 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:27:58 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:27:58 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:27:58 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:27:58 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:27:58 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:27:58 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:27:58 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:27:58 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:27:58 AM]    410                                     if len(B):

[09/23/2018 08:27:58 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:27:58 AM]    412                                         A.append(B[0])

[09/23/2018 08:27:58 AM]    413                                         B.pop(0)

[09/23/2018 08:27:58 AM]    414                                     else:

[09/23/2018 08:27:58 AM]    415                                         break

[09/23/2018 08:27:58 AM]    416                                 for path_dict in A:

[09/23/2018 08:27:58 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:27:58 AM]    418                                 return discovered_paths

[09/23/2018 08:27:58 AM] 


[09/23/2018 08:28:12 AM] Filename: streamminer2.py


[09/23/2018 08:28:12 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:28:12 AM] ================================================

[09/23/2018 08:28:12 AM]    365   4417.3 MiB   4417.3 MiB   @profile

[09/23/2018 08:28:12 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:28:12 AM]    367   4417.3 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:28:12 AM]    368   4440.4 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:28:12 AM]    369   4440.4 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:28:12 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:28:12 AM]    371   4440.4 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:28:12 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:28:12 AM]    373                                     'path': path_stack,

[09/23/2018 08:28:12 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:28:12 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:28:12 AM]    376                                 B = []

[09/23/2018 08:28:12 AM]    377                                 removed_edges = []

[09/23/2018 08:28:12 AM]    378                                 removed_nodes = []

[09/23/2018 08:28:12 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:28:12 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:28:12 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:28:12 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:28:12 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:28:12 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:28:12 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:28:12 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:28:12 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:28:12 AM]    388                                         for path_dict in A:

[09/23/2018 08:28:12 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:28:12 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:28:12 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:28:12 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:28:12 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:28:12 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:28:12 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:28:12 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:28:12 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:28:12 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:28:12 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:28:12 AM]    400                                                             'path': totalPath,

[09/23/2018 08:28:12 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:28:12 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:28:12 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:28:12 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:28:12 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:28:12 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:28:12 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:28:12 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:28:12 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:28:12 AM]    410                                     if len(B):

[09/23/2018 08:28:12 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:28:12 AM]    412                                         A.append(B[0])

[09/23/2018 08:28:12 AM]    413                                         B.pop(0)

[09/23/2018 08:28:12 AM]    414                                     else:

[09/23/2018 08:28:12 AM]    415                                         break

[09/23/2018 08:28:12 AM]    416                                 for path_dict in A:

[09/23/2018 08:28:12 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:28:12 AM]    418                                 return discovered_paths

[09/23/2018 08:28:12 AM] 


[09/23/2018 08:28:21 AM] Filename: streamminer2.py


[09/23/2018 08:28:21 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:28:21 AM] ================================================

[09/23/2018 08:28:21 AM]    365   4440.4 MiB   4440.4 MiB   @profile

[09/23/2018 08:28:21 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:28:21 AM]    367   4440.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:28:21 AM]    368   4463.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:28:21 AM]    369   4463.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:28:21 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:28:21 AM]    371   4463.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:28:21 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:28:21 AM]    373                                     'path': path_stack,

[09/23/2018 08:28:21 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:28:21 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:28:21 AM]    376                                 B = []

[09/23/2018 08:28:21 AM]    377                                 removed_edges = []

[09/23/2018 08:28:21 AM]    378                                 removed_nodes = []

[09/23/2018 08:28:21 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:28:21 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:28:21 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:28:21 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:28:21 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:28:21 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:28:21 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:28:21 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:28:21 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:28:21 AM]    388                                         for path_dict in A:

[09/23/2018 08:28:21 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:28:21 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:28:21 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:28:21 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:28:21 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:28:21 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:28:21 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:28:21 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:28:21 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:28:21 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:28:21 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:28:21 AM]    400                                                             'path': totalPath,

[09/23/2018 08:28:21 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:28:21 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:28:21 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:28:21 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:28:21 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:28:21 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:28:21 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:28:21 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:28:21 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:28:21 AM]    410                                     if len(B):

[09/23/2018 08:28:21 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:28:21 AM]    412                                         A.append(B[0])

[09/23/2018 08:28:21 AM]    413                                         B.pop(0)

[09/23/2018 08:28:21 AM]    414                                     else:

[09/23/2018 08:28:21 AM]    415                                         break

[09/23/2018 08:28:21 AM]    416                                 for path_dict in A:

[09/23/2018 08:28:21 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:28:21 AM]    418                                 return discovered_paths

[09/23/2018 08:28:21 AM] 


[09/23/2018 08:29:52 AM] Filename: streamminer2.py


[09/23/2018 08:29:52 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:29:52 AM] ================================================

[09/23/2018 08:29:52 AM]    365   4463.5 MiB   4463.5 MiB   @profile

[09/23/2018 08:29:52 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:29:52 AM]    367   4463.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:29:52 AM]    368   4486.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:29:52 AM]    369   4486.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:29:52 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:29:52 AM]    371                                     return discovered_paths

[09/23/2018 08:29:52 AM]    372   4486.7 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:29:52 AM]    373   4486.7 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:29:52 AM]    374   4486.7 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:29:52 AM]    375   4486.7 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:29:52 AM]    376   4486.7 MiB      0.0 MiB       B = []

[09/23/2018 08:29:52 AM]    377   4486.7 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:29:52 AM]    378   4486.7 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:29:52 AM]    379   4810.4 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:29:52 AM]    380   4810.4 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:29:52 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:29:53 AM]    382   4787.2 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:29:53 AM]    383   4787.2 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:29:53 AM]    384   4787.2 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:29:53 AM]    385   4787.2 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:29:53 AM]    386   4787.2 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:29:53 AM]    387   4787.2 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:29:53 AM]    388   4787.2 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:29:53 AM]    389   4787.2 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:29:53 AM]    390   4787.2 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:29:53 AM]    391   4787.2 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:29:53 AM]    392   4787.2 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:29:53 AM]    393   4810.4 MiB    323.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:29:53 AM]    394   4810.4 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:29:53 AM]    395   4810.4 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:29:53 AM]    396   4810.4 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:29:53 AM]    397   4810.4 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:29:53 AM]    398   4810.4 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:29:53 AM]    399   4810.4 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:29:53 AM]    400   4810.4 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:29:53 AM]    401   4810.4 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:29:53 AM]    402   4810.4 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:29:53 AM]    403   4810.4 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:29:53 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:29:53 AM]    405   4810.4 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:29:53 AM]    406   4810.4 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:29:53 AM]    407   4810.4 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:29:53 AM]    408   4810.4 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:29:53 AM]    409   4810.4 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:29:53 AM]    410   4810.4 MiB      0.0 MiB           if len(B):

[09/23/2018 08:29:53 AM]    411   4810.4 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:29:53 AM]    412   4810.4 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:29:53 AM]    413   4810.4 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:29:53 AM]    414                                     else:

[09/23/2018 08:29:53 AM]    415                                         break

[09/23/2018 08:29:53 AM]    416   4810.4 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:29:53 AM]    417   4810.4 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:29:53 AM]    418   4810.4 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:29:53 AM] 


[09/23/2018 08:29:53 AM]  
[09/23/2018 08:29:53 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.0709806674345, Path (1):
[09/23/2018 08:29:53 AM] [1029025] -189 (0.07)-> [2364618]

[09/23/2018 08:29:53 AM]  
[09/23/2018 08:29:53 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.324233084967, Path (5):
[09/23/2018 08:29:53 AM] [1029025] -123 (0.03)-> [3789441] -123 (0.04)-> [2678431] -462 (0.04)-> [4755814] -462 (0.08)-> [2249904] -189 (0.13)-> [2364618]

[09/23/2018 08:29:53 AM]  
[09/23/2018 08:29:53 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.0859695116702, Path (3):
[09/23/2018 08:29:53 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [2364618]

[09/23/2018 08:29:53 AM]  
[09/23/2018 08:29:53 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.224579024521, Path (5):
[09/23/2018 08:29:53 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -601 (0.06)-> [2287973] -601 (0.08)-> [2364618]

[09/23/2018 08:29:53 AM]  
[09/23/2018 08:29:53 AM] SPO: [ 1029025.0 599.0 2364618.0], Score: 0.199346583418, Path (5):
[09/23/2018 08:29:53 AM] [1029025] -394 (0.02)-> [5287545] -394 (0.03)-> [5168489] -54 (0.04)-> [4567127] -660 (0.04)-> [79] -660 (0.07)-> [2364618]

[09/23/2018 08:29:58 AM] Filename: streamminer2.py


[09/23/2018 08:29:58 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:29:58 AM] ================================================

[09/23/2018 08:29:58 AM]    365   4810.4 MiB   4810.4 MiB   @profile

[09/23/2018 08:29:58 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:29:58 AM]    367   4810.4 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:29:58 AM]    368   4833.5 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:29:58 AM]    369   4833.5 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:29:58 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:29:58 AM]    371   4833.5 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:29:58 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:29:58 AM]    373                                     'path': path_stack,

[09/23/2018 08:29:58 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:29:58 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:29:58 AM]    376                                 B = []

[09/23/2018 08:29:58 AM]    377                                 removed_edges = []

[09/23/2018 08:29:58 AM]    378                                 removed_nodes = []

[09/23/2018 08:29:58 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:29:58 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:29:58 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:29:58 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:29:58 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:29:58 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:29:58 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:29:58 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:29:58 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:29:58 AM]    388                                         for path_dict in A:

[09/23/2018 08:29:58 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:29:58 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:29:58 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:29:58 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:29:58 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:29:58 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:29:58 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:29:58 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:29:58 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:29:58 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:29:58 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:29:58 AM]    400                                                             'path': totalPath,

[09/23/2018 08:29:58 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:29:58 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:29:58 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:29:58 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:29:58 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:29:58 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:29:58 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:29:58 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:29:58 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:29:58 AM]    410                                     if len(B):

[09/23/2018 08:29:58 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:29:58 AM]    412                                         A.append(B[0])

[09/23/2018 08:29:58 AM]    413                                         B.pop(0)

[09/23/2018 08:29:58 AM]    414                                     else:

[09/23/2018 08:29:58 AM]    415                                         break

[09/23/2018 08:29:58 AM]    416                                 for path_dict in A:

[09/23/2018 08:29:58 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:29:58 AM]    418                                 return discovered_paths

[09/23/2018 08:29:58 AM] 


[09/23/2018 08:30:01 AM] Filename: streamminer2.py


[09/23/2018 08:30:01 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:30:01 AM] ================================================

[09/23/2018 08:30:01 AM]    365   4833.5 MiB   4833.5 MiB   @profile

[09/23/2018 08:30:01 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:30:01 AM]    367   4833.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:30:01 AM]    368   4856.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:30:01 AM]    369   4856.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:30:01 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:30:01 AM]    371   4856.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:30:01 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:30:01 AM]    373                                     'path': path_stack,

[09/23/2018 08:30:01 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:30:01 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:30:01 AM]    376                                 B = []

[09/23/2018 08:30:01 AM]    377                                 removed_edges = []

[09/23/2018 08:30:01 AM]    378                                 removed_nodes = []

[09/23/2018 08:30:01 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:30:01 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:30:01 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:30:01 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:30:01 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:30:01 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:30:01 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:30:01 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:30:01 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:30:01 AM]    388                                         for path_dict in A:

[09/23/2018 08:30:01 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:30:01 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:30:01 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:30:01 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:30:01 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:30:01 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:30:01 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:30:01 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:30:01 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:30:01 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:30:01 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:30:01 AM]    400                                                             'path': totalPath,

[09/23/2018 08:30:01 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:30:01 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:30:01 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:30:01 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:30:01 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:30:01 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:30:01 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:30:01 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:30:01 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:30:01 AM]    410                                     if len(B):

[09/23/2018 08:30:01 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:30:01 AM]    412                                         A.append(B[0])

[09/23/2018 08:30:01 AM]    413                                         B.pop(0)

[09/23/2018 08:30:01 AM]    414                                     else:

[09/23/2018 08:30:01 AM]    415                                         break

[09/23/2018 08:30:01 AM]    416                                 for path_dict in A:

[09/23/2018 08:30:01 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:30:01 AM]    418                                 return discovered_paths

[09/23/2018 08:30:01 AM] 


[09/23/2018 08:30:10 AM] Filename: streamminer2.py


[09/23/2018 08:30:10 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:30:10 AM] ================================================

[09/23/2018 08:30:10 AM]    365   4856.6 MiB   4856.6 MiB   @profile

[09/23/2018 08:30:10 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:30:10 AM]    367   4856.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:30:10 AM]    368   4879.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:30:10 AM]    369   4879.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:30:10 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:30:10 AM]    371   4879.7 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:30:10 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:30:10 AM]    373                                     'path': path_stack,

[09/23/2018 08:30:10 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:30:10 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:30:10 AM]    376                                 B = []

[09/23/2018 08:30:10 AM]    377                                 removed_edges = []

[09/23/2018 08:30:10 AM]    378                                 removed_nodes = []

[09/23/2018 08:30:10 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:30:10 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:30:10 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:30:10 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:30:10 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:30:10 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:30:10 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:30:10 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:30:10 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:30:10 AM]    388                                         for path_dict in A:

[09/23/2018 08:30:10 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:30:10 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:30:10 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:30:10 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:30:10 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:30:10 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:30:10 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:30:10 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:30:10 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:30:10 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:30:10 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:30:10 AM]    400                                                             'path': totalPath,

[09/23/2018 08:30:10 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:30:10 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:30:10 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:30:10 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:30:10 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:30:10 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:30:10 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:30:10 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:30:10 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:30:10 AM]    410                                     if len(B):

[09/23/2018 08:30:10 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:30:10 AM]    412                                         A.append(B[0])

[09/23/2018 08:30:10 AM]    413                                         B.pop(0)

[09/23/2018 08:30:10 AM]    414                                     else:

[09/23/2018 08:30:10 AM]    415                                         break

[09/23/2018 08:30:10 AM]    416                                 for path_dict in A:

[09/23/2018 08:30:10 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:30:10 AM]    418                                 return discovered_paths

[09/23/2018 08:30:10 AM] 


[09/23/2018 08:31:25 AM] Filename: streamminer2.py


[09/23/2018 08:31:25 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:31:25 AM] ================================================

[09/23/2018 08:31:25 AM]    365   4879.7 MiB   4879.7 MiB   @profile

[09/23/2018 08:31:25 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:31:25 AM]    367   4879.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:31:25 AM]    368   4902.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:25 AM]    369   4902.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:31:25 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:31:25 AM]    371                                     return discovered_paths

[09/23/2018 08:31:25 AM]    372   4902.8 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:31:25 AM]    373   4902.8 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:31:25 AM]    374   4902.8 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:31:25 AM]    375   4902.8 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:31:25 AM]    376   4902.8 MiB      0.0 MiB       B = []

[09/23/2018 08:31:25 AM]    377   4902.8 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:31:25 AM]    378   4902.8 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:31:25 AM]    379   5411.5 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:31:25 AM]    380   5411.5 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:31:25 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:31:25 AM]    382   5388.4 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:31:25 AM]    383   5388.4 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:31:25 AM]    384   5388.4 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:31:25 AM]    385   5388.4 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:31:25 AM]    386   5388.4 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:31:25 AM]    387   5388.4 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:31:25 AM]    388   5388.4 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:31:25 AM]    389   5388.4 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:31:25 AM]    390   5388.4 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:31:25 AM]    391   5388.4 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:31:25 AM]    392   5388.4 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:31:25 AM]    393   5411.5 MiB    508.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:25 AM]    394   5411.5 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:31:25 AM]    395   5411.5 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:31:25 AM]    396   5411.5 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:31:25 AM]    397   5411.5 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:31:25 AM]    398   5411.5 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:31:25 AM]    399   5411.5 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:31:25 AM]    400   5411.5 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:31:25 AM]    401   5411.5 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:31:25 AM]    402   5411.5 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:31:25 AM]    403   5411.5 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:31:25 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:31:25 AM]    405   5411.5 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:31:25 AM]    406   5411.5 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:31:25 AM]    407   5411.5 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:31:25 AM]    408   5411.5 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:31:25 AM]    409   5411.5 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:31:25 AM]    410   5411.5 MiB      0.0 MiB           if len(B):

[09/23/2018 08:31:25 AM]    411   5411.5 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:31:25 AM]    412   5411.5 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:31:25 AM]    413   5411.5 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:31:25 AM]    414                                     else:

[09/23/2018 08:31:25 AM]    415                                         break

[09/23/2018 08:31:25 AM]    416   5411.5 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:31:25 AM]    417   5411.5 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:31:25 AM]    418   5411.5 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:31:25 AM] 


[09/23/2018 08:31:25 AM]  
[09/23/2018 08:31:25 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.0732918175248, Path (1):
[09/23/2018 08:31:25 AM] [1397869] -189 (0.07)-> [5305646]

[09/23/2018 08:31:25 AM]  
[09/23/2018 08:31:25 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.302960177346, Path (5):
[09/23/2018 08:31:25 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -189 (0.18)-> [5305646]

[09/23/2018 08:31:25 AM]  
[09/23/2018 08:31:25 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.302236904099, Path (7):
[09/23/2018 08:31:25 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -189 (0.09)-> [5305646]

[09/23/2018 08:31:25 AM]  
[09/23/2018 08:31:25 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.402103069783, Path (9):
[09/23/2018 08:31:25 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -462 (0.04)-> [4704367] -462 (0.07)-> [2619928] -189 (0.08)-> [5305646]

[09/23/2018 08:31:25 AM]  
[09/23/2018 08:31:25 AM] SPO: [ 1397869.0 599.0 5305646.0], Score: 0.398263975535, Path (9):
[09/23/2018 08:31:25 AM] [1397869] -602 (0.02)-> [1397870] -660 (0.03)-> [703] -660 (0.03)-> [3391698] -602 (0.04)-> [3391697] -123 (0.03)-> [5256012] -123 (0.06)-> [4670089] -329 (0.04)-> [3740468] -329 (0.06)-> [4243536] -121 (0.08)-> [5305646]

[09/23/2018 08:31:31 AM] Filename: streamminer2.py


[09/23/2018 08:31:31 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:31:31 AM] ================================================

[09/23/2018 08:31:31 AM]    365   5411.5 MiB   5411.5 MiB   @profile

[09/23/2018 08:31:31 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:31:31 AM]    367   5411.5 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:31:31 AM]    368   5434.6 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:31 AM]    369   5434.6 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:31:31 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:31:31 AM]    371   5434.6 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:31:31 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:31:31 AM]    373                                     'path': path_stack,

[09/23/2018 08:31:31 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:31:31 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:31:31 AM]    376                                 B = []

[09/23/2018 08:31:31 AM]    377                                 removed_edges = []

[09/23/2018 08:31:31 AM]    378                                 removed_nodes = []

[09/23/2018 08:31:31 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:31:31 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:31:31 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:31:31 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:31:31 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:31:31 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:31:31 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:31:31 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:31:31 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:31:31 AM]    388                                         for path_dict in A:

[09/23/2018 08:31:31 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:31:31 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:31:31 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:31:31 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:31:31 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:31 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:31:31 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:31:31 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:31:31 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:31:31 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:31:31 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:31:31 AM]    400                                                             'path': totalPath,

[09/23/2018 08:31:31 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:31:31 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:31:31 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:31:31 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:31:31 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:31:31 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:31:31 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:31:31 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:31:31 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:31:31 AM]    410                                     if len(B):

[09/23/2018 08:31:31 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:31:31 AM]    412                                         A.append(B[0])

[09/23/2018 08:31:31 AM]    413                                         B.pop(0)

[09/23/2018 08:31:31 AM]    414                                     else:

[09/23/2018 08:31:31 AM]    415                                         break

[09/23/2018 08:31:31 AM]    416                                 for path_dict in A:

[09/23/2018 08:31:31 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:31:31 AM]    418                                 return discovered_paths

[09/23/2018 08:31:31 AM] 


[09/23/2018 08:31:40 AM] Filename: streamminer2.py


[09/23/2018 08:31:40 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:31:40 AM] ================================================

[09/23/2018 08:31:40 AM]    365   5434.6 MiB   5434.6 MiB   @profile

[09/23/2018 08:31:40 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:31:40 AM]    367   5434.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:31:40 AM]    368   5457.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:40 AM]    369   5457.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:31:40 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:31:40 AM]    371   5457.7 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:31:40 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:31:40 AM]    373                                     'path': path_stack,

[09/23/2018 08:31:40 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:31:40 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:31:40 AM]    376                                 B = []

[09/23/2018 08:31:40 AM]    377                                 removed_edges = []

[09/23/2018 08:31:40 AM]    378                                 removed_nodes = []

[09/23/2018 08:31:40 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:31:40 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:31:40 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:31:40 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:31:40 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:31:40 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:31:40 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:31:40 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:31:40 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:31:40 AM]    388                                         for path_dict in A:

[09/23/2018 08:31:40 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:31:40 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:31:40 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:31:40 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:31:40 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:40 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:31:40 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:31:40 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:31:40 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:31:40 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:31:40 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:31:40 AM]    400                                                             'path': totalPath,

[09/23/2018 08:31:40 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:31:40 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:31:40 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:31:40 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:31:40 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:31:40 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:31:40 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:31:40 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:31:40 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:31:40 AM]    410                                     if len(B):

[09/23/2018 08:31:40 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:31:40 AM]    412                                         A.append(B[0])

[09/23/2018 08:31:40 AM]    413                                         B.pop(0)

[09/23/2018 08:31:40 AM]    414                                     else:

[09/23/2018 08:31:40 AM]    415                                         break

[09/23/2018 08:31:40 AM]    416                                 for path_dict in A:

[09/23/2018 08:31:40 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:31:40 AM]    418                                 return discovered_paths

[09/23/2018 08:31:40 AM] 


[09/23/2018 08:31:45 AM] Filename: streamminer2.py


[09/23/2018 08:31:45 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:31:45 AM] ================================================

[09/23/2018 08:31:45 AM]    365   5457.7 MiB   5457.7 MiB   @profile

[09/23/2018 08:31:45 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:31:45 AM]    367   5457.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:31:45 AM]    368   5480.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:45 AM]    369   5480.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:31:45 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:31:45 AM]    371   5480.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:31:45 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:31:45 AM]    373                                     'path': path_stack,

[09/23/2018 08:31:45 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:31:45 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:31:45 AM]    376                                 B = []

[09/23/2018 08:31:45 AM]    377                                 removed_edges = []

[09/23/2018 08:31:45 AM]    378                                 removed_nodes = []

[09/23/2018 08:31:45 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:31:45 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:31:45 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:31:45 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:31:45 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:31:45 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:31:45 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:31:45 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:31:45 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:31:45 AM]    388                                         for path_dict in A:

[09/23/2018 08:31:45 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:31:45 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:31:45 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:31:45 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:31:45 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:31:45 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:31:45 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:31:45 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:31:45 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:31:45 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:31:45 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:31:45 AM]    400                                                             'path': totalPath,

[09/23/2018 08:31:45 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:31:45 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:31:45 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:31:45 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:31:45 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:31:45 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:31:45 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:31:45 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:31:45 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:31:45 AM]    410                                     if len(B):

[09/23/2018 08:31:45 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:31:45 AM]    412                                         A.append(B[0])

[09/23/2018 08:31:45 AM]    413                                         B.pop(0)

[09/23/2018 08:31:45 AM]    414                                     else:

[09/23/2018 08:31:45 AM]    415                                         break

[09/23/2018 08:31:45 AM]    416                                 for path_dict in A:

[09/23/2018 08:31:45 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:31:45 AM]    418                                 return discovered_paths

[09/23/2018 08:31:45 AM] 


[09/23/2018 08:34:38 AM] Filename: streamminer2.py


[09/23/2018 08:34:38 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:34:38 AM] ================================================

[09/23/2018 08:34:38 AM]    365   5480.9 MiB   5480.9 MiB   @profile

[09/23/2018 08:34:38 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:34:38 AM]    367   5480.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:34:38 AM]    368   5504.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:34:38 AM]    369   5504.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:34:38 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:34:38 AM]    371                                     return discovered_paths

[09/23/2018 08:34:38 AM]    372   5504.0 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:34:38 AM]    373   5504.0 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:34:38 AM]    374   5504.0 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:34:38 AM]    375   5504.0 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:34:38 AM]    376   5504.0 MiB      0.0 MiB       B = []

[09/23/2018 08:34:38 AM]    377   5504.0 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:34:38 AM]    378   5504.0 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:34:38 AM]    379   6012.6 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:34:38 AM]    380   6012.6 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:34:38 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:34:38 AM]    382   5989.5 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:34:38 AM]    383   5989.5 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:34:38 AM]    384   5989.5 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:34:38 AM]    385   5989.5 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:34:38 AM]    386   5989.5 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:34:38 AM]    387   5989.5 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:34:38 AM]    388   5989.5 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:34:38 AM]    389   5989.5 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:34:38 AM]    390   5989.5 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:34:38 AM]    391   5989.5 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:34:38 AM]    392   5989.5 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:34:38 AM]    393   6012.6 MiB    508.7 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:34:38 AM]    394   6012.6 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:34:38 AM]    395   6012.6 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:34:38 AM]    396   6012.6 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:34:38 AM]    397   6012.6 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:34:38 AM]    398   6012.6 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:34:38 AM]    399   6012.6 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:34:38 AM]    400   6012.6 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:34:38 AM]    401   6012.6 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:34:38 AM]    402   6012.6 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:34:38 AM]    403   6012.6 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:34:38 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:34:38 AM]    405   6012.6 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:34:38 AM]    406   6012.6 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:34:38 AM]    407   6012.6 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:34:38 AM]    408   6012.6 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:34:38 AM]    409   6012.6 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:34:38 AM]    410   6012.6 MiB      0.0 MiB           if len(B):

[09/23/2018 08:34:38 AM]    411   6012.6 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:34:38 AM]    412   6012.6 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:34:38 AM]    413   6012.6 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:34:38 AM]    414                                     else:

[09/23/2018 08:34:38 AM]    415                                         break

[09/23/2018 08:34:38 AM]    416   6012.6 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:34:38 AM]    417   6012.6 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:34:38 AM]    418   6012.6 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:34:38 AM] 


[09/23/2018 08:34:38 AM]  
[09/23/2018 08:34:38 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.3767466941, Path (5):
[09/23/2018 08:34:38 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -329 (0.05)-> [3148940] -329 (0.09)-> [5651172] -189 (0.18)-> [4567127]

[09/23/2018 08:34:38 AM]  
[09/23/2018 08:34:38 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.235878581379, Path (5):
[09/23/2018 08:34:38 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.04)-> [3640344] -65 (0.06)-> [5492355] -189 (0.09)-> [4567127]

[09/23/2018 08:34:38 AM]  
[09/23/2018 08:34:38 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.192672051272, Path (5):
[09/23/2018 08:34:38 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -189 (0.06)-> [4567127]

[09/23/2018 08:34:38 AM]  
[09/23/2018 08:34:38 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.258765654105, Path (7):
[09/23/2018 08:34:38 AM] [1431155] -65 (0.02)-> [2944974] -661 (0.03)-> [3187717] -661 (0.03)-> [3436140] -65 (0.05)-> [847598] -65 (0.03)-> [917573] -65 (0.05)-> [1059235] -189 (0.06)-> [4567127]

[09/23/2018 08:34:38 AM]  
[09/23/2018 08:34:38 AM] SPO: [ 1431155.0 599.0 4567127.0], Score: 0.289525100991, Path (7):
[09/23/2018 08:34:38 AM] [1431155] -123 (0.03)-> [3748948] -123 (0.04)-> [4743373] -65 (0.02)-> [1354392] -65 (0.03)-> [678457] -189 (0.04)-> [4567129] -601 (0.06)-> [290262] -601 (0.08)-> [4567127]

[09/23/2018 08:34:46 AM] Filename: streamminer2.py


[09/23/2018 08:34:46 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:34:46 AM] ================================================

[09/23/2018 08:34:46 AM]    365   6012.6 MiB   6012.6 MiB   @profile

[09/23/2018 08:34:46 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:34:46 AM]    367   6012.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:34:46 AM]    368   6035.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:34:46 AM]    369   6035.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:34:46 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:34:46 AM]    371   6035.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:34:46 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:34:46 AM]    373                                     'path': path_stack,

[09/23/2018 08:34:46 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:34:46 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:34:46 AM]    376                                 B = []

[09/23/2018 08:34:46 AM]    377                                 removed_edges = []

[09/23/2018 08:34:46 AM]    378                                 removed_nodes = []

[09/23/2018 08:34:46 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:34:46 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:34:46 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:34:46 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:34:46 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:34:46 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:34:46 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:34:46 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:34:46 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:34:46 AM]    388                                         for path_dict in A:

[09/23/2018 08:34:46 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:34:46 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:34:46 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:34:46 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:34:46 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:34:46 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:34:46 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:34:46 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:34:46 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:34:46 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:34:46 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:34:46 AM]    400                                                             'path': totalPath,

[09/23/2018 08:34:46 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:34:46 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:34:46 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:34:46 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:34:46 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:34:46 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:34:46 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:34:46 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:34:46 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:34:46 AM]    410                                     if len(B):

[09/23/2018 08:34:46 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:34:46 AM]    412                                         A.append(B[0])

[09/23/2018 08:34:46 AM]    413                                         B.pop(0)

[09/23/2018 08:34:46 AM]    414                                     else:

[09/23/2018 08:34:46 AM]    415                                         break

[09/23/2018 08:34:46 AM]    416                                 for path_dict in A:

[09/23/2018 08:34:46 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:34:46 AM]    418                                 return discovered_paths

[09/23/2018 08:34:46 AM] 


[09/23/2018 08:35:00 AM] Filename: streamminer2.py


[09/23/2018 08:35:00 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:35:00 AM] ================================================

[09/23/2018 08:35:00 AM]    365   6035.8 MiB   6035.8 MiB   @profile

[09/23/2018 08:35:00 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:35:00 AM]    367   6035.8 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:35:00 AM]    368   6058.9 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:35:00 AM]    369   6058.9 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:35:00 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:35:00 AM]    371   6058.9 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:35:00 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:35:00 AM]    373                                     'path': path_stack,

[09/23/2018 08:35:00 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:35:00 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:35:00 AM]    376                                 B = []

[09/23/2018 08:35:00 AM]    377                                 removed_edges = []

[09/23/2018 08:35:00 AM]    378                                 removed_nodes = []

[09/23/2018 08:35:00 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:35:00 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:35:00 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:35:00 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:35:00 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:35:00 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:35:00 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:35:00 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:35:00 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:35:00 AM]    388                                         for path_dict in A:

[09/23/2018 08:35:00 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:35:00 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:35:00 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:35:00 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:35:00 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:35:00 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:35:00 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:35:00 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:35:00 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:35:00 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:35:00 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:35:00 AM]    400                                                             'path': totalPath,

[09/23/2018 08:35:00 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:35:00 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:35:00 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:35:00 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:35:00 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:35:00 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:35:00 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:35:00 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:35:00 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:35:00 AM]    410                                     if len(B):

[09/23/2018 08:35:00 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:35:00 AM]    412                                         A.append(B[0])

[09/23/2018 08:35:00 AM]    413                                         B.pop(0)

[09/23/2018 08:35:00 AM]    414                                     else:

[09/23/2018 08:35:00 AM]    415                                         break

[09/23/2018 08:35:00 AM]    416                                 for path_dict in A:

[09/23/2018 08:35:00 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:35:00 AM]    418                                 return discovered_paths

[09/23/2018 08:35:00 AM] 


[09/23/2018 08:35:06 AM] Filename: streamminer2.py


[09/23/2018 08:35:06 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:35:06 AM] ================================================

[09/23/2018 08:35:06 AM]    365   6058.9 MiB   6058.9 MiB   @profile

[09/23/2018 08:35:06 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:35:06 AM]    367   6058.9 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:35:06 AM]    368   6082.0 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:35:06 AM]    369   6082.0 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:35:06 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:35:06 AM]    371   6082.0 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:35:06 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:35:06 AM]    373                                     'path': path_stack,

[09/23/2018 08:35:06 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:35:06 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:35:06 AM]    376                                 B = []

[09/23/2018 08:35:06 AM]    377                                 removed_edges = []

[09/23/2018 08:35:06 AM]    378                                 removed_nodes = []

[09/23/2018 08:35:06 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:35:06 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:35:06 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:35:06 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:35:06 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:35:06 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:35:06 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:35:06 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:35:06 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:35:06 AM]    388                                         for path_dict in A:

[09/23/2018 08:35:06 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:35:06 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:35:06 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:35:06 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:35:06 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:35:06 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:35:06 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:35:06 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:35:06 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:35:06 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:35:06 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:35:06 AM]    400                                                             'path': totalPath,

[09/23/2018 08:35:06 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:35:06 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:35:06 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:35:06 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:35:06 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:35:06 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:35:06 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:35:06 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:35:06 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:35:06 AM]    410                                     if len(B):

[09/23/2018 08:35:06 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:35:06 AM]    412                                         A.append(B[0])

[09/23/2018 08:35:06 AM]    413                                         B.pop(0)

[09/23/2018 08:35:06 AM]    414                                     else:

[09/23/2018 08:35:06 AM]    415                                         break

[09/23/2018 08:35:06 AM]    416                                 for path_dict in A:

[09/23/2018 08:35:06 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:35:06 AM]    418                                 return discovered_paths

[09/23/2018 08:35:06 AM] 


[09/23/2018 08:36:31 AM] Filename: streamminer2.py


[09/23/2018 08:36:31 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:36:31 AM] ================================================

[09/23/2018 08:36:31 AM]    365   6082.0 MiB   6082.0 MiB   @profile

[09/23/2018 08:36:31 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:36:31 AM]    367   6082.0 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:36:31 AM]    368   6105.1 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:36:31 AM]    369   6105.1 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:36:31 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:36:31 AM]    371                                     return discovered_paths

[09/23/2018 08:36:31 AM]    372   6105.1 MiB      0.0 MiB       A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:36:31 AM]    373   6105.1 MiB      0.0 MiB           'path': path_stack,

[09/23/2018 08:36:31 AM]    374   6105.1 MiB      0.0 MiB           'path_rel': rel_stack,

[09/23/2018 08:36:31 AM]    375   6105.1 MiB      0.0 MiB           'path_weights': weight_stack}]

[09/23/2018 08:36:31 AM]    376   6105.1 MiB      0.0 MiB       B = []

[09/23/2018 08:36:31 AM]    377   6105.1 MiB      0.0 MiB       removed_edges = []

[09/23/2018 08:36:31 AM]    378   6105.1 MiB      0.0 MiB       removed_nodes = []

[09/23/2018 08:36:31 AM]    379   6382.6 MiB      0.0 MiB       for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:36:31 AM]    380   6382.6 MiB      0.0 MiB           for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:36:31 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:36:31 AM]    382   6359.5 MiB      0.0 MiB               spurNode = A[-1]['path'][i]

[09/23/2018 08:36:31 AM]    383   6359.5 MiB      0.0 MiB               rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:36:31 AM]    384   6359.5 MiB      0.0 MiB               rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:36:31 AM]    385   6359.5 MiB      0.0 MiB               rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:36:31 AM]    386   6359.5 MiB      0.0 MiB               removed_edges[:] = []

[09/23/2018 08:36:31 AM]    387   6359.5 MiB      0.0 MiB               removed_nodes[:] = []

[09/23/2018 08:36:31 AM]    388   6359.5 MiB      0.0 MiB               for path_dict in A:

[09/23/2018 08:36:31 AM]    389   6359.5 MiB      0.0 MiB                   if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:36:31 AM]    390   6359.5 MiB      0.0 MiB                       removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:36:31 AM]    391   6359.5 MiB      0.0 MiB               for rootPathNode in rootPath[:-1]:

[09/23/2018 08:36:31 AM]    392   6359.5 MiB      0.0 MiB                   removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:36:31 AM]    393   6382.6 MiB    277.5 MiB               spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:36:31 AM]    394   6382.6 MiB      0.0 MiB               if spurPath and spurPathRel != [-1]:

[09/23/2018 08:36:31 AM]    395   6382.6 MiB      0.0 MiB                   totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:36:31 AM]    396   6382.6 MiB      0.0 MiB                   totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:36:31 AM]    397   6382.6 MiB      0.0 MiB                   totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:36:31 AM]    398   6382.6 MiB      0.0 MiB                   totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:36:31 AM]    399   6382.6 MiB      0.0 MiB                   potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:36:31 AM]    400   6382.6 MiB      0.0 MiB                                   'path': totalPath,

[09/23/2018 08:36:31 AM]    401   6382.6 MiB      0.0 MiB                                   'path_rel': totalPathRel,

[09/23/2018 08:36:31 AM]    402   6382.6 MiB      0.0 MiB                                   'path_weights': totalWeights}

[09/23/2018 08:36:31 AM]    403   6382.6 MiB      0.0 MiB                   if not (potential_k in B or potential_k in A):

[09/23/2018 08:36:31 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:36:31 AM]    405   6382.6 MiB      0.0 MiB                       B.append(potential_k)

[09/23/2018 08:36:31 AM]    406   6382.6 MiB      0.0 MiB               removed_nodes.reverse()

[09/23/2018 08:36:31 AM]    407   6382.6 MiB      0.0 MiB               add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:36:31 AM]    408   6382.6 MiB      0.0 MiB               removed_edges.reverse()

[09/23/2018 08:36:31 AM]    409   6382.6 MiB      0.0 MiB               add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:36:31 AM]    410   6382.6 MiB      0.0 MiB           if len(B):

[09/23/2018 08:36:31 AM]    411   6382.6 MiB      0.0 MiB               mergeSort(B,0,len(B)-1)

[09/23/2018 08:36:31 AM]    412   6382.6 MiB      0.0 MiB               A.append(B[0])

[09/23/2018 08:36:31 AM]    413   6382.6 MiB      0.0 MiB               B.pop(0)

[09/23/2018 08:36:31 AM]    414                                     else:

[09/23/2018 08:36:31 AM]    415                                         break

[09/23/2018 08:36:31 AM]    416   6382.6 MiB      0.0 MiB       for path_dict in A:

[09/23/2018 08:36:31 AM]    417   6382.6 MiB      0.0 MiB           discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:36:31 AM]    418   6382.6 MiB      0.0 MiB       return discovered_paths

[09/23/2018 08:36:31 AM] 


[09/23/2018 08:36:31 AM]  
[09/23/2018 08:36:31 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.17915544258, Path (3):
[09/23/2018 08:36:31 AM] [1522148] -329 (0.04)-> [3740468] -329 (0.06)-> [4368651] -121 (0.08)-> [1357357]

[09/23/2018 08:36:31 AM]  
[09/23/2018 08:36:31 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.15147173385, Path (3):
[09/23/2018 08:36:31 AM] [1522148] -189 (0.03)-> [3584723] -121 (0.05)-> [2594378] -189 (0.07)-> [1357357]

[09/23/2018 08:36:31 AM]  
[09/23/2018 08:36:31 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.14092926234, Path (3):
[09/23/2018 08:36:31 AM] [1522148] -189 (0.03)-> [3584723] -660 (0.04)-> [79] -660 (0.07)-> [1357357]

[09/23/2018 08:36:31 AM]  
[09/23/2018 08:36:31 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.282334153748, Path (3):
[09/23/2018 08:36:31 AM] [1522148] -329 (0.04)-> [3740468] -329 (0.06)-> [2834442] -189 (0.19)-> [1357357]

[09/23/2018 08:36:31 AM]  
[09/23/2018 08:36:31 AM] SPO: [ 1522148.0 599.0 1357357.0], Score: 0.298489117074, Path (5):
[09/23/2018 08:36:31 AM] [1522148] -189 (0.03)-> [3584723] -121 (0.05)-> [2594378] -462 (0.04)-> [2269316] -462 (0.07)-> [4368651] -121 (0.1)-> [1357357]

[09/23/2018 08:36:45 AM] Filename: streamminer2.py


[09/23/2018 08:36:45 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:36:45 AM] ================================================

[09/23/2018 08:36:45 AM]    365   6382.6 MiB   6382.6 MiB   @profile

[09/23/2018 08:36:45 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:36:45 AM]    367   6382.6 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:36:45 AM]    368   6405.7 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:36:45 AM]    369   6405.7 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:36:45 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:36:45 AM]    371   6405.7 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:36:45 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:36:45 AM]    373                                     'path': path_stack,

[09/23/2018 08:36:45 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:36:45 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:36:45 AM]    376                                 B = []

[09/23/2018 08:36:45 AM]    377                                 removed_edges = []

[09/23/2018 08:36:45 AM]    378                                 removed_nodes = []

[09/23/2018 08:36:45 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:36:45 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:36:45 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:36:45 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:36:45 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:36:45 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:36:45 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:36:45 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:36:45 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:36:45 AM]    388                                         for path_dict in A:

[09/23/2018 08:36:45 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:36:45 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:36:45 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:36:45 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:36:45 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:36:45 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:36:45 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:36:45 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:36:45 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:36:45 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:36:45 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:36:45 AM]    400                                                             'path': totalPath,

[09/23/2018 08:36:45 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:36:45 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:36:45 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:36:45 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:36:45 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:36:45 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:36:45 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:36:45 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:36:45 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:36:45 AM]    410                                     if len(B):

[09/23/2018 08:36:45 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:36:45 AM]    412                                         A.append(B[0])

[09/23/2018 08:36:45 AM]    413                                         B.pop(0)

[09/23/2018 08:36:45 AM]    414                                     else:

[09/23/2018 08:36:45 AM]    415                                         break

[09/23/2018 08:36:45 AM]    416                                 for path_dict in A:

[09/23/2018 08:36:45 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:36:45 AM]    418                                 return discovered_paths

[09/23/2018 08:36:45 AM] 


[09/23/2018 08:36:56 AM] Filename: streamminer2.py


[09/23/2018 08:36:56 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:36:56 AM] ================================================

[09/23/2018 08:36:56 AM]    365   6405.7 MiB   6405.7 MiB   @profile

[09/23/2018 08:36:56 AM]    366                             def yenKSP5(Gv, Gr, sid, pid, oid, K = 5):

[09/23/2018 08:36:56 AM]    367   6405.7 MiB      0.0 MiB       discovered_paths = []

[09/23/2018 08:36:56 AM]    368   6428.8 MiB     23.1 MiB       weight_stack, path_stack, rel_stack = relclosure_sm(Gv, Gr, int(sid), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:36:56 AM]    369   6428.8 MiB      0.0 MiB       if rel_stack == [-1]:

[09/23/2018 08:36:56 AM]    370                                     ## if the first shortest path is empty, return empty discovered_paths

[09/23/2018 08:36:56 AM]    371   6428.8 MiB      0.0 MiB           return discovered_paths

[09/23/2018 08:36:56 AM]    372                                 A = [{'path_total_cost': np.sum(weight_stack[:-1]),

[09/23/2018 08:36:56 AM]    373                                     'path': path_stack,

[09/23/2018 08:36:56 AM]    374                                     'path_rel': rel_stack,

[09/23/2018 08:36:56 AM]    375                                     'path_weights': weight_stack}]

[09/23/2018 08:36:56 AM]    376                                 B = []

[09/23/2018 08:36:56 AM]    377                                 removed_edges = []

[09/23/2018 08:36:56 AM]    378                                 removed_nodes = []

[09/23/2018 08:36:56 AM]    379                                 for k in xrange(1, K): #for the k-th path, it assumes all paths 1..k-1 are available

[09/23/2018 08:36:56 AM]    380                                     for i in xrange(0, len(A[-1]['path'])-1):

[09/23/2018 08:36:56 AM]    381                                         # the spurnode ranges from first node of the previous (k-1) shortest path to its next to last node.

[09/23/2018 08:36:56 AM]    382                                         spurNode = A[-1]['path'][i]

[09/23/2018 08:36:56 AM]    383                                         rootPath = A[-1]['path'][:i+1]

[09/23/2018 08:36:56 AM]    384                                         rootPathRel = A[-1]['path_rel'][:i+1]

[09/23/2018 08:36:56 AM]    385                                         rootPathWeights = A[-1]['path_weights'][:i+1]

[09/23/2018 08:36:56 AM]    386                                         removed_edges[:] = []

[09/23/2018 08:36:56 AM]    387                                         removed_nodes[:] = []

[09/23/2018 08:36:56 AM]    388                                         for path_dict in A:

[09/23/2018 08:36:56 AM]    389                                             if len(path_dict['path']) > i and rootPath == path_dict['path'][:i+1]:

[09/23/2018 08:36:56 AM]    390                                                 removed_edges.extend( delete_edge(Gv, Gr, path_dict['path'][i], path_dict['path_rel'][i+1], path_dict['path'][i+1]) )

[09/23/2018 08:36:56 AM]    391                                         for rootPathNode in rootPath[:-1]:

[09/23/2018 08:36:56 AM]    392                                             removed_nodes.extend( delete_node(Gv, Gr, rootPathNode) )

[09/23/2018 08:36:56 AM]    393                                         spurPathWeights, spurPath, spurPathRel = relclosure_sm(Gv, Gr, int(spurNode), int(pid), int(oid), kind='metric', linkpred = False)

[09/23/2018 08:36:56 AM]    394                                         if spurPath and spurPathRel != [-1]:

[09/23/2018 08:36:56 AM]    395                                             totalPath = rootPath[:-1] + spurPath

[09/23/2018 08:36:56 AM]    396                                             totalDist = np.sum(rootPathWeights[:-1]) + np.sum(spurPathWeights[:-1])

[09/23/2018 08:36:56 AM]    397                                             totalWeights = rootPathWeights[:-1] + spurPathWeights[:]

[09/23/2018 08:36:56 AM]    398                                             totalPathRel = rootPathRel[:] + spurPathRel[1:]

[09/23/2018 08:36:56 AM]    399                                             potential_k = {'path_total_cost': totalDist,

[09/23/2018 08:36:56 AM]    400                                                             'path': totalPath,

[09/23/2018 08:36:56 AM]    401                                                             'path_rel': totalPathRel,

[09/23/2018 08:36:56 AM]    402                                                             'path_weights': totalWeights}

[09/23/2018 08:36:56 AM]    403                                             if not (potential_k in B or potential_k in A):

[09/23/2018 08:36:56 AM]    404                                                 # removes repititive paths in A & B

[09/23/2018 08:36:56 AM]    405                                                 B.append(potential_k)

[09/23/2018 08:36:56 AM]    406                                         removed_nodes.reverse()

[09/23/2018 08:36:56 AM]    407                                         add_node(Gv, Gr, removed_nodes)

[09/23/2018 08:36:56 AM]    408                                         removed_edges.reverse()

[09/23/2018 08:36:56 AM]    409                                         add_edge(Gv, Gr, removed_edges)

[09/23/2018 08:36:56 AM]    410                                     if len(B):

[09/23/2018 08:36:56 AM]    411                                         mergeSort(B,0,len(B)-1)

[09/23/2018 08:36:56 AM]    412                                         A.append(B[0])

[09/23/2018 08:36:56 AM]    413                                         B.pop(0)

[09/23/2018 08:36:56 AM]    414                                     else:

[09/23/2018 08:36:56 AM]    415                                         break

[09/23/2018 08:36:56 AM]    416                                 for path_dict in A:

[09/23/2018 08:36:56 AM]    417                                     discovered_paths.append(RelationalPathSM(sid, pid, oid, path_dict['path_total_cost'], len(path_dict['path'])-1, path_dict['path'], path_dict['path_rel'], path_dict['path_weights']))

[09/23/2018 08:36:56 AM]    418                                 return discovered_paths

[09/23/2018 08:36:56 AM] 


[09/23/2018 08:36:56 AM] Filename: streamminer2.py


[09/23/2018 08:36:56 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:36:56 AM] ================================================

[09/23/2018 08:36:56 AM]    330   1944.2 MiB   1944.2 MiB   @profile

[09/23/2018 08:36:56 AM]    331                             def extract_paths_sm(Gv, Gr, triples, y, features=None):

[09/23/2018 08:36:56 AM]    332   1944.2 MiB      0.0 MiB       return_features = False

[09/23/2018 08:36:56 AM]    333   1944.2 MiB      0.0 MiB       if features is None:

[09/23/2018 08:36:56 AM]    334   1944.2 MiB      0.0 MiB           return_features = True

[09/23/2018 08:36:56 AM]    335   1944.2 MiB      0.0 MiB           features, pos_features, neg_features = set(), set(), set()

[09/23/2018 08:36:56 AM]    336   1944.2 MiB      0.0 MiB       measurements = []

[09/23/2018 08:36:56 AM]    337                             

[09/23/2018 08:36:56 AM]    338   6428.8 MiB      0.0 MiB       for idx, triple in enumerate(tqdm(triples)):

[09/23/2018 08:36:56 AM]    339   6405.7 MiB      0.0 MiB           sid, pid, oid = triple['sid'], triple['pid'], triple['oid']

[09/23/2018 08:36:56 AM]    340   6405.7 MiB      0.0 MiB           label = y[idx]

[09/23/2018 08:36:56 AM]    341   6405.7 MiB      0.0 MiB           triple_feature = dict()

[09/23/2018 08:36:56 AM]    342   6428.8 MiB   4484.6 MiB           discovered_paths = yenKSP5(Gv, Gr, sid, pid, oid, K = 5)

[09/23/2018 08:36:56 AM]    343   6428.8 MiB      0.0 MiB           for path in discovered_paths:

[09/23/2018 08:36:56 AM]    344   6382.6 MiB      0.0 MiB               log.info("{}\n".format(path))

[09/23/2018 08:36:56 AM]    345   6382.6 MiB      0.0 MiB               ff = tuple(path.relational_path)

[09/23/2018 08:36:56 AM]    346   6382.6 MiB      0.0 MiB               if ff not in features:

[09/23/2018 08:36:56 AM]    347   6382.6 MiB      0.0 MiB                   features.add(ff)

[09/23/2018 08:36:56 AM]    348   6382.6 MiB      0.0 MiB                   if label == 1:

[09/23/2018 08:36:56 AM]    349   6382.6 MiB      0.0 MiB                       pos_features.add(ff)

[09/23/2018 08:36:56 AM]    350                                             elif label == 0:

[09/23/2018 08:36:56 AM]    351                                                 neg_features.add(ff)

[09/23/2018 08:36:56 AM]    352                                             else:

[09/23/2018 08:36:56 AM]    353                                                 raise Exception("Unknown class label: {}".format(label))

[09/23/2018 08:36:56 AM]    354   6382.6 MiB      0.0 MiB               triple_feature[ff] = triple_feature.get(ff, 0) + 1

[09/23/2018 08:36:56 AM]    355   6428.8 MiB      0.0 MiB           measurements.append(triple_feature)

[09/23/2018 08:36:56 AM]    356   6428.8 MiB      0.0 MiB       if return_features:

[09/23/2018 08:36:56 AM]    357   6428.8 MiB      0.0 MiB           return features, pos_features, neg_features, measurements

[09/23/2018 08:36:56 AM]    358                                 return measurements

[09/23/2018 08:36:56 AM] 


[09/23/2018 08:36:56 AM] P: +:34, -:0, unique tot:34
[09/23/2018 08:36:56 AM] Time taken: 1222.71s


[09/23/2018 08:36:56 AM] => Path selection..
[09/23/2018 08:36:56 AM] D: +:34, -:0, tot:34
[09/23/2018 08:36:56 AM] Time taken: 0.16s

[09/23/2018 08:36:56 AM] => Model building..
[09/23/2018 08:36:58 AM] #Features: 34, best-AUROC: 0.89744
[09/23/2018 08:36:58 AM] Time taken: 1.91s

[09/23/2018 08:36:58 AM] Filename: streamminer2.py


[09/23/2018 08:36:58 AM] Line #    Mem usage    Increment   Line Contents

[09/23/2018 08:36:58 AM] ================================================

[09/23/2018 08:36:58 AM]    177    936.5 MiB    936.5 MiB   @profile

[09/23/2018 08:36:58 AM]    178                             def train_model_sm(G, triples, relsim, use_interpretable_features=False, cv=10):

[09/23/2018 08:36:58 AM]    179                                 """

[09/23/2018 08:36:58 AM]    180                                 Entry point for building a fact-checking classifier.

[09/23/2018 08:36:58 AM]    181                                 Performs three steps:

[09/23/2018 08:36:58 AM]    182                                 1. Path extraction (features)

[09/23/2018 08:36:58 AM]    183                                 2a. Path selection using information gain

[09/23/2018 08:36:58 AM]    184                                 2b. Filtering most informative discriminative predicate paths

[09/23/2018 08:36:58 AM]    185                                 3. Building logistic regression model

[09/23/2018 08:36:58 AM]    186                             

[09/23/2018 08:36:58 AM]    187                                 Parameters:

[09/23/2018 08:36:58 AM]    188                                 -----------

[09/23/2018 08:36:58 AM]    189                                 G: rgraph

[09/23/2018 08:36:58 AM]    190                                     Knowledge graph.

[09/23/2018 08:36:58 AM]    191                                 triples: dataframe

[09/23/2018 08:36:58 AM]    192                                     A data frame consisting of at least four columns, including

[09/23/2018 08:36:58 AM]    193                                     sid, pid, oid, class.

[09/23/2018 08:36:58 AM]    194                                 use_interpretable_features: bool

[09/23/2018 08:36:58 AM]    195                                     Whether or not to perform 2b.

[09/23/2018 08:36:58 AM]    196                                 cv: int

[09/23/2018 08:36:58 AM]    197                                     Number of cross-validation folds.

[09/23/2018 08:36:58 AM]    198                             

[09/23/2018 08:36:58 AM]    199                                 Returns:

[09/23/2018 08:36:58 AM]    200                                 --------

[09/23/2018 08:36:58 AM]    201                                 vec: DictVectorizer

[09/23/2018 08:36:58 AM]    202                                     Useful for preprocessing future triples.

[09/23/2018 08:36:58 AM]    203                                 model: dict

[09/23/2018 08:36:58 AM]    204                                     A dictionary containing 'clf' as the built model,

[09/23/2018 08:36:58 AM]    205                                     and two other key-value pairs, including best parameter

[09/23/2018 08:36:58 AM]    206                                     and best AUROC score.

[09/23/2018 08:36:58 AM]    207                                 """

[09/23/2018 08:36:58 AM]    208    936.5 MiB      0.0 MiB       y = triples['class'] # ground truth

[09/23/2018 08:36:58 AM]    209    936.5 MiB      0.0 MiB       triples = triples[['sid', 'pid', 'oid']].to_dict(orient='records')

[09/23/2018 08:36:58 AM]    210                             

[09/23/2018 08:36:58 AM]    211    936.5 MiB      0.0 MiB       pid = triples[0]['pid']

[09/23/2018 08:36:58 AM]    212    936.7 MiB      0.1 MiB       log.info('PID is: {}, with type: {}'.format(pid, pid.dtype))

[09/23/2018 08:36:58 AM]    213                             

[09/23/2018 08:36:58 AM]    214    936.7 MiB      0.0 MiB       if np.DataSource().exists(join(HOME, "sm", "G_fil_val_{}.npz".format(int(pid)) ))\

[09/23/2018 08:36:58 AM]    215    936.7 MiB      0.0 MiB          and np.DataSource().exists(join(HOME, "sm", "G_fil_rel_{}.npz".format(int(pid)) )):

[09/23/2018 08:36:58 AM]    216   1441.2 MiB    504.5 MiB           Gr = load_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid)) ))

[09/23/2018 08:36:58 AM]    217   1944.2 MiB    503.0 MiB           Gv = load_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid)) ))

[09/23/2018 08:36:58 AM]    218                                 else:

[09/23/2018 08:36:58 AM]    219                                     # set weights

[09/23/2018 08:36:58 AM]    220                                     indegsim = weighted_degree(G.indeg_vec, weight=WTFN).reshape((1, G.N))

[09/23/2018 08:36:58 AM]    221                                     indegsim = indegsim.ravel()

[09/23/2018 08:36:58 AM]    222                                     targets = G.csr.indices % G.N

[09/23/2018 08:36:58 AM]    223                                     relations = (G.csr.indices - targets) / G.N

[09/23/2018 08:36:58 AM]    224                                     relsimvec = np.array(relsim[int(pid), :]) # specific to predicate p

[09/23/2018 08:36:58 AM]    225                                     relsim_wt = relsimvec[relations] # with the size of relations as the number of relations

[09/23/2018 08:36:58 AM]    226                                     ######################################################

[09/23/2018 08:36:58 AM]    227                                     specificity_wt = indegsim[targets] # specificity

[09/23/2018 08:36:58 AM]    228                             

[09/23/2018 08:36:58 AM]    229                                     ## Removing all the edges with the predicte p in between any nodes.

[09/23/2018 08:36:58 AM]    230                                     log.info('=> Removing predicate {} from KG.\n\n'.format(pid))

[09/23/2018 08:36:58 AM]    231                                     eraseedges_mask = ((G.csr.indices - (G.csr.indices % G.N)) / G.N) == pid

[09/23/2018 08:36:58 AM]    232                                     specificity_wt[eraseedges_mask] = 0

[09/23/2018 08:36:58 AM]    233                                     relsim_wt[eraseedges_mask] = 0

[09/23/2018 08:36:58 AM]    234                                     G.csr.data = specificity_wt.copy()

[09/23/2018 08:36:58 AM]    235                             

[09/23/2018 08:36:58 AM]    236                                     G.csr.data = np.multiply(relsim_wt, G.csr.data)

[09/23/2018 08:36:58 AM]    237                                     log.info("Constructing adjacency matrix for: {}".format(pid))

[09/23/2018 08:36:58 AM]    238                                     adj_list_data = []

[09/23/2018 08:36:58 AM]    239                                     adj_list_s = []

[09/23/2018 08:36:58 AM]    240                                     adj_list_p = []

[09/23/2018 08:36:58 AM]    241                                     adj_list_o = []

[09/23/2018 08:36:58 AM]    242                                     sel_data = np.array([])

[09/23/2018 08:36:58 AM]    243                                     sel_relations = np.array([])

[09/23/2018 08:36:58 AM]    244                                     dicti = {}

[09/23/2018 08:36:58 AM]    245                                     num_nodes = len(G.csr.indptr)-1

[09/23/2018 08:36:58 AM]    246                                     for node in tqdm(xrange(num_nodes)):

[09/23/2018 08:36:58 AM]    247                                         dicti = {}

[09/23/2018 08:36:58 AM]    248                                         start = G.csr.indptr[node]

[09/23/2018 08:36:58 AM]    249                                         end = G.csr.indptr[node+1]

[09/23/2018 08:36:58 AM]    250                             

[09/23/2018 08:36:58 AM]    251                                         sel_data = G.csr.data[start:end]

[09/23/2018 08:36:58 AM]    252                                         sel_relations = relations[start:end]

[09/23/2018 08:36:58 AM]    253                                         for i, sel_tar in enumerate(targets[start:end]):

[09/23/2018 08:36:58 AM]    254                                             if sel_tar in dicti:

[09/23/2018 08:36:58 AM]    255                                                 if dicti[sel_tar][0] < sel_data[i]:

[09/23/2018 08:36:58 AM]    256                                                     dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 08:36:58 AM]    257                                             else:

[09/23/2018 08:36:58 AM]    258                                                 dicti[sel_tar] = (sel_data[i], sel_relations[i])

[09/23/2018 08:36:58 AM]    259                                         for key, value in dicti.iteritems():

[09/23/2018 08:36:58 AM]    260                                             if value[0] != 0:

[09/23/2018 08:36:58 AM]    261                                                 adj_list_data.append(value[0])

[09/23/2018 08:36:58 AM]    262                                                 adj_list_s.append(node)

[09/23/2018 08:36:58 AM]    263                                                 adj_list_p.append(value[1])

[09/23/2018 08:36:58 AM]    264                                                 adj_list_o.append(key)

[09/23/2018 08:36:58 AM]    265                                     Gr = csr_matrix((adj_list_p, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 08:36:58 AM]    266                                     Gv = csr_matrix((adj_list_data, (adj_list_s, adj_list_o)), shape=(num_nodes, num_nodes))

[09/23/2018 08:36:58 AM]    267                                     save_npz(join(HOME, 'sm', 'G_fil_rel_{}.npz'.format(int(pid))), Gr)

[09/23/2018 08:36:58 AM]    268                                     save_npz(join(HOME, 'sm', 'G_fil_val_{}.npz'.format(int(pid))), Gv)

[09/23/2018 08:36:58 AM]    269                             

[09/23/2018 08:36:58 AM]    270                                 ############# Path extraction ###################

[09/23/2018 08:36:58 AM]    271   1944.2 MiB      0.0 MiB       log.info('=> Path extraction..(this can take a while)')

[09/23/2018 08:36:58 AM]    272   1944.2 MiB      0.0 MiB       t1 = time()

[09/23/2018 08:36:58 AM]    273   6428.8 MiB   4484.7 MiB       features, pos_features, neg_features, measurements = extract_paths_sm(Gv, Gr, triples, y)

[09/23/2018 08:36:58 AM]    274   6428.8 MiB      0.0 MiB       log.info('P: +:{}, -:{}, unique tot:{}'.format(len(pos_features), len(neg_features), len(features)))

[09/23/2018 08:36:58 AM]    275   6428.8 MiB      0.0 MiB       vec = DictVectorizer()

[09/23/2018 08:36:58 AM]    276   6428.8 MiB      0.0 MiB       X = vec.fit_transform(measurements)

[09/23/2018 08:36:58 AM]    277   6428.8 MiB      0.0 MiB       n, m = X.shape

[09/23/2018 08:36:58 AM]    278   6428.8 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n\n'.format(time() - t1))

[09/23/2018 08:36:58 AM]    279                             

[09/23/2018 08:36:58 AM]    280                                 ########### Path selection ###############

[09/23/2018 08:36:58 AM]    281   6428.8 MiB      0.0 MiB       log.info('=> Path selection..')

[09/23/2018 08:36:58 AM]    282   6428.8 MiB      0.0 MiB       t1 = time()

[09/23/2018 08:36:58 AM]    283   6428.8 MiB      0.0 MiB       pathselect = SelectKBest(mutual_info_classif, k=min(100, m))

[09/23/2018 08:36:58 AM]    284   6429.2 MiB      0.4 MiB       X_select = pathselect.fit_transform(X, y)

[09/23/2018 08:36:58 AM]    285   6429.2 MiB      0.0 MiB       selectidx = pathselect.get_support(indices=True) # selected feature indices

[09/23/2018 08:36:58 AM]    286   6429.2 MiB      0.0 MiB       vec = vec.restrict(selectidx, indices=True)

[09/23/2018 08:36:58 AM]    287   6429.2 MiB      0.0 MiB       select_pos_features, select_neg_features = set(), set()

[09/23/2018 08:36:58 AM]    288   6429.2 MiB      0.0 MiB       for feature in vec.get_feature_names():

[09/23/2018 08:36:58 AM]    289   6429.2 MiB      0.0 MiB           if feature in pos_features:

[09/23/2018 08:36:58 AM]    290   6429.2 MiB      0.0 MiB               select_pos_features.add(feature)

[09/23/2018 08:36:58 AM]    291   6429.2 MiB      0.0 MiB           if feature in neg_features:

[09/23/2018 08:36:58 AM]    292                                         select_neg_features.add(feature)

[09/23/2018 08:36:58 AM]    293   6429.2 MiB      0.0 MiB       log.info('D: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 08:36:58 AM]    294   6429.2 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 08:36:58 AM]    295                             

[09/23/2018 08:36:58 AM]    296                                 # Fact interpretation

[09/23/2018 08:36:58 AM]    297   6429.2 MiB      0.0 MiB       if use_interpretable_features and len(select_neg_features) > 0:

[09/23/2018 08:36:58 AM]    298                                     log.info('=> Fact interpretation..')

[09/23/2018 08:36:58 AM]    299                                     t1 = time()

[09/23/2018 08:36:58 AM]    300                                     theta = 10

[09/23/2018 08:36:58 AM]    301                                     select_neg_idx = [i for i, f in enumerate(vec.get_feature_names()) if f in select_neg_features]

[09/23/2018 08:36:58 AM]    302                                     removemask = np.where(np.sum(X_select[:, select_neg_idx], axis=0) >= theta)[0]

[09/23/2018 08:36:58 AM]    303                                     restrictidx = select_neg_idx[removemask]

[09/23/2018 08:36:58 AM]    304                                     keepidx = []

[09/23/2018 08:36:58 AM]    305                                     for i, f in enumerate(vec.get_feature_names()):

[09/23/2018 08:36:58 AM]    306                                         if i not in restrictidx:

[09/23/2018 08:36:58 AM]    307                                             keepidx.append(i)

[09/23/2018 08:36:58 AM]    308                                         else:

[09/23/2018 08:36:58 AM]    309                                             select_neg_features.remove(f)

[09/23/2018 08:36:58 AM]    310                                     vec = vec.restrictidx(keepidx, indices=True)

[09/23/2018 08:36:58 AM]    311                                     X_select = X_select[:, keepidx]

[09/23/2018 08:36:58 AM]    312                                     log.info('D*: +:{}, -:{}, tot:{}'.format(len(select_pos_features), len(select_neg_features), X_select.shape[1]))

[09/23/2018 08:36:58 AM]    313                                     log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 08:36:58 AM]    314                             

[09/23/2018 08:36:58 AM]    315                                 # Model creation

[09/23/2018 08:36:58 AM]    316   6429.2 MiB      0.0 MiB       log.info('=> Model building..')

[09/23/2018 08:36:58 AM]    317   6429.2 MiB      0.0 MiB       t1 = time()

[09/23/2018 08:36:58 AM]    318   6429.6 MiB      0.4 MiB       model = find_best_model(X_select, y, cv=cv)

[09/23/2018 08:36:58 AM]    319   6429.6 MiB      0.0 MiB       log.info('#Features: {}, best-AUROC: {:.5f}'.format(X_select.shape[1], model['best_score']))

[09/23/2018 08:36:58 AM]    320   6429.6 MiB      0.0 MiB       log.info('Time taken: {:.2f}s\n'.format(time() - t1))

[09/23/2018 08:36:58 AM]    321                             

[09/23/2018 08:36:58 AM]    322   6429.6 MiB      0.0 MiB       return vec, model

[09/23/2018 08:36:58 AM] 


[09/23/2018 08:36:58 AM] Time taken: 1230.60s

[09/23/2018 08:36:58 AM] Saved: /home/galois/Documents/streamminer/output/out_streamminer_sub_sample_2018-09-23_08:16:27.pkl
[09/23/2018 08:36:58 AM] 
Done!

[09/23/2018 08:36:58 AM]  
[09/23/2018 08:36:58 AM] Wrote profile results to streamminer2.py.lprof
[09/23/2018 08:36:58 AM] 

